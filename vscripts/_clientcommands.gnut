untyped

//=========================================================
//	_clientcommands.gnut
//=========================================================

global function ClientCommands_Init

void function ClientCommands_Init()
{
	AddClientCommandCallback( "noclip", ClientCommand_noclip )
	AddClientCommandCallback( "infinite_ammo", ClientCommand_infinite_ammo )
	AddClientCommandCallback( "ToggleThirdPerson", ClientCommand_ToggleThirdPerson )
	AddClientCommandCallback( "ToggleHUD", ClientCommand_ToggleHUD )

	AddClientCommandCallback( "recharge", ClientCommand_recharge )

	#if DEVELOPER
	//AddClientCommandCallback( "script", ClientCommand_script )
	#endif
}

bool function ClientCommand_noclip( entity player, array<string> args )
{
	if ( GetConVarInt( "sv_cheats" ) != 1 )
		return true
	
	if ( IsValid( player.GetParent() ) )
		return false
				
	if ( player.IsPhaseShifted() )
		return false

	if ( player.IsNoclipping() )
		player.SetPhysics( MOVETYPE_WALK )
	else
		player.SetPhysics( MOVETYPE_NOCLIP )
			
	return true
}

bool function ClientCommand_ToggleThirdPerson( entity player, array<string> args )
{
	if ( GetConVarInt( "sv_cheats" ) != 1 )
		return false
	if ( player.IsThirdPersonShoulderModeOn() )
		player.SetThirdPersonShoulderModeOff() 	
	else
		player.SetThirdPersonShoulderModeOn() 	
			
	return true
}

bool function ClientCommand_ToggleHUD( entity player, array<string> args )
{
	if( !IsValid( player ) )
		return true

	if ( !( "hudVisible" in player.s ) )
		player.s.hudVisible <- true

	player.s.hudVisible = !player.s.hudVisible

	array<int> flagsForHudVisibilityControl = [
		CE_FLAG_HIDE_MAIN_HUD_INSTANT,
		CE_FLAG_HIDE_PERMANENT_HUD
	]

	if ( player.s.hudVisible )
	{
		foreach ( flag in flagsForHudVisibilityControl )
			RemoveCinematicFlag( player, flag )
	} else
	{
		foreach ( flag in flagsForHudVisibilityControl )
			AddCinematicFlag( player, flag )
	}

	return true
}

// Gives a gun infinite reloads
bool function ClientCommand_infinite_ammo( entity player, array<string> args )
{

	if( !IsValid( player ) )
		return false

	if ( GetConVarInt( "sv_cheats" ) != 1 )
		return false

	foreach(entity weapon in GetEntArrayByClass_Expensive("weaponx")) {
		if(weapon.HasMod( "survival_finite_ammo" )) {
			weapon.RemoveMod( "survival_finite_ammo" )
		}
	}
	return true
}

// Instantly fills a player's abilities
bool function ClientCommand_recharge( entity player, array<string> args )
{
	if( !IsValid( player ) )
		return false

	if ( GetConVarInt( "sv_cheats" ) != 1 )
		return false
    
	if(IsValid(player.GetOffhandWeapon( OFFHAND_INVENTORY )))
		player.GetOffhandWeapon( OFFHAND_INVENTORY ).SetWeaponPrimaryClipCount( player.GetOffhandWeapon( OFFHAND_INVENTORY ).GetWeaponPrimaryClipCountMax() )
	if(IsValid(player.GetOffhandWeapon( OFFHAND_LEFT ))){
		player.GetOffhandWeapon( OFFHAND_LEFT ).SetWeaponPrimaryClipCount( player.GetOffhandWeapon( OFFHAND_LEFT ).GetWeaponPrimaryClipCountMax() )
		
		//Fix for grapple not recharging after grappling server created props
		player.SetSuitGrapplePower(100)
	}
	
	return true
}

#if DEVELOPER
bool function ClientCommand_script( entity player, array<string> args )
{
	if( !IsValid( player ) )
		return true
	
	if( GetConVarInt( "sv_cheats" ) != 1 )
		return true

	string func = ""

	for ( int i = 0; i < args.len(); i++ )
	{
		func = (func + args[i])

		if(args[i] == "'" || ((i+1) < args.len() && args[i+1] == "'")) {
			// don't add spaces inside strings
		} else {
			func = (func + " ")
		}
	}
	func = StringReplace( func, "'", "\"" )

	try {
		compilestring( "return "+func+"" )()
	}
	catch( error ) {
		print("[ SCRIPT CMD ERROR ]:\n")
		print("entity: " + player + "\n")
		print("error:  " + error + "\n\n")
	}
	return true
}
#endif
