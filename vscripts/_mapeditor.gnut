untyped

global function MapEditor_Init

global function MapEditor_CreateProp
global function MapEditor_SpawnDoor
global function MapEditor_CreateTrigger
global function MapEditor_CreateBubbleShieldWithSettings
global function MapEditor_CreateRespawnableWeaponRack
global function MapEditor_CreateLinkedZipline
global function MapEditor_CreateLootBin
global function MapEditor_CreateJumpPad
global function MapEditor_CreateButton
global function MapEditor_CreateZipline
global function MapEditor_CreateTextInfoPanel
global function MapEditor_CreateFuncWindowHint
global function MapEditor_RemoveAllEnts
global function ReMapTeleportToMap

global function ReMapSetOrigin
global function ReMapSetAngles
global function ReMapSetBool
global function ReMapSetFloat
global function ReMapSetInt
global function ReMapSetVectorArray01
global function ReMapSetVectorArray02
global function ReMapSetAssetArray01

global function ReMapCreateZipline

global enum eMapEditorDoorType
{
    Single,
    Double,
    Vertical,
    Horizontal
}

global array<entity> MapEditorEnts;

void function MapEditor_Init()
{
    MapTriggers_Init()
}

void function MapTriggers_Init()
{
    switch (GetMapName())
    {
        case "mp_rr_aqueduct_night":
        case "mp_rr_aqueduct":
        {
            CreateWallTrigger( <425, -1590, -1689>, 1, 30000 )
            CreateWallTrigger( <732, -4456, 840>, 2 , 6000)
            CreateWallTrigger( <774, -6394, 2067>, 1 )
            break
        }
        case "mp_rr_arena_skygarden":
        {
            CreateWallTrigger( <0, -250, 3490>, 0, 10000 )
            CreateWallTrigger( <0, -250, 3650>, 1, 20000 )
            CreateWallTrigger( <0, -250, 1550>, 1, 40000 )
            break
        }
        case "mp_rr_arena_composite":
        {
            CreateWallTrigger( <5, 2587, -520>, 1, 30000)
            CreateWallTrigger( <5, 5379, 860> , 0 )
            CreateWallTrigger( <5, 5379, 1160> , 1 )
            break
        }
        case "mp_rr_ashs_redemption":
        {
            CreateWallTrigger( <-20857, 5702, -25746> , 0 )
            CreateWallTrigger( <-20857, 5702, -25246> , 1, 30000 )
            CreateWallTrigger( <-20857, 5702, -28500> , 1, 30000 )
            break
        }
        case "mp_rr_party_crasher":
        {
            CreateWallTrigger( <811, 911, 2434>, 0 , 30000 )
            CreateWallTrigger( <811, 911, -537>, 1 , 30000 )
            break
        }
        default:
            break
    }
}

entity function CreateWallTrigger( vector origin , int type = 0, float radius = 30000 , float Height = 2000, bool debugdraw = false)
{
    // Set up the trigger
    entity trigger = CreateEntity( "trigger_cylinder" )
    trigger.SetRadius( radius )
    trigger.SetAboveHeight( Height )
    trigger.SetBelowHeight( 50 )
    trigger.SetOrigin( origin )
    trigger.SetEnterCallback(  WallTriggerEnter )

    switch(type)
    {
        case 1: // kill zone
        trigger.SetScriptName("WallTrigger_Killzone")
        trigger.SetAboveHeight( 350 )
        break
        case 2: // out of bounds
        trigger.SetScriptName("WallTrigger_oob_timer")
        trigger.SetAboveHeight( 2350 )
        break
    }

    if (debugdraw) // draw trigger bounds if needed
    {
        DebugDrawCylinder( trigger.GetOrigin() , < -90, 0, 0 >, radius, trigger.GetAboveHeight(), 0, 165, 255, true, 9999.9 )
        DebugDrawCylinder( trigger.GetOrigin() , < -90, 0, 0 >, radius, -trigger.GetBelowHeight(), 255, 90, 0, true, 9999.9 )
    }

    // deploy the trigger
    DispatchSpawn( trigger )

    return trigger
}

void function WallTriggerEnter( entity trigger , entity ent )
{
    if ( IsValid(ent) && ent.IsPlayer() && ent.GetPhysics() != MOVETYPE_NOCLIP) // ensure the entity is valid
    {
        ent.Zipline_Stop()

        switch( trigger.GetScriptName() )
        {
            case "WallTrigger_Killzone":
                ent.TakeDamage(ent.GetMaxHealth() + 1, null, null, { damageSourceId=damagedef_suicide, scriptType=DF_BYPASS_SHIELD })
            break

            case "WallTrigger_oob_timer":
                EntityOutOfBounds( trigger, ent, null, null )
            break

            default:
                vector lookDir = ent.GetSmoothedVelocity()
                vector pushBackVel = lookDir * 2.5

                if( LengthSqr( lookDir ) >= 320000)
                    pushBackVel = lookDir / 1.5

                vector targetDir = ent.GetWorldSpaceCenter() - trigger.GetWorldSpaceCenter()
                if ( DotProduct( lookDir, targetDir ) < 0 )
                    pushBackVel = -pushBackVel

                ent.KnockBack( pushBackVel, 0.3 )
                return
            break
        }

        ent.DisableWeapon()


        StatusEffect_AddEndless( ent, eStatusEffect.hunt_mode_visuals, 100 )
        StatusEffect_AddEndless( ent, eStatusEffect.move_slow, 0.2 )

        thread function() : ( trigger, ent )
        {
            while( IsValid(ent) && trigger.IsTouching( ent ) )
                WaitFrame()

            if( IsValid(ent) )
            {
                EntityBackInBounds( trigger, ent, null, null )
                ent.EnableWeapon()

                StatusEffect_StopAllOfType( ent, eStatusEffect.hunt_mode_visuals)
                StatusEffect_StopAllOfType( ent, eStatusEffect.minimap_jammed)
                StatusEffect_StopAllOfType( ent, eStatusEffect.move_slow)
            }
        }()
    }
}

entity function MapEditor_CreateProp(asset a, vector pos, vector ang, bool mantle = false, float fade = 5000, int realm = -1, float float02 = 1, bool addToArray = false)
{
    entity e = CreatePropDynamic(a,pos,ang,SOLID_VPHYSICS,fade)
    e.kv.fadedist = fade
    e.kv.rendermode = 0
    e.kv.renderamt = 1
    e.kv.solid = 6
    e.kv.CollisionGroup = TRACE_COLLISION_GROUP_PLAYER

    if(mantle) e.AllowMantle()
    
    if (realm > -1) {
        e.RemoveFromAllRealms()
        e.AddToRealm(realm)
    }
    
    e.SetScriptName("editor_placed_prop")
    e.e.gameModeId = realm
    e.SetModelScale( float02 )

    if(addToArray)
        MapEditorEnts.append(e)
    
    return e
}

array < entity > function MapEditor_SpawnDoor( vector org, vector ang, int type, bool gold = false, bool spawnOpen = false, bool addToArray = false )
{
    array < entity > doorArray = []

    switch( type )
    {
        case eMapEditorDoorType.Single:
            entity door = CreateDoorEntity( "prop_door", $"mdl/door/canyonlands_door_single_02.rmdl", "", org, ang, gold )
            DispatchSpawn( door )

            if ( spawnOpen ) OpenCodeDoorAtSpawn( door )

            doorArray.append( door )
            break;

        case eMapEditorDoorType.Double:
            entity door = CreateDoorEntity( "prop_door", $"mdl/door/canyonlands_door_single_02.rmdl", "", org, ang, gold )
            door.SetOrigin( org + door.GetRightVector() * 60 )
            DispatchSpawn( door )

            entity oppositeDoor = CreateDoorEntity( "prop_door", $"mdl/door/canyonlands_door_single_02.rmdl", "", org, < -ang.x, ang.y + 180, -ang.z >, gold )
            oppositeDoor.SetOrigin( org + oppositeDoor.GetRightVector() * 60 )
            oppositeDoor.LinkToEnt( door )
            DispatchSpawn( oppositeDoor )

            if ( spawnOpen ) OpenCodeDoorAtSpawn( door )

            doorArray.extend( [ door, oppositeDoor ] )
            break;

        case eMapEditorDoorType.Vertical:
            entity door = CreateDoorEntity( "prop_dynamic", $"mdl/door/door_canyonlands_large_01_animated.rmdl", "survival_door_plain", org, ang, false )
            DispatchSpawn( door )

            if ( spawnOpen ) OpenPlainDoorAtSpawn( door )

            doorArray.append( door )
            break;

        case eMapEditorDoorType.Horizontal:
            entity door = CreateDoorEntity( "prop_dynamic", $"mdl/door/door_256x256x8_elevatorstyle02_animated.rmdl", "survival_door_plain", org, ang, false )
            DispatchSpawn( door )

            if ( spawnOpen ) OpenPlainDoorAtSpawn( door )

            doorArray.append( door )
        break;
    }

    if ( addToArray ) MapEditorEnts.extend( doorArray )

    return doorArray
}

entity function CreateDoorEntity( string type, asset model, string scriptName, vector origin, vector angles, bool gold = false )
{
    entity door = CreateEntity( type )
    door.SetOrigin( origin )
    door.SetAngles( angles )
    door.SetValueForModelKey( model )

    if( scriptName != "" )
    {
        door.SetScriptName( scriptName )
        door.kv.solid = 6
    }

    if( gold ) door.SetSkin( 1 )

    return door
}

void function OpenCodeDoorAtSpawn( entity door )
{
    entity fakeUser = CreateEntity( "prop_dynamic" )
    fakeUser.SetOrigin( door.GetOrigin() - door.GetForwardVector() * 100 )

    door.OpenDoor( fakeUser )

    fakeUser.Destroy()
}

void function OpenPlainDoorAtSpawn( entity door )
{
    PlayAnimNoWait( door, "open" )
    door.e.isOpen = true
    GradeFlagsSet( door, eGradeFlags.IS_OPEN )
    door.SetUsePrompts( "#SURVIVAL_CLOSE_DOOR", "#SURVIVAL_CLOSE_DOOR" )
}

entity function MapEditor_CreateTrigger( vector origin, vector angles, float radius, float totalheight, bool debugdraw = false, bool addToArray = false)
{
    // Set up the trigger
    entity trigger = CreateEntity( "trigger_cylinder" )
    trigger.SetRadius( radius )
    trigger.SetAboveHeight( totalheight )
    trigger.SetBelowHeight( totalheight )
    trigger.SetOrigin( origin )
    trigger.SetAngles( angles )

    if (debugdraw) // draw trigger bounds if needed
    {
        DebugDrawCylinder( trigger.GetOrigin() , < -90, 0, 0 >, radius, totalheight, 0, 165, 255, true, 9999.9 )
        DebugDrawCylinder( trigger.GetOrigin() , < -90, 0, 0 >, radius, -totalheight, 255, 90, 0, true, 9999.9 )
    }

    if(addToArray)
        MapEditorEnts.append(trigger)

    return trigger
}

entity function MapEditor_CreateBubbleShieldWithSettings( vector origin, vector angles, float float02, string color, asset collisionModel, bool addToArray = false )
{
    entity bubbleShield = CreateEntity( "prop_dynamic" )
    bubbleShield.SetValueForModelKey( collisionModel ) // TODO: fix this for apex
    bubbleShield.kv.solid = SOLID_VPHYSICS
    bubbleShield.kv.rendercolor = color
    bubbleShield.kv.contents = (int(bubbleShield.kv.contents) | CONTENTS_NOGRAPPLE)
    bubbleShield.SetOrigin( origin )
    bubbleShield.SetAngles( angles )
    bubbleShield.SetModelScale( float02 )
    // Blocks bullets, projectiles but not players and not AI
    bubbleShield.kv.CollisionGroup = TRACE_COLLISION_GROUP_BLOCK_WEAPONS
    DispatchSpawn( bubbleShield )

    EmitSoundOnEntity( bubbleShield, "Gibraltar_BubbleShield_Sustain" )

    if(addToArray)
        MapEditorEnts.append(bubbleShield)

    return bubbleShield
}

void function MapEditor_CreateRespawnableWeaponRack(vector pos, vector ang, string weaponName, float spawnTime, bool addToArray = false)
{
    entity rack = CreateWeaponRack(pos, ang, weaponName)
    thread OnPickupFromRackThread(GetWeaponFromRack(rack), weaponName, spawnTime)

    if(addToArray)
        MapEditorEnts.append(rack)
}

// When the weapon is grabbed from the rack -> respawn it
void function OnPickupFromRackThread(entity item, string ref, float spawnTime, bool addToArray = false)
{
    entity rack = item.GetParent()
    item.WaitSignal("OnItemPickup")

    wait spawnTime

    entity newWeapon = SpawnWeaponOnRack(rack, ref)
    StartParticleEffectInWorld( GetParticleSystemIndex( FIRINGRANGE_ITEM_RESPAWN_PARTICLE ), newWeapon.GetOrigin(), newWeapon.GetAngles() )
    thread OnPickupFromRackThread(newWeapon, ref, spawnTime)
}

entity function MapEditor_CreateLootBin( vector origin, vector angles, int skin = 0, bool addToArray = false )
{
    entity lootbin = CreateEntity( "prop_dynamic" )
    lootbin.SetScriptName( LOOT_BIN_SCRIPTNAME )
    lootbin.SetValueForModelKey( LOOT_BIN_MODEL )
    lootbin.SetOrigin( origin )
    lootbin.SetAngles( angles )
    lootbin.kv.solid = SOLID_VPHYSICS

    DispatchSpawn( lootbin )
    lootbin.SetSkin(skin)

    if(addToArray)
        MapEditorEnts.append(lootbin)

    return lootbin
}

entity function SetNodeRopeProperties( entity rope )
{
    rope.kv.MoveSpeed = 64
    rope.kv.Slack = 25
    rope.kv.Subdiv = "2"
    rope.kv.float03 = "2"
    rope.kv.Type = "0"
    rope.kv.TextureScale = "1"
    rope.kv.PositionInterpolator = 2
    rope.kv.RopeMaterial = "cable/zipline.vmt"
    rope.kv.Zipline = "1"
    rope.kv.ZiplineAutoDetachDistance = "150"
    rope.kv.ZiplineSagEnable = "0"
    rope.kv.ZiplineSagHeight = "50"
    rope.kv.fadedist = 50000

    return rope
}

void function MapEditor_CreateJumpPad( entity jumpPad, bool addToArray = false )
{
    JumpPad_CreatedCallback(jumpPad)

    if(addToArray)
        MapEditorEnts.append(jumpPad)
}

void function MapEditor_CreateButton( entity ent, void functionref( entity, entity, int ) callbackFunc, bool addToArray = false )
{
    AddCallback_OnUseEntity(ent, callbackFunc)

    if(addToArray)
        MapEditorEnts.append(ent)
}

void function MapEditor_CreateLinkedZipline( array<vector> nodes, bool addToArray = false )
{
    array<entity> ropes = [ SetNodeRopeProperties( CreateEntity( "move_rope" ) ) ]
    ropes[0].SetOrigin( nodes[0] )

    // create child ropes
    for(int i = 1; i < nodes.len(); i++) {
        vector nodepos = nodes[i]
        ropes.append( SetNodeRopeProperties( CreateEntity( "keyframe_rope" )  ) )
        
        ropes[i].SetOrigin( nodepos )
    }

    // link all nodes
    for(int i = 0; i < ropes.len(); i++) {
        if(i + 1 < ropes.len())
            ropes[i].LinkToEnt( ropes[i + 1]  )
    }

    foreach(entity rope in ropes) {
        DispatchSpawn( rope )

        if(addToArray)
            MapEditorEnts.append(rope)
    }
}

void function MapEditor_CreateZipline( vector startPos, vector endPos, bool addToArray = false )
{
    string startpointName = UniqueString( "rope_startpoint" )
    string endpointName = UniqueString( "rope_endpoint" )

    entity rope_start = CreateEntity( "move_rope" )
    SetTargetName( rope_start, startpointName )
    rope_start.kv.NextKey = endpointName
    rope_start.kv.MoveSpeed = 64
    rope_start.kv.Slack = 25
    rope_start.kv.Subdiv = "2"
    rope_start.kv.float03 = "2"
    rope_start.kv.Type = "0"
    rope_start.kv.TextureScale = "1"
    rope_start.kv.RopeMaterial = "cable/zipline.vmt"
    rope_start.kv.PositionInterpolator = 2
    rope_start.kv.Zipline = "1"
    rope_start.kv.ZiplineAutoDetachDistance = "150"
    rope_start.kv.ZiplineSagEnable = "0"
    rope_start.kv.ZiplineSagHeight = "50"
    rope_start.SetOrigin( startPos )

    entity rope_end = CreateEntity( "keyframe_rope" )
    SetTargetName( rope_end, endpointName )
    rope_end.kv.MoveSpeed = 64
    rope_end.kv.Slack = 25
    rope_end.kv.Subdiv = "2"
    rope_end.kv.float03 = "2"
    rope_end.kv.Type = "0"
    rope_end.kv.TextureScale = "1"
    rope_end.kv.RopeMaterial = "cable/zipline.vmt"
    rope_end.kv.PositionInterpolator = 2
    rope_end.kv.Zipline = "1"
    rope_end.kv.ZiplineAutoDetachDistance = "150"
    rope_end.kv.ZiplineSagEnable = "0"
    rope_end.kv.ZiplineSagHeight = "50"
    rope_end.SetOrigin( endPos )

    DispatchSpawn( rope_start )
    DispatchSpawn( rope_end )

    if(addToArray)
    {
        MapEditorEnts.append(rope_start)
        MapEditorEnts.append(rope_end)
    }
}

array< array > TextInfoPanelArray

void function MapEditor_CreateTextInfoPanel( string title, string text, vector origin, vector angles, bool showPin, float textScale )
{
    TextInfoPanelArray.append( [ title, text, origin, angles, showPin, textScale ] )

    AddCallback_OnClientConnected( MapEditor_CreateTextInfoPanel_Internal )
}

void function MapEditor_CreateTextInfoPanel_Internal( entity player )
{
    for ( int arrayLen = 0 ; arrayLen < TextInfoPanelArray.len() ; arrayLen++ )
    {
        string sendPanelText
        string title =  expect string( TextInfoPanelArray[arrayLen][0] )
        string text =   expect string( TextInfoPanelArray[arrayLen][1] )
        vector origin = expect vector( TextInfoPanelArray[arrayLen][2] )
        vector angles = expect vector( TextInfoPanelArray[arrayLen][3] )
        bool showPin =  expect bool( TextInfoPanelArray[arrayLen][4] )
        float textScale = expect float( TextInfoPanelArray[arrayLen][5] )
    
        for ( int textType = 0 ; textType < 2 ; textType++ )
        {
            sendPanelText = textType == 0 ? title : text

            for ( int i = 0; i < sendPanelText.len(); i++ )
            {
                Remote_CallFunction_NonReplay( player, "Dev_BuildTextInfoPanel", textType, sendPanelText[i] )
            }
        }

        Remote_CallFunction_NonReplay( player, "Dev_CreateTextInfoPanel", origin.x, origin.y, origin.z, angles.x, angles.y, angles.z, showPin, textScale )
    }
}

entity function MapEditor_CreateFuncWindowHint( vector origin, float halfheight, float halfwidth, vector right, bool addToArray = false )
{
    entity hint = CreateEntity( "func_window_hint" )
    hint.kv.origin = origin.x + " " + origin.y  + " " + origin.z
    hint.kv.halfheight = halfheight
    hint.kv.halfwidth  = halfwidth
    hint.kv.right      = right.x + " " + right.y  + " " + right.z
    DispatchSpawn( hint )

    if( addToArray )
    {
        MapEditorEnts.append( hint )
    }

    return hint
}

void function MapEditor_RemoveAllEnts()
{
    foreach(entity ent in MapEditorEnts)
        if ( IsValid( ent ) )
            ent.Destroy()

    MapEditorEnts.clear();
}



// Remote Functions from Unity
vector origin01 = < 0, 0, 0 >
vector origin02 = < 0, 0, 0 >
vector angles01 = < 0, 0, 0 >
vector angles02 = < 0, 0, 0 >
array< vector > arrayVec01 = []
array< vector > arrayVec02 = []

bool bool01 = true
bool bool02 = false
bool bool03 = false

float float01 = -1.0
float float02 = 1.0
float float03 = 2.0
float float04 = 1.0
float float05 = 1.0
float float06 = 150.0
float float07 = 50.0
float float08 = 32.0
float float09 = 60.0

int int01 = 0
int int02 = 1
int int03 = 1
int int04 = 0
int int05 = 0
int int06 = 0

array< asset > arrayAsset01 = []

void function ReMapSetOrigin( vector vec01, vector vec02 )
{
    origin01 = vec01
    origin02 = vec02
}

void function ReMapSetAngles( vector vec01, vector vec02 )
{
    angles01 = vec01
    angles02 = vec02
}

void function ReMapSetBool( array < bool > arr )
{
    if ( arr.len() >= 1 ) bool01 = arr[ 0 ]
    if ( arr.len() >= 2 ) bool02 = arr[ 1 ]
    if ( arr.len() >= 3 ) bool03 = arr[ 2 ]
}

void function ReMapSetFloat( array < float > arr )
{
    if ( arr.len() >= 1 ) float01 = arr[ 0 ]
    if ( arr.len() >= 2 ) float02 = arr[ 1 ]
    if ( arr.len() >= 3 ) float03 = arr[ 2 ]
    if ( arr.len() >= 4 ) float04 = arr[ 3 ]
    if ( arr.len() >= 5 ) float05 = arr[ 4 ]
    if ( arr.len() >= 6 ) float06 = arr[ 5 ]
    if ( arr.len() >= 7 ) float07 = arr[ 6 ]
    if ( arr.len() >= 8 ) float08 = arr[ 7 ]
    if ( arr.len() >= 9 ) float09 = arr[ 8 ]
}

void function ReMapSetInt( array < int > arr )
{
    if ( arr.len() >= 1 ) int01 = arr[ 0 ]
    if ( arr.len() >= 2 ) int02 = arr[ 1 ]
    if ( arr.len() >= 3 ) int03 = arr[ 2 ]
    if ( arr.len() >= 4 ) int04 = arr[ 3 ]
    if ( arr.len() >= 5 ) int05 = arr[ 4 ]
    if ( arr.len() >= 6 ) int06 = arr[ 5 ]
}

void function ReMapSetVectorArray01( array< vector > arr )
{
    arrayVec01 = arr
}

void function ReMapSetVectorArray02( array< vector > arr )
{
    arrayVec02 = arr
}

void function ReMapSetAssetArray01( array< asset > arr )
{
    arrayAsset01 = arr
}

void function ReMapCreateZipline()
{
    MapEditor_CreateZiplineFromUnity( origin01, angles01, origin02, angles02, bool01, float01, float02, float03, float04, float05, int01, int02, float06, float07, bool02, int03, bool03, int04, int05, arrayVec01, arrayVec02, arrayAsset01, float08, float09, int06, true )
}

void function ReMapTeleportToMap()
{
    int origin = arrayVec01.len()
    int angles = arrayVec02.len()

    if ( origin != angles ) return

    foreach ( player in GetPlayerArray() )
    {
        int i = RandomIntRange( 0, origin )

        if ( IsValid( player ) )
        {
            player.SetOrigin( arrayVec01[ i ] )
            player.SetAngles( arrayVec02[ i ] )
            player.SetVelocity( < 0, 0, 0 > )
        }
    }
}
