untyped

global function DropPod_Init

global function CreateDropPod
global function LaunchAnimDropPod
global function GetDropPodAnimDuration
global function CreateDropPodSmokeTrail

//const droppod_fireteam_collision = $"models/vehicle/droppod_fireteam/droppod_fireteam_collision.mdl"
global const DROPPOD_MODEL = $"mdl/vehicle/droppod_fireteam/droppod_fireteam.rmdl"
global const DP_COLL_MODEL = $"mdl/vehicle/droppod_loot/droppod_loot_animated.rmdl"

// r5 stuff
global const int AIR_DROP_BAD_PLACE_RADIUS = 1
const FAR_SPAWN_FX = $"P_ar_loot_drop_point_far"
global function AirdropItems
global function AirDropFireteam
global function BeaconDrop
global function CreateBeacondrop

struct
{
	bool                          lootBinsInfinite = false
	table<entity, array<entity> > lootBinsSpawnedLootMap
	table<entity, array<string> > dropPodsLootInside
    #if SERVER
    table<entity, entity>         dropPodsBeamTable
    #endif
	array<entity>                 lootBinList
	int                           numLootBins
} file

void function CreateBeacondrop( vector origin, vector angles, entity fxToStop = null, string animationName = "droppod_loot_drop", entity owner = null, string sourceWeaponClassName = "" )
{
	thread BeaconDrop( origin, angles, fxToStop, animationName, owner, sourceWeaponClassName )
}

void function BeaconDrop( vector origin, vector angles, entity fxToStop, string animationName, entity owner, string sourceWeaponClassName )
{
	entity BeaconPod = CreateMobileBeaconForVisualDrop( Vector( origin.x, origin.y, origin.z + 5000 ), angles, sourceWeaponClassName )
	BeaconPod.Hide()
	
    entity threatProxy = CreateMobileBeaconThreatIndicator(origin, angles)

	waitthread Flowstate_LaunchAnimMobileBeacon( BeaconPod, OriginToGround( origin ), angles, fxToStop, threatProxy)

	BeaconPod.Destroy()
	
	thread SpawnBeacon( owner, origin, angles )
}

var function SpawnBeacon( entity ownerPlayer, vector origin, vector angles )
{
	entity respawn = CreatePropDynamic_NoDispatchSpawn( MOBILE_RESPAWN_BEACON_MODEL, origin, angles, 6)
	respawn.SetOwner(ownerPlayer)
	SetTargetName(respawn, MOBILE_RESPAWN_BEACON_TARGETNAME)
	DispatchSpawn(respawn)	
	OnMobileRespawnChamberSpawned(respawn)
}

void function AirdropItems( vector origin, vector angles, array<string> contents, entity fxToStop, string animationName, entity owner, int skin, string sourceWeaponClassName )
{
	entity dropPod = CreateDropPod( origin, angles, sourceWeaponClassName )
	dropPod.SetSkin( skin )
    
    entity threatProxy = CreateDropPodThreatIndicator(origin, angles)
    thread DropPodBeamWaitForUse(dropPod, origin, angles)
	
    thread WaitForDropFX(dropPod, animationName, origin, angles)
	
	waitthread LaunchAnimDropPod( dropPod, animationName, OriginToGround( origin ), angles )
	    if(IsValid(threatProxy))
        threatProxy.Destroy()

	InitDropPod( dropPod )
    
    if(IsValid(fxToStop))
        fxToStop.Destroy()
	
	AddMultipleLootItemsToDropPod(dropPod, contents)

}

void function AirDropFireteam( vector origin, vector angles, string animationName, int skin, string sourceWeaponClassName, entity player )
{
	entity dropPod = CreateDropPod( origin, angles, sourceWeaponClassName )
	dropPod.SetSkin( skin )
    
    entity threatProxy = CreateDropPodThreatIndicator(origin, angles)

	waitthread LaunchAnimDropPod2( dropPod, animationName, OriginToGround( origin ), angles, player )
	
	//thread WaitForDropFX(dropPod, animationName, OriginToGround( origin ), angles) 

    if(IsValid(threatProxy))
        threatProxy.Destroy()

	//InitDropPod( dropPod )
	wait 5
	if(IsValidPlayer(player)){
	player.p.isPlayerSpawningInDroppod = false
	}
}

void function WaitForDropFX(entity dropPod, string animationName, vector origin, vector angles)
{ 
    float scaledTime = dropPod.GetSequenceDuration(animationName) * 0.95
	wait scaledTime
    DropPodOnImpactFXAndShake(dropPod, origin, angles)
}

void function SpawnLootInDropPod( entity dropPod, string ref, int lootI, int lootCount )
{
	Point p = GetDropPodSpawnLocation( dropPod, lootI, lootCount )

	LootData data = SURVIVAL_Loot_GetLootDataByRef( ref )
    string attachment
    string pos
    switch(data.lootType)
    {
        case eLootType.MAINWEAPON:
            pos = "TOP"
            break
        default:
            pos = "MID"
            break
    }

    switch(lootI)
    {
        case 0:
            attachment = "LOOT_L_%s"
            break
        case 1:
            attachment = "LOOT_C_%s"
            break
        case 2:
            attachment = "LOOT_R_%s"
            break
        default:
            attachment = "LOOT_C_%s"
            break
    }
    attachment = format(attachment, pos)
    int attachmentIndex = dropPod.LookupAttachment( attachment )
  
    vector angles = dropPod.GetAttachmentAngles( attachmentIndex )
    if(data.lootType == eLootType.ATTACHMENT || data.lootType == eLootType.BACKPACK || data.lootType == eLootType.INCAPSHIELD)
        angles = angles + <90, 0, 0>
    
    entity loot = SpawnGenericLoot( ref, dropPod.GetAttachmentOrigin( attachmentIndex ), angles, data.countPerDrop )
    
	loot.RemoveFromAllRealms()
	loot.AddToOtherEntitysRealms( dropPod )
	SetItemSpawnSource( loot, eSpawnSource.DROPPOD, dropPod )
    
    switch(data.lootType)
    {
        //case eLootType.ATTACHMENT:
        //case eLootType.BACKPACK:
        case eLootType.HEALTH:
            loot.SetParent(dropPod, attachment, false)
        default:
            loot.SetParent(dropPod, attachment, true)
    }
    
	file.lootBinsSpawnedLootMap[dropPod].append( loot )
}

#if SERVER
void function AddMultipleLootItemsToDropPod( entity dropPod, array<string> refs )
{
	int numRefs = refs.len()
	for ( int i; i < numRefs; i++ )
		AddLootTodropPod( dropPod, SURVIVAL_GetWeightedItemFromGroup(refs[ i ]) )
}

void function AddLootTodropPod( entity dropPod, string ref )
{
	file.dropPodsLootInside[ dropPod ].append( ref )
}

array<string> function GetdropPodContents( entity dropPod )
{
	for ( int i = file.dropPodsLootInside[ dropPod ].len() - 1; i >= 0; i-- )
	{
		if ( file.dropPodsLootInside[ dropPod ][i] == "blank" )
			file.dropPodsLootInside[ dropPod ].remove( i )
	}

	return file.dropPodsLootInside[ dropPod ]
}
#endif

void function InitDropPod( entity dropPod )
{

	var dataTable = GetDataTable( $"datatable/survival_loot.rpak" )
	int numRows = GetDatatableRowCount( dataTable )

	dropPod.e.isOpen = false
	dropPod.e.isBusy = false
	dropPod.e.hasBeenOpened = false
	dropPod.AllowMantle()
	dropPod.SetForceVisibleInPhaseShift( true )
	dropPod.SetUsable()
	dropPod.SetFadeDistance( 100000 )
	dropPod.AddUsableValue( USABLE_CUSTOM_HINTS | USABLE_BY_OWNER | USABLE_BY_PILOTS | USABLE_BY_ENEMIES )
	//dropPod.AddUsableValue( USABLE_BY_OWNER | USABLE_BY_PILOTS | USABLE_BY_ENEMIES )
	dropPod.SetUsablePriority( USABLE_PRIORITY_LOW )
    dropPod.SetUsePrompts( "#SURVIVAL_DROPPOD_USE", "#SURVIVAL_DROPPOD_USE" )
	AddCallback_OnUseEntity( dropPod, OnDropPodUse )
	file.lootBinsSpawnedLootMap[dropPod] <- []
	file.dropPodsLootInside[dropPod] <- []
	file.numLootBins++
	//float waitTime = file.numLootBins / NUM_LOOT_BIN_SOUND_INITS_PER_SEC
	file.lootBinList.append( dropPod )
    
	SetCallback_CanUseEntityCallback( dropPod, DropPod_CanUse )

	// if ( SURVIVAL_DEBUG_LOOT_BINS )
	//{
	// 	DebugDrawLine( dropPod.GetOrigin(), dropPod.GetOrigin() + <90, 90, 2000>, 255, 255, 255, true, 100.0 )
	//}
}

#if CLIENT
void function DropPodThreatIndicator(entity dropPod)
{
    entity player = GetLocalViewPlayer()
    ShowGrenadeArrow( player, dropPod, 350, 0.0 )
}
#endif
void function DropPodBeamWaitForUse(entity dropPod, vector origin, vector angles)
{
	dropPod.EndSignal( "OnDestroy" )	
	dropPod.EndSignal( "OnUse" )
	
    entity trailFXHandle = StartParticleEffectInWorld_ReturnEntity(GetParticleSystemIndex( FAR_SPAWN_FX ), origin, angles)
    
    OnThreadEnd(
		function() : ( trailFXHandle )
		{
			if ( IsValid( trailFXHandle ) )
				EffectStop( trailFXHandle )
		}    
	)
    
    WaitForever()
    
}

void function OnDropPodUse( entity dropPod, entity player, int useInputFlags )
{
	if ( (useInputFlags & USE_INPUT_DEFAULT) == 0 )
		return
        
    dropPod.Signal("OnUse")
    dropPod.SetUsePrompts("","")
	thread HandleDropPodUse( dropPod, player )
}
void function HandleDropPodUse( entity dropPod, entity player )
{
	dropPod.EndSignal( "OnDestroy" )

	if ( dropPod.Anim_IsActive() )
		return

	EmitSoundOnEntity( dropPod, SOUND_LOOT_BIN_OPEN )

	if ( !DropPod_IsOpen( dropPod ) )
		thread DropPod_PlayOpenSequence( dropPod, player )
	if ( IsValid( player ) )
		TrackingVision_CreatePOI( eTrackingVisionNetworkedPOITypes.PLAYER_LOOTBIN_USED, dropPod, dropPod.GetWorldSpaceCenter(), player.GetTeam(), player )
}

void function DropPod_PlayOpenSequence( entity dropPod, entity player )
{
	dropPod.EndSignal( "OnDestroy" )

	// CleanUpPermanentsParentedToLootbin( lootbin )

	GradeFlagsSet( dropPod, eGradeFlags.IS_BUSY )

	if ( !dropPod.e.hasBeenOpened )
	{
		dropPod.e.hasBeenOpened = true

		StopSoundOnEntity( dropPod, SOUND_LOOT_BIN_IDLE )

		int lootIndex             = 0

		// todo: use this instead of setting loot when droppod lands
		array<string> lootToSpawn = GetdropPodContents( dropPod )

		foreach ( ref in lootToSpawn )
		{
		 	SpawnLootInDropPod( dropPod, ref, lootIndex, lootToSpawn.len() )
		 	lootIndex++
		}

		lootToSpawn.clear()
	}

	GradeFlagsSet( dropPod, eGradeFlags.IS_OPEN )

	entity dropPodParent = dropPod.GetParent()
	if ( IsValid( dropPodParent ) )
		waitthread PlayAnim( dropPod, "droppod_loot_opening", dropPodParent, "ref" )
	else
		waitthread PlayAnim( dropPod, "droppod_loot_opening" )

	GradeFlagsClear( dropPod, eGradeFlags.IS_BUSY )
}

bool function DropPod_IsOpen( entity dropPod )
{
	if ( GradeFlagsHas( dropPod, eGradeFlags.IS_OPEN ) )
		return true
	return false
}

bool function DropPod_CanUse( entity player, entity dropPod )
{
	if ( player.GetWeaponDisableFlags() == WEAPON_DISABLE_FLAGS_ALL )
		return false

	if ( Bleedout_IsBleedingOut( player ) )
		return false

	// if ( LootBin_IsBusy( dropPod ) )
	// 	return false

	if ( DropPod_IsOpen( dropPod ) )
		return false

	return true
}



Point function GetDropPodSpawnLocation( entity dropPod, int lootI, int lootCount )
{
	float y    = Graph( lootI + 1, 0, lootCount + 1, -51, 51 )
	//vector pos = dropPod.GetOrigin() + RotateVector( <14, y, 33>, dropPod.GetAngles() )
	vector pos = dropPod.GetOrigin() + RotateVector( <30, y, 60>, dropPod.GetAngles() )
	vector ang = AnglesCompose( dropPod.GetAngles(), <90, 0, 0> )

	Point p
	p.origin = pos
	p.angles = ang
	return p
}

function DropPod_Init()
{
    
	PrecacheModel( DROPPOD_MODEL )

	RegisterSignal( "OnLaunch" )
	RegisterSignal( "OnImpact" )
    RegisterSignal( "OnUse" )
    
	PrecacheModel( DP_COLL_MODEL )

	PrecacheEffect( $"droppod_trail" )
	PrecacheEffect( $"droppod_impact" )
    PrecacheParticleSystem( FAR_SPAWN_FX )
}


function GetDropPodAnimDuration()
{
	// hack seems bad to spawn an ent to get this info
	entity dropPod = CreateDropPod()

	local animDuration = dropPod.GetSequenceDuration( "pod_testpath" )
	dropPod.Destroy()

	return animDuration
}

void function Flowstate_LaunchAnimMobileBeacon( entity mobileBeacon, vector targetOrigin, vector targetAngles, entity fxToStop, entity threatProxy)
{
	mobileBeacon.EndSignal( "OnDestroy" )
	mobileBeacon.EnableRenderAlways()

	mobileBeacon.Anim_PlayOnly( $"mobile_respawn_beacon_closed" )
	
	wait 4
	
	if( !IsValid( mobileBeacon) )
		return
		
	EmitSoundOnEntity( mobileBeacon, "spectre_drop_pod" ) // ?? find a better sound
	
	wait 2
	
	if( !IsValid( mobileBeacon) )
		return
		
	StartParticleEffectInWorld( GetParticleSystemIndex( $"P_phase_shift_out" ), mobileBeacon.GetOrigin(), mobileBeacon.GetAngles() )
	
	mobileBeacon.Show()

	array<entity> sideEffects
	
	for( int i = 1; i <= 4; i++ )
	{
		entity fx = StartParticleEffectOnEntity_ReturnEntity(mobileBeacon, GetParticleSystemIndex( $"P_fire_jet_med_nomdl" ), FX_PATTACH_ABSORIGIN_FOLLOW, mobileBeacon.LookupAttachment( "THRUSTER_" + i ) )
		fx.SetParent( mobileBeacon )
		fx.SetAngles( Vector( 90,0,0 ) )
		sideEffects.append( fx )
	}
	
	thread Flowstate_JetWashFX( mobileBeacon ) 
	
	mobileBeacon.NonPhysicsMoveTo( targetOrigin + Vector (0,0,25) , 3, 3, 0 )
	
	wait 2
	
	if( !IsValid( mobileBeacon) )
		return
	
	wait 1
	
	if( !IsValid( mobileBeacon) )
		return

	foreach( sideFx in sideEffects )
	{
		if(IsValid(sideFx))
			sideFx.Destroy()
	}
	
	mobileBeacon.Anim_PlayOnly( "mobile_respawn_beacon_land" )
	mobileBeacon.Anim_SetPlaybackRate( 1 )
	mobileBeacon.NonPhysicsMoveTo( targetOrigin, mobileBeacon.GetSequenceDuration( "mobile_respawn_beacon_land" ) / 2, mobileBeacon.GetSequenceDuration( "mobile_respawn_beacon_land" ) / 2, 0 )
	
	wait (mobileBeacon.GetSequenceDuration( "mobile_respawn_beacon_land" ) / 2) - 0.1
	
    if( IsValid(fxToStop) )
        fxToStop.Destroy()
	
	Signal( mobileBeacon, "ForceEndJetWashFX" )
	
	if( !IsValid( mobileBeacon) )
		return
	
	if(IsValid(threatProxy))
		threatProxy.Destroy()
	
	EmitSoundOnEntity( mobileBeacon, "Survival_LootPod_Impact" )
	
	MobileBeaconOnImpactFXAndShake( mobileBeacon, targetOrigin, targetAngles)
	
	wait (mobileBeacon.GetSequenceDuration( "mobile_respawn_beacon_land" ) / 2) + 0.1
	
	if( !IsValid( mobileBeacon) )
		return
	
	mobileBeacon.Anim_PlayOnly( "mobile_respawn_beacon_idle" )
}

void function Flowstate_JetWashFX(entity evac)
{
	EndSignal( evac, "ForceEndJetWashFX" )
	
	while(IsValid(evac))
	{
		vector start = evac.GetOrigin() - < 0, 0, 10 >
		vector end = start - < 0, 0, 500 >
		TraceResults downTraceResult = TraceLine( start, end, [evac], TRACE_MASK_SOLID, TRACE_COLLISION_GROUP_NONE )
		if ( downTraceResult.fraction < 1.0 )
		{
			PlayImpactFXTable( downTraceResult.endPos, evac, "human_land_jetwash" )
		}
		
		wait 0.5
	}
}

function LaunchAnimDropPod( entity dropPod, string anim, vector targetOrigin, vector targetAngles )
{
	dropPod.EndSignal( "OnDestroy" )
	dropPod.EnableRenderAlways()

	dropPod.s.launchAnim <- anim

	int team = dropPod.GetTeam()

	entity ref = CreateOwnedScriptMover( dropPod )
    ref.SetOrigin( targetOrigin )
    ref.SetAngles( targetAngles )

	OnThreadEnd(
		function () : ( dropPod, ref )
		{
			if ( IsValid( dropPod ) )
			{
				dropPod.ClearParent()
			}

			if ( IsValid( ref ) )
				ref.Kill_Deprecated_UseDestroyInstead()
		}
	)

	local e = {}
	e.targetOrigin <- targetOrigin
	e.targetAngles <- targetAngles

	EmitSoundOnEntity( dropPod, "spectre_drop_pod" )

	FirstPersonSequenceStruct sequence
	sequence.thirdPersonAnim 		= anim

	sequence.blendTime 			= 0.0
	sequence.attachment 		= "ref"
	sequence.useAnimatedRefAttachment		= true
	//DrawArrow( ref.GetOrigin(), ref.GetAngles(), 5, 100 )
	waitthread FirstPersonSequence( sequence, dropPod, ref )
	dropPod.DisableRenderAlways()
	WaitFrame()
}

function LaunchAnimDropPod2( entity dropPod, string anim, vector targetOrigin, vector targetAngles, entity player )
{
	dropPod.EndSignal( "OnDestroy" )
	dropPod.s.launchAnim <- anim
	int team = dropPod.GetTeam()
	entity ref = CreateOwnedScriptMover( dropPod )
	dropPod.SetParent(ref)
    ref.SetAngles( targetAngles )
	if(IsValid(player)){
	player.SetParent(dropPod)
	player.SetOrigin(dropPod.GetOrigin())
	//ScreenFadeFromBlack(player, 3, 3)
	EmitSoundOnEntity( dropPod, "spectre_drop_pod" )}
	ref.Hide()
	WaitFrame()
	ref.Show()
	thread __WarpInDropPodEffectShared( dropPod.GetOrigin(), <0,0,90>, "droppod_warpin", 0.0 )
	ref.MoveTo( targetOrigin, 2, 0, 0 )

	OnThreadEnd(
		function () : ( dropPod, player, ref )
		{
			if(IsValid(player)) player.ClearParent()
			if(IsValid(dropPod))
			{
				dropPod.ClearParent()	
				dropPod.Destroy()
			}
			if(IsValid(ref)) ref.Destroy()
		}
	)

	local e = {}
	e.targetOrigin <- targetOrigin
	e.targetAngles <- targetAngles

	FirstPersonSequenceStruct sequence
	sequence.thirdPersonAnim 		= "Aim_body"

	sequence.blendTime 			= 0.0
	sequence.attachment 		= "ref"
	sequence.useAnimatedRefAttachment		= true

	wait 2
	thread __WarpInDropPodEffectShared( dropPod.GetOrigin() + <0,0,100>, <90,0,0>, "droppod_warpin", 0.0 )
	wait 1
}

function CheckPlayersIntersectingPod( pod, targetOrigin )
{
	array<entity> playerList = GetPlayerArray()

	// Multiplying the bounds by 1.42 to ensure this encloses the droppod when it's rotated 45 degrees
	local mins = pod.GetBoundingMins() * 1.42 + targetOrigin
	local maxs = pod.GetBoundingMaxs() * 1.42 + targetOrigin
	local safeRadiusSqr = 192 * 192

	foreach ( player in playerList )
	{
		if(!IsValid(player)) continue
		
		local playerOrigin = player.GetOrigin()
		if ( DistanceSqr( targetOrigin, playerOrigin ) > safeRadiusSqr )
        {
			continue
        }

		local playerMins = player.GetBoundingMins() + playerOrigin
		local playerMaxs = player.GetBoundingMaxs() + playerOrigin
        
		if ( DistanceSqr( targetOrigin, playerOrigin ) < (safeRadiusSqr / 8) && IsAlive(player))
		{   
            vector dif = Normalize( player.GetOrigin() - targetOrigin )
            dif *= 300
            dif.z = 0
            player.SetVelocity( dif )
            return true
       }
	}

	return false
}

entity function CreateDropPodThreatIndicator(vector origin, vector angles)
{
    entity prop_dynamic = CreateEntity( "prop_dynamic" )
    prop_dynamic.SetValueForModelKey( $"mdl/dev/empty_model.rmdl" )
    
    SetTargetName(prop_dynamic, CARE_PACKAGE_PROXY)
	prop_dynamic.SetOrigin( origin )
	prop_dynamic.SetAngles( angles )

	DispatchSpawn( prop_dynamic )
    EmitSoundOnEntity( prop_dynamic, "Survival_LootPod_Beacon_Marker" )
    return prop_dynamic 
}

entity function CreateMobileBeaconThreatIndicator(vector origin, vector angles)
{
    entity prop_dynamic = CreateEntity( "prop_dynamic" )
    prop_dynamic.SetValueForModelKey( $"mdl/dev/empty_model.rmdl" )
    
    SetTargetName(prop_dynamic, CARE_PACKAGE_PROXY)
	prop_dynamic.SetOrigin( origin )
	prop_dynamic.SetAngles( angles )

	DispatchSpawn( prop_dynamic )
	EmitSoundOnEntity( prop_dynamic, "Survival_LootPod_Beacon_Incoming" )
    return prop_dynamic 
}

entity function CreateDropPod( vector ornull origin = null, vector ornull angles = null, string sourceWeaponClassName = "" )
{
	entity prop_dynamic = CreateEntity( "prop_dynamic" )

	if( sourceWeaponClassName == "mp_ability_care_package" )
	{
		prop_dynamic.SetValueForModelKey( CARE_PACKAGE_AIRDROP_MODEL )
        SetTargetName(prop_dynamic, CARE_PACKAGE_LIFELINE_TARGETNAME)
	}
	else {
		prop_dynamic.SetValueForModelKey( CARE_PACKAGE_AIRDROP_MODEL )
        SetTargetName(prop_dynamic, CARE_PACKAGE_TARGETNAME)
	}

	//prop_dynamic.SetValueForModelKey( CARE_PACKAGE_AIRDROP_MODEL )

	prop_dynamic.kv.contents = int( prop_dynamic.kv.contents ) & ~CONTENTS_TITANCLIP
	prop_dynamic.kv.fadedist = -1
	prop_dynamic.kv.renderamt = 255
	prop_dynamic.kv.rendermode = 0
	prop_dynamic.kv.rendercolor = "255 255 255"
	prop_dynamic.kv.solid = 6 // 0 = no collision, 2 = bounding box, 6 = use vPhysics, 8 = hitboxes only
	if ( origin )
	{
		prop_dynamic.SetOrigin( expect vector( origin ) )
		if ( angles )
			prop_dynamic.SetAngles( expect vector( angles ) )
	}
	DispatchSpawn( prop_dynamic )

	return prop_dynamic
}

entity function CreateMobileBeaconForVisualDrop( vector ornull origin = null, vector ornull angles = null, string sourceWeaponClassName = "" )
{
	entity prop_dynamic = CreateEntity( "script_mover" )
	prop_dynamic.kv.SpawnAsPhysicsMover = 0
	prop_dynamic.kv.contents = int( prop_dynamic.kv.contents ) & ~CONTENTS_TITANCLIP
	prop_dynamic.kv.fadedist = -1
	prop_dynamic.kv.renderamt = 255
	prop_dynamic.kv.rendermode = 0
	prop_dynamic.kv.rendercolor = "255 255 255"
	prop_dynamic.kv.solid = 0 // 0 = no collision, 2 = bounding box, 6 = use vPhysics, 8 = hitboxes only
	prop_dynamic.SetValueForModelKey( MOBILE_RESPAWN_BEACON_MODEL )
	
	if ( origin )
	{
		prop_dynamic.SetOrigin( expect vector( origin ) )
		if ( angles )
			prop_dynamic.SetAngles( expect vector( angles ) )
	}
	DispatchSpawn( prop_dynamic )

	return prop_dynamic
}

void function PushPlayerAndCreateDropPodCollision( entity pod, vector targetOrigin )
{
	pod.EndSignal( "OnDestroy" )

	entity point_push = CreateEntity( "point_push" )
	point_push.kv.spawnflags = 2
	point_push.kv.enabled = 1
	point_push.kv.magnitude = 840.0 * 0.75 //Compensate for reduced player gravity to match R1
	point_push.kv.radius = 192.0
	point_push.kv.solid = SOLID_VPHYSICS
	point_push.SetOrigin( targetOrigin + Vector( 0.0, 0.0, 10.0 ) )
	DispatchSpawn( point_push )

	OnThreadEnd(
		function() : ( point_push )
		{
			point_push.Fire( "Kill", "", 0.0 )
		}
	)

	while ( IsValid(pod) && CheckPlayersIntersectingPod( pod, targetOrigin ) )
		WaitFrame()
	
	if(IsValid(pod))
	pod.Solid()
}

void function PushPlayerAndCreateMobileBeaconCollision( entity pod, vector targetOrigin )
{
	pod.EndSignal( "OnDestroy" )

	entity point_push = CreateEntity( "point_push" )
	point_push.kv.spawnflags = 2
	point_push.kv.enabled = 1
	point_push.kv.magnitude = 840.0 * 0.75 //Compensate for reduced player gravity to match R1
	point_push.kv.radius = 128.0
	point_push.kv.solid = SOLID_VPHYSICS
	point_push.SetOrigin( targetOrigin + Vector( 0.0, 0.0, 10.0 ) )
	DispatchSpawn( point_push )

	OnThreadEnd(
		function() : ( point_push )
		{
			point_push.Fire( "Kill", "", 0.0 )
		}
	)

	while ( IsValid(pod) && CheckPlayersIntersectingPod( pod, targetOrigin ) )
		WaitFrame()
	
	if(IsValid(pod))
	pod.Solid()
}

function DropPodOnImpactFX( droppod, origin )
{
	PlayImpactFXTable( expect vector(origin), expect entity( droppod ), HOTDROP_IMPACT_FX_TABLE )
}

void function DropPodOnImpactFXAndShake( entity droppod, vector origin, vector angles )
{
	DropPodOnImpactFX(droppod, origin)
	CreateShake( origin, 7, 0.15, 1.75, 768 )

	thread PushPlayerAndCreateDropPodCollision( droppod, origin )
}

void function MobileBeaconOnImpactFXAndShake( entity mobileBeacon, vector origin, vector angles )
{
	DropPodOnImpactFX( mobileBeacon, origin)
	CreateShake( origin, 7, 0.15, 1.75, 300 )

	thread PushPlayerAndCreateMobileBeaconCollision( mobileBeacon, origin )
}

function CreateDropPodSmokeTrail( pod )
{
	entity smokeTrail = CreateEntity( "info_particle_system" )
	smokeTrail.SetValueForEffectNameKey( $"droppod_trail" )
	smokeTrail.kv.start_active = 0
	DispatchSpawn( smokeTrail )

	smokeTrail.SetOrigin( pod.GetOrigin() + Vector( 0, 0, 152 ) )
	smokeTrail.SetParent( pod )

	return smokeTrail
}

