untyped

//********************************************************************************************
//	_cl_mapspawn.nut
//	Called on newgame or transitions, BEFORE entities have been created and initialized
//********************************************************************************************

global const float COCKPIT_RUI_RADIUS = 350
global const float COCKPIT_RUI_SUBDIV = 3.5

global function ClientCodeCallback_MapSpawn
global function ClientCodeCallback_RunClientConnectScripts
global function ClientCodeCallback_FullUpdate
global function Init_PlayerScripts
global function CodeCallback_EntityVarChanged
global function ServerCallback_ClientInitComplete
global function ClientCodeCallback_OnDropShipCinematicEventStateChanged
global function ClientCodeCallback_OnDetenteEnded
global function ClientCodeCallback_OnResolutionChanged
global function PerfInitLabels
global function GetCockpitRuiHeight

global function GetVirtualScreenSize
global function GetCurrentVirtualScreenSize
global function GetScaledVirtualScreenSize
global function UpdateFullscreenTopology
global function GetNearestAspectRatio

global function CreateFullscreenTopology

global function CircularHudEnabled
global function GetHudDrawGroup
global function FS_CreateCameraTest
global function CL_CreateWorldVideo
global function BuildTopologyCreateData

global var Hud = null

global bool TITAN_CORE_ENABLED = true


global function FirstPersonFinishersShowcase
global function FinisherTestIdk

global struct TopologyCreateData
{
	vector org
	vector right
	vector down
}

UISize function GetVirtualScreenSize( int width, int height )
{
	UISize virtualScreenSize
	float aspectRatio = width / float( height )
	virtualScreenSize.width = aspectRatio < ASPECT_RATIO_16_BY_9 ? 1920 : int( 1080 * aspectRatio )
	virtualScreenSize.height = aspectRatio < ASPECT_RATIO_16_BY_9 ? int( 1920 / aspectRatio ) : 1080

	return virtualScreenSize
}


float function GetNearestAspectRatio( int width, int height )
{
	float aspectRatio = width / float( height )

	if ( fabs( ASPECT_RATIO_16_BY_10 - aspectRatio ) < 0.1 )
		return aspectRatio
	else if ( fabs( ASPECT_RATIO_16_BY_9 - aspectRatio ) < 0.1 )
		return aspectRatio
	else if ( fabs( ASPECT_RATIO_21_BY_9 - aspectRatio ) < 0.1 )
		return aspectRatio // since 21:9 could be a few different resolutions, lets use the one that we passed in since it will perfectly match the screen
	else if ( fabs( (16.0 * 3 / 9.0) - aspectRatio ) < 0.1 )
		return ASPECT_RATIO_16_BY_9
	else if ( fabs( (16.0 * 3 / 10.0) - aspectRatio ) < 0.1 )
		return ASPECT_RATIO_16_BY_10

	return aspectRatio
}


UISize function GetCurrentVirtualScreenSize( bool isHud )
{
	UISize screenSize = GetScreenSize()

	// Clamp the HUD elements to a max 21:9 screen, for 3x monitor setups
	if ( isHud )
	{
		float clampedAspectRatio = GetNearestAspectRatio( screenSize.width, screenSize.height )//GraphCapped( 1.0, 0.0, 1.0, ASPECT_RATIO_16_BY_9, ASPECT_RATIO_21_BY_9 )
		float aspectRatio        = screenSize.width / float( screenSize.height )
		if ( aspectRatio != clampedAspectRatio )
			screenSize.width = int( screenSize.height * clampedAspectRatio )
	}

	return GetVirtualScreenSize( screenSize.width, screenSize.height )
}


UISize function GetScaledVirtualScreenSize( UISize virtualScreenSize, UISize screenSize )
{
	float scale = screenSize.height / float( virtualScreenSize.height )
	UISize scaledSize
	scaledSize.width = int( virtualScreenSize.width * scale )
	scaledSize.height = int( virtualScreenSize.height * scale )

	return scaledSize
}


void function ClientCodeCallback_MapSpawn()
{
	LevelVarInit()
	DynamicLight_Init()

	Hud = getroottable().Hud

	level.scoreLimit <- {}
	level.scoreLimit[TEAM_IMC] <- GetScoreLimit_FromPlaylist()
	level.scoreLimit[TEAM_MILITIA] <- GetScoreLimit_FromPlaylist()

	level.clientVars <- {}

	level.onPlayerLifeStateChanged <- []

	level.clientScriptInitialized <- false

	RegisterSignal( "forever" )
	RegisterSignal( "UpdatePlayerStatusCounts" )
	
	//main menu cameras thread end signal
	RegisterSignal("ChallengeStartRemoveCameras")
	
	FlagInit( "ClientInitComplete" )
	FlagInit( "EntitiesDidLoad" )

	PrecacheResFiles()

	#if DEVELOPER
		ClModelViewInit()
	#endif

	CreateHUDRuiTopologies()

	SV_CL_Shared_Init()
}

float function GetCockpitRuiHeight()
{
	UISize screenSize = GetScreenSize()

	return COCKPIT_RUI_WIDTH / (screenSize.width / float( screenSize.height ))
}


void function PrecacheResFiles()
{
	if ( IsLobby() )
		return

	PrecacheRes( "vgui_icon" )
	PrecacheRes( "vgui_binding" )
	PrecacheRes( "vgui_jump_quest" )
	PrecacheRes( "vgui_titan_ammo" )
	PrecacheRes( "vgui_xpbar" )
	PrecacheRes( "vgui_titan_threat" )
	PrecacheRes( "vgui_titan_vdu" )
	PrecacheRes( "vgui_fullscreen_titan" )
	PrecacheRes( "vgui_fullscreen_pilot" )
	PrecacheRes( "vgui_pilot_launcher_screen" )
	PrecacheRes( "vgui_titan_emp" )
	PrecacheRes( "vgui_enemy_announce" )
	PrecacheRes( "Coop_TeamScoreEventNotification" )
	PrecacheRes( "control_panel_generic_screen" )
	PrecacheRes( "flowstate_health_bar" )
	PrecacheRes( "flowstate_inworld_test" )

	PrecacheRes( "vgui_callsign_menu" )
}


void function ClientCodeCallback_OnDetenteEnded()
{
}


bool function CircularHudEnabled()
{
	return GetCurrentPlaylistVarBool( "circular_hud", false )
}

int function GetHudDrawGroup( int ifNotCircular = RUI_DRAW_HUD )
{
	return CircularHudEnabled() ? RUI_DRAW_COCKPIT : ifNotCircular
}


TopologyCreateData function BuildTopologyCreateData( bool isHud, bool isCircular = false )
{
	UISize screenSize              = GetScreenSize()
	UISize virtualScreenSize       = GetCurrentVirtualScreenSize( isHud )
	UISize scaledVirtualScreenSize = GetScaledVirtualScreenSize( virtualScreenSize, screenSize )
	float xOffset                  = ((screenSize.width - scaledVirtualScreenSize.width) / 2.0)

	bool useTemp1610 = screenSize.width / screenSize.height <= 1.6
	vector cockpitOffset = useTemp1610 ? COCKPIT_RUI_OFFSET_1610_TEMP : COCKPIT_RUI_OFFSET

	TopologyCreateData data
	{
		data.org = isCircular ? cockpitOffset : <xOffset, 0, 0>
		data.right = isCircular ? <0, -1, 0> : <float( scaledVirtualScreenSize.width ), 0, 0>
		data.down = isCircular ? <0, 0, -1> : <0, float( scaledVirtualScreenSize.height ), 0>
	}
	return data
}


var function CreateFullscreenTopology( bool isHud, bool canBeCircular = false )
{
	bool isCircular = canBeCircular && CircularHudEnabled()
	TopologyCreateData tcd = BuildTopologyCreateData( isHud, isCircular )
	var result             = isCircular ? RuiTopology_CreateSphere( tcd.org, tcd.right, tcd.down, COCKPIT_RUI_RADIUS, COCKPIT_RUI_WIDTH, COCKPIT_RUI_HEIGHT, COCKPIT_RUI_SUBDIV ) : RuiTopology_CreatePlane( tcd.org, tcd.right, tcd.down, false )
	return result
}


void function UpdateFullscreenTopology( var topo, bool isHud, bool canBeCircular = false )
{
	bool isCircular = canBeCircular && CircularHudEnabled()
	TopologyCreateData tcd = BuildTopologyCreateData( isHud, isCircular )
	if ( isCircular )
		RuiTopology_UpdateSphereArcs( topo, COCKPIT_RUI_WIDTH, COCKPIT_RUI_HEIGHT, COCKPIT_RUI_SUBDIV )
	RuiTopology_UpdatePos( topo, tcd.org, tcd.right, tcd.down )
}

void function CreateHUDRuiTopologies()
{
    clGlobal.topoFullScreen = CreateFullscreenTopology( false )
    clGlobal.topoFullscreenHud = CreateFullscreenTopology( true, true )
    clGlobal.topoFullscreenHudPermanent = CreateFullscreenTopology( true, true )
    clGlobal.topoFullscreenFullMap = CreateFullscreenTopology( true )
    clGlobal.topFullscreenTargetInfo = CreateFullscreenTopology( true )

    RuiTopology_ShareWithCode( clGlobal.topFullscreenTargetInfo, RUI_CODE_TOPO_TARGET_INFO_HUD )

    // titans:
    {
        clGlobal.topoTitanCockpitHud = RuiTopology_CreateSphere( <-120, 0, -TITAN_COCKPIT_TOPO_RADIUS * deg_sin( TITAN_COCKPIT_ROTATION_ANGLE )>, <0, -1, 0>, <deg_sin( TITAN_COCKPIT_ROTATION_ANGLE ), 0, -deg_cos( TITAN_COCKPIT_ROTATION_ANGLE )>, TITAN_COCKPIT_TOPO_RADIUS, TITAN_COCKPIT_RUI_SCREEN_WIDTH, TITAN_COCKPIT_RUI_SCREEN_WIDTH / 1.7665, TITAN_COCKPIT_RUI_SUBDIV )
        clGlobal.topoTitanCockpitLowerHud = RuiTopology_CreatePlane( <0, 0, 0>, <0, -TITAN_COCKPIT_LOWER_RUI_SCREEN_SQUARE_SIZE, 0>, <0, 0, -TITAN_COCKPIT_LOWER_RUI_SCREEN_SQUARE_SIZE * TITAN_COCKPIT_LOWER_RUI_SCREEN_HEIGHT_SCALE>, true )
        clGlobal.topoTitanCockpitInstrument1 = RuiTopology_CreatePlane( <0, 0, 0>, <0, -1, 0>, <0, 0, -1>, true )
    }

    UpdateFullscreenTopology( clGlobal.topoFullScreen, false )
    UpdateFullscreenTopology( clGlobal.topoFullscreenHud, true, true )
    UpdateFullscreenTopology( clGlobal.topoFullscreenHudPermanent, true, true )
    UpdateFullscreenTopology( clGlobal.topoFullscreenFullMap, true )
    UpdateFullscreenTopology( clGlobal.topFullscreenTargetInfo, true )
}


void function ClientCodeCallback_OnResolutionChanged()
{
	UpdateMainHudVisibility( GetLocalViewPlayer() )
	UpdateFullscreenTopology( clGlobal.topoFullScreen, false )
	UpdateFullscreenTopology( clGlobal.topoFullscreenFullMap, true )
	InitChatHUD()    // sets the size of the vgui chat widow, if we donn't do this it will revert back to the default values set in the res file.

	if ( !IsLobby() )
		FullMap_UpdateTopologies()

	foreach ( func in clGlobal.resolutionChangedCallbacks )
		func()
}


void function PrecacheRes( string resFile )
{
	entity vgui = CreateClientsideVGuiScreen( resFile, VGUI_SCREEN_PASS_WORLD, <0, 0, 0>, <0, 0, 0>, 4, 4 )
	Assert( vgui != null, "Failed to precache res file " + resFile )
	vgui.Destroy()
}


void function ClientCodeCallback_FullUpdate()
{
	foreach ( callbackFunc in clGlobal.fullUpdateCallbacks )
		callbackFunc()
	//ScreenCoverTransition( 4.5 )
}


void function ClientCodeCallback_RunClientConnectScripts( entity player )
{
	Assert( IsValid( player ) )
	Assert( player == GetLocalClientPlayer() )

	thread RunClientConnectScriptsThreaded( player )
}


void function RunClientConnectScriptsThreaded( entity player )
{
	Assert( IsValid( player ) )
	Assert( player == GetLocalClientPlayer() )

	if ( level.clientScriptInitialized )
		return

	player.cv = level.clientVars

	clGlobal.levelEnt = CreateClientSidePointCamera( <0, 0, 0>, <0, 0, 0>, 50 )
	clGlobal.levelEnt.Hide()
	Assert( clGlobal.levelEnt )

	Init_ClientScripts( player )

	FlagWait( "ClientInitComplete" )

	player = GetLocalClientPlayer()

	Assert( IsValid( player ) )
	Assert( player == GetLocalClientPlayer() )

	level.clientScriptInitialized = true

	RunCallbacks_EntitiesDidLoad()

	FlagSet( "EntitiesDidLoad" )
	
	MapConVar_Init()

	if( GetCurrentPlaylistVarBool( "lsm_mod15", false ) )
		thread Thread_StartFakeObituaries()
	
	DM_HintCatalog( 3, 0 )
}


void function Init_ClientScripts( entity player )
{
	InitChatHUD()

	if ( !IsLobby() )
	{
		Player_AddClient( player )
		clGlobal.initScoreboardFunc()
		MainHud_AddClient( player )
		InitCrosshair()
	}

	// Added via AddCallback_OnClientScriptInit
	foreach ( callbackFunc in clGlobal.onClientScriptInitCallback )
	{
		callbackFunc( player )
	}

	thread UpdateViewPlayerThink()

	DoF_SetNearDepthToDefault()
	DoF_SetFarDepthToDefault()
}


void function UpdateViewPlayerThink()
{
	entity lastLocalViewPlayer
	while ( true )
	{
		entity localViewPlayer = GetLocalViewPlayer()
		if ( lastLocalViewPlayer != localViewPlayer )
			RunLocalViewPlayerChangedCallbacks( localViewPlayer )

		lastLocalViewPlayer = localViewPlayer
		WaitFrame()
	}
}


void function Init_PlayerScripts( entity player )
{
	foreach ( addLocalPlayerFunc in clGlobal.addLocalPlayerFuncs )
		addLocalPlayerFunc( player )

	player.p.playerScriptsInitialized = true
}


void function CodeCallback_EntityVarChanged( entity ent, varName, newValue, oldValue )
{
	// printt( "entity var changed", varName, newValue, ent )
	string className = expect string( ent.GetNetworkedClassName() )

	if ( !(className in _entityClassVarChangeCallbacks) )
		return

	if ( !(varName in _entityClassVarChangeCallbacks[className]) )
		return

	foreach ( callbackFunc in _entityClassVarChangeCallbacks[className][varName] )
	{
		table infos = expect table( callbackFunc.getinfos() )
		if ( infos.parameters.len() == 2 )
			callbackFunc( ent )
		else
			callbackFunc( ent, varName, newValue, oldValue ) //added varName so that callbackfunc has a ref
	}
}

// called from _base_gametype::ClientCommand_ClientScriptInitialized()
void function ServerCallback_ClientInitComplete()
{
	FlagSet( "ClientInitComplete" )
}

/*string function StripPrefix( string stringName, string prefix )
{
	int index = stringName.find( prefix )

	if ( index != 0 )
		return stringName

	return stringName.slice( prefix.len(), stringName.len() )
}

function GetTableNumContents( Table, contents )
{
	foreach ( k, v in Table )
	{
		contents.num++

		if ( typeof v == "table" )
		{
			GetTableNumContents( v, contents )
		}
	}
}*/

void function PerfInitLabels()
{
	PerfClearAll()

	table Table = expect table( getconsttable().PerfIndexClient )
	foreach ( label, intval in Table )
		PerfInitLabel( intval, string( label ) )

	table sharedTable = expect table( getconsttable().PerfIndexShared )
	foreach ( label, intval in sharedTable )
		PerfInitLabel( intval + SharedPerfIndexStart, string( label ) )
}


function ClientCodeCallback_OnDropShipCinematicEventStateChanged()
{
}

void function FinisherTestIdk(
		vector refPoint,
		ItemFlavor attackerCharacter, ItemFlavor attackerSkin,
		ItemFlavor victimCharacter, ItemFlavor victimSkin,
		ItemFlavor attackerExecution, string whichCamera = "victim" )
{
	entity attacker = CreateClientSidePropDynamic( refPoint, <0, 0, 0>, $"mdl/dev/empty_model.rmdl" )
	entity victim   = CreateClientSidePropDynamic( refPoint, <0, 0, 0>, $"mdl/dev/empty_model.rmdl" )
	entity camera   = null

	CharacterSkin_Apply( attacker, attackerSkin )
	CharacterSkin_Apply( victim, victimSkin )
	// victim.SetModel( $"mdl/Humans/class/medium/combat_dummie_medium.rmdl" )

	float fov = 70.0
	switch( whichCamera )
	{
		case "firstpersonAttacker":
		{
			fov = 110
			camera = CreateClientSidePointCamera( attacker.GetOrigin(), attacker.GetAngles(), fov )
			camera.SetParent( attacker, "EYE_R", false, 0.0 )
			camera.SetOrigin(camera.GetOrigin() + Normalize(camera.GetForwardVector()*5))
			break			
		}
		case "firstpersonVictim":
		{
			fov = 110
			camera = CreateClientSidePointCamera( victim.GetOrigin(), victim.GetAngles(), fov )
			camera.SetParent( victim, "EYE_R", false, 0.0 )
			camera.SetOrigin(camera.GetOrigin() + Normalize(camera.GetForwardVector()*5))
			break			
		}
		case "attacker":
		{
			camera = CreateClientSidePointCamera( attacker.GetOrigin(), attacker.GetAngles(), fov )
			camera.SetParent( attacker, "VDU", false, 0.0 )
			break
		}

		case "victim":
		{
			camera = CreateClientSidePointCamera( victim.GetOrigin(), victim.GetAngles(), fov )
			camera.SetParent( victim, "VDU", false, 0.0 )
			break
		}

		case "orbit":
		{
			camera = CreateClientSidePointCamera( attacker.GetOrigin(), attacker.GetAngles(), fov )
			//camera.SetParent( attacker, "ref", false, 0.0 )
			break
		}
	}

	OnThreadEnd( function() : ( attacker, victim, camera ) {
		if ( IsValid( camera ) )
		{
			GetLocalClientPlayer().ClearMenuCameraEntity()
			camera.Destroy()
		}

		if ( IsValid( attacker ) )
			attacker.Destroy()

		if ( IsValid( victim ) )
			victim.Destroy()
	} )

	asset attackerPlayerSettings = CharacterClass_GetSetFile( attackerCharacter )
	asset victimPlayerSettings   = CharacterClass_GetSetFile( victimCharacter )
	string victimRigWeight       = GetGlobalSettingsString( victimPlayerSettings, "bodyModelRigWeight" )

	string attackerAnimSeq = string(CharacterExecution_GetAttackerAnimSeq( attackerExecution ))
	string victimAnimSeq   = string(CharacterExecution_GetVictimAnimSeq( attackerExecution, victimRigWeight ))

	float attackerAnimDuration = attacker.GetSequenceDuration( attackerAnimSeq )
	float victimAnimDuration   = victim.GetSequenceDuration( victimAnimSeq )

	victim.SetParent( attacker, "ref", false, 0.0 )

	if ( camera != null )
	{
		clGlobal.clientCamera = camera
		GetLocalClientPlayer().SetMenuCameraEntity( camera )
	}

	if ( whichCamera == "delay" ) // lol
		wait 2.2

	attacker.Anim_PlayWithRefPoint( attackerAnimSeq, refPoint, <0, 0, 0>, 0.0 )
	victim.Anim_Play( victimAnimSeq )
	victim.Anim_EnableUseAnimatedRefAttachmentInsteadOfRootMotion()

	int attackerVDUAttachIndex = attacker.LookupAttachment( "VDU" )
	int victimVDUAttachIndex   = victim.LookupAttachment( "VDU" )

	float finishTime   = Time() + max( attackerAnimDuration, victimAnimDuration )
	entity player      = GetLocalClientPlayer()
	vector orbitAngles = <45, VectorToAngles( Normalize( refPoint - player.EyePosition() ) ).y, 0>
	float prevTime     = Time()
	while ( Time() < finishTime )
	{
		float deltaTime = Time() - prevTime
		if ( whichCamera == "debuglines" )
		{
			vector attackerVDUOrigin = attacker.GetAttachmentOrigin( attackerVDUAttachIndex )
			vector attackerVDUAngles = attacker.GetAttachmentAngles( attackerVDUAttachIndex )
			DebugDrawAxis( attackerVDUOrigin, attackerVDUAngles, 0.0, 20, <255, 100, 100> )

			vector victimVDUOrigin = victim.GetAttachmentOrigin( victimVDUAttachIndex )
			vector victimVDUAngles = victim.GetAttachmentAngles( victimVDUAttachIndex )
			DebugDrawAxis( victimVDUOrigin, victimVDUAngles, 0.0, 20, <100, 255, 200> )
		}
		else if ( whichCamera == "orbit" )
		{
			float inputForward = player.GetInputAxisForward()
			float inputRight   = player.GetInputAxisRight()
			float exp          = 2.0
			orbitAngles += 175.0 * deltaTime * <signum( inputForward ) * pow( fabs( inputForward ), exp ), signum( inputRight ) * pow( fabs( inputRight ), exp ), 0>
			camera.SetOrigin( attacker.GetOrigin() - 150 * AnglesToForward( orbitAngles ) )
			camera.SetAngles( orbitAngles )
		}
		prevTime = Time()
		WaitFrame()
	}
	if ( IsValid( camera ) )
		{
		GetLocalClientPlayer().ClearMenuCameraEntity()
		camera.Destroy()
		}

	if ( IsValid( attacker ) )
		attacker.Destroy()

	if ( IsValid( victim ) )
		victim.Destroy()
	
	wait 0.25
}

void function FirstPersonFinishersShowcase( int attackerIndex, int victimIndex, string camera = "firstpersonAttacker" )
{
	entity player = GetLocalViewPlayer()
	
	array<ItemFlavor> characterPool = GetAllCharacters()
	
	if(attackerIndex > GetAllCharacters().len() || victimIndex > GetAllCharacters().len()) return
	
	array<ItemFlavor> AllFinishers
	
	ItemFlavor attacker = characterPool[attackerIndex]
	foreach( ItemFlavor execution in GetValidItemFlavorsForLoadoutSlot( EHI_null, Loadout_CharacterExecution( attacker  ) ) )
		AllFinishers.append(execution)
	
	#if DEVELOPER
		printt("Total finishers for this attacker: " + AllFinishers.len())
	#endif
	
	if( AllFinishers.len() == 0 )
		return
	
	int attackerFinisherIndex = 0

	ItemFlavor victimCharacter = characterPool[victimIndex]

	ItemFlavor attackerSkin = GetValidItemFlavorsForLoadoutSlot( EHI_null, Loadout_CharacterSkin( attacker  ) ).getrandom()
	ItemFlavor victimSkin      = GetValidItemFlavorsForLoadoutSlot( EHI_null, Loadout_CharacterSkin( victimCharacter ) ).getrandom()
	
	while( attackerFinisherIndex <= AllFinishers.len() - 1 )
	{
		waitthread FinisherTestIdk( player.GetOrigin(), attacker, attackerSkin, victimCharacter, victimSkin, AllFinishers[attackerFinisherIndex], camera)
		attackerFinisherIndex++
		WaitFrame()
	}
}

void function FS_CreateCameraTest()
{
	entity camera = CreateClientSidePointCamera( <4633.86475, 14011.751, -3678.65308>, <0, -85.4728317, 0>, 100 )
	camera.SetMonitorZFar( 100000 )
	camera.SetMonitorExposure( 2 )

	entity vgui = CreateClientsideVGuiScreen( "flowstate_inworld_test", VGUI_SCREEN_PASS_WORLD, <4363.39697, 14038.7949, -4079.90625>+<0,0,256>, <0,0,90>, 500, 500 )
	vgui.s.panel <- vgui.GetPanel()

	PIPSlotState ornull stancePIPSlotStateOrNull1 = BeginMovingPIP( camera, -1)
	int stancePIPSlotIndex1 = PIPSlotState_GetSlotID( expect PIPSlotState(stancePIPSlotStateOrNull1) )

	Hud_SetImage(HudElement( "SomePanel0", vgui.s.panel ), CastStringToAsset("vgui/hud/vdu_hud_cam" + stancePIPSlotIndex1))
}

void function CL_CreateWorldVideo(asset bikname, vector org, vector ang, float width, float height, int RUIID = -1)
{
	vector origin = org
	vector angles = ang

	origin += (AnglesToUp( angles )*-1) * (height*0.5)  // instead of pinning from center, pin from top center
	var topo = CreateRUITopology_Worldspace( origin, angles, width, height )
	
	var rui = RuiCreate( $"ui/finisher_video.rpak", topo, RUI_DRAW_WORLD, RUI_SORT_SCREENFADE + 1 )
	int channel = ReserveVideoChannel()

	RuiSetInt( rui, "channel", channel )
	StartVideoOnChannel( channel, $"media/respawn.bik", true, 0.0 )
}
