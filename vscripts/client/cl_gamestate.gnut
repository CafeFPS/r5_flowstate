untyped

global function ClGameState_Init
global function ClGameState_Think
global function ClGameState_GetRui
global function ClGameState_SetInfoStatusText

global function AddCallback_OnScoreboardCreated

global function ShowRoundScoresInAnnouncement

global function PlayRoundWonConversationWithAnnouncementDelay

global function UpdateGamestateRuiTracking
global function UpdateCommonScoreRuiTracking

global function SetGameModeScoreBarUpdateRules
global function SetGameModeScoreBarUpdateRulesWithFlags
global function SetGameModeSuddenDeathAnnouncementSubtext

global function GetGameStartTime

global function CreateScoreRUI
global function SetCommonScoreRUIVars
global function ClGameState_RegisterGameStateAsset
global function ClGameState_RegisterGameStateFullmapAsset
global function GetFullmapGameStateAsset

global function ClGameState_SetPilotTitanStatusCallback
global function GetPilotTitanStatusForPlayer
global function GameState_UpdateRuiRoundEndGameTime

global function ClGameState_SetSwitchingSidesSubText
global function UpdateIsSonyMP
global function SND_ForceUpdateObservedCount

global enum ePlayerStatusType
{
	PTS_TYPE_NONE,
	PTS_TYPE_DEAD,
	PTS_TYPE_DEAD_PILOT_TITAN,
	PTS_TYPE_DEAD_READY,
	PTS_TYPE_PILOT,
	PTS_TYPE_READY,
	PTS_TYPE_PILOT_TITAN,
	PTS_TYPE_EVAC,
	PTS_TYPE_ION,
	PTS_TYPE_SCORCH,
	PTS_TYPE_RONIN,
	PTS_TYPE_TONE,
	PTS_TYPE_LEGION,
	PTS_TYPE_NORTHSTAR,
	PTS_TYPE_VANGUARD,
	PTS_TYPE_WAVE_READY,
	PTS_TYPE_WAVE_NOT_READY,
	PTS_TYPE_COUNT,
}

struct PilotTitanStatus
{
	int playerCount
	int[8] slotTypes
}

global enum sbflag
{
	SKIP_STANDARD_UPDATE = (1<<0),
	_count = 1
}

struct
{
	var  gamestateRui
	bool gameStateRuiCreated = false
	var  letterBoxRui = null
	bool thirtySecondWarningDone = false

	void functionref( var ) gameModeScoreBarUpdateRules
	array< void functionref() > onScoreboardCreatedFuncs
	int gameModeScoreBarUpdateFlags = 0

	table<int, PilotTitanStatus> pilotTitanStatus
	int functionref( entity, int ) pilotTitanStatusCallback

	string switchingSidesSubText = "#GameState_SWITCHING_SIDES"
	string suddenDeathAnnouncementSubtext

	asset gameStateRuiAsset = $""
	asset gameStateFullmapRuiAsset = $""
} file

const DEV_COUNTDOWNTIMER = 0//turn on to see the countdown timer to match starts - helps with lining up intros




void function ClGameState_Init()
{
	RegisterSignal( "GameStateChanged" )
	RegisterServerVarChangeCallback( "gameState", ClGameState_Changed )
	//RegisterServerVarChangeCallback( "badRepPresent", UpdateScoreboardBadRepPresentMessage )
	AddOnSpectatorTargetChangedCallback( GameState_SpectatorTargetChanged )

	AddCallback_OnClientScriptInit( ClGameState_AddClient )
	AddCallback_GameStateEnter( eGameState.Playing, Hud_SetModeEmblem )

	CreateScoreRUI()
}

void function CreateScoreRUI()
{
	var rui = CreatePermanentCockpitPostFXRui( GetGameStateAsset(), MINIMAP_Z_BASE - 1 )

	RuiTrackFloat( rui, "jumpEndTime", null, RUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL, GetNetworkedVariableIndex( "PlaneDoorsOpenTime" ) )

	RuiTrackBool( rui, "netIssuePacketLoss", null, RUI_TRACK_NET_ISSUE_PACKETLOSS )
	RuiTrackBool( rui, "netIssueCongestion", null, RUI_TRACK_NET_ISSUE_CONGESTION )
	RuiTrackBool( rui, "netIssueLatency", null, RUI_TRACK_NET_ISSUE_LATENCY )
	RuiTrackBool( rui, "netIssuePredictionError", null, RUI_TRACK_NET_ISSUE_PREDICTION_ERROR )
	RuiTrackFloat( rui, "hdTextureProgress", null, RUI_TRACK_GAME_FULLY_INSTALLED_PROGRESS )
	RuiTrackBool( rui, "hdTextureNeedsReboot", null, RUI_TRACK_GAME_HAS_NON_FULLY_INSTALLED_ASSETS_LOADED )

	RuiSetInt( rui, "maxPlayerCount", GetCurrentPlaylistVarInt( "max_players", 12 ) )
	RuiSetString( rui, "gameModeString", GetCurrentPlaylistVarString( "gameModeString", "" ) )
	file.gamestateRui = rui
	file.gameStateRuiCreated = true

	SetCommonScoreRUIVars( rui )

	if ( file.gameModeScoreBarUpdateRules == null )
		SetGameModeScoreBarUpdateRules( GameModeScoreBarUpdateRules_Default )

	foreach ( func in file.onScoreboardCreatedFuncs )
	{
		func()
	}
}

void function Hud_SetModeEmblem()
{
	RuiSetAsset( file.gamestateRui, "emblemImage", GetModeEmblemImage( GetCurrentPlaylistName() ) )
}

void function SetCommonScoreRUIVars( var rui )
{	
	if ( Gamemode() != eGamemodes.SURVIVAL || Playlist() == ePlaylists.fs_survival_solos )
	{
		RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
		RuiSetString( rui, "squadsRemainingTextSingular", "PLAYER ALIVE" )
		RuiSetString( rui, "squadsRemainingTextPlural", "PLAYERS ALIVE" )
		
		int pl = Playlist()

		if( Flowstate_IsHaloMode() )
			RuiSetString( rui, "gameModeString", "HALO DM" )
			
		switch( pl )
		{
			case ePlaylists.winterexpress:
			RuiSetString( rui, "gameModeString", "WINTER EXPRESS" )
			RuiSetString( rui, "squadsRemainingTextSingular", "PLAYER ONLINE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "PLAYERS ONLINE" )
			break

			case ePlaylists.fs_1v1:
			RuiSetString( rui, "gameModeString", "FS 1v1" )
			RuiSetString( rui, "squadsRemainingTextSingular", "PLAYER ONLINE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "PLAYERS ONLINE" )
			break

			case ePlaylists.fs_lgduels_1v1:
			RuiSetString( rui, "gameModeString", "FS LGDUELS" )
			RuiSetString( rui, "squadsRemainingTextSingular", "PLAYER ONLINE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "PLAYERS ONLINE" )
			break
			
			case ePlaylists.fs_scenarios:
			if( GetCurrentPlaylistVarBool( "fs_scenarios_zonewars_ring_mode", false ) )
				RuiSetString( rui, "gameModeString", "FS ZONE WARS" )
			else
				RuiSetString( rui, "gameModeString", "FS FAST BR(FIXME)" )
			RuiSetString( rui, "squadsRemainingTextSingular", "ENEMY ALIVE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "ENEMIES ALIVE" )
			break
			
			case ePlaylists.fs_movementgym:
			RuiSetString( rui, "gameModeString", "FS MOVEMENT GYM" )
			break
			
			case ePlaylists.fs_dm:
			RuiSetString( rui, "gameModeString", "FS DEATHMATCH" )
			break
			
			case ePlaylists.fs_survival_solos:
			RuiSetString( rui, "gameModeString", "APEX SOLOS" )
			break

			case ePlaylists.fs_haloMod_ctf:	
			RuiSetString( rui, "gameModeString", "HALO CTF" )
			RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
			RuiSetString( rui, "squadsRemainingTextSingular", "PLAYER ALIVE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "PLAYERS ALIVE" )
			RuiSetVisible(rui, true)
			break
			
			case ePlaylists.fs_haloMod_oddball:	
			RuiSetString( rui, "gameModeString", "HALO ODDBALL" )
			RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
			RuiSetString( rui, "squadsRemainingTextSingular", "PLAYER ALIVE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "PLAYERS ALIVE" )
			RuiSetVisible(rui, true)
			break
		
			case ePlaylists.fs_dm_fast_instagib:
			RuiSetString( rui, "gameModeString", "FS INSTAGIB" )
			RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
			RuiSetString( rui, "squadsRemainingTextSingular", "PLAYER ALIVE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "PLAYERS ALIVE" )
			RuiSetVisible(rui, true)
			break

			case ePlaylists.fs_infected:
			RuiSetString( rui, "gameModeString", "FS INFECTED" )
			RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
			RuiSetString( rui, "squadsRemainingTextSingular", "#SHADOW_SQUAD_PLAYERS_REMAIN" )
			RuiSetString( rui, "squadsRemainingTextPlural", "#SHADOW_SQUAD_PLAYERS_REMAIN" )
			RuiSetString( rui, "squadsRemaining2TextSingular", "INFECTED" )
			RuiSetString( rui, "squadsRemaining2TextPlural", "INFECTED" )
			break
			
			case ePlaylists.fs_prophunt:
			RuiSetString( rui, "gameModeString", "FS PROPHUNT" )
			RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
			RuiSetString( rui, "squadsRemainingTextSingular", "PROP ALIVE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "PROPS ALIVE" )
			RuiSetVisible(rui, true)
			break
			
			case ePlaylists.fs_duckhunt:
			RuiSetString( rui, "gameModeString", "FS DUCKHUNT" )
			RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
			RuiSetString( rui, "squadsRemainingTextSingular", "DUCK ALIVE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "DUCKS ALIVE" )
			RuiSetVisible(rui, true)	
			break
				
			case ePlaylists.fs_snd:
			RuiSetString( rui, "gameModeString", "SEARCH AND DESTROY" )
			RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
			RuiSetString( rui, "squadsRemainingTextSingular", "ENEMY ALIVE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "ENEMIES ALIVE" )
			RuiSetVisible(rui, true)	
			break
	
			case ePlaylists.custom_ctf:
			RuiSetString( rui, "gameModeString", "CAPTURE THE FLAG" )
			RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
			RuiSetString( rui, "squadsRemainingTextSingular", "PLAYER ONLINE" )
			RuiSetString( rui, "squadsRemainingTextPlural", "PLAYERS ONLINE" )
			RuiSetVisible(rui, true)
			break
		}
	}
	else
	{
		if ( IsFallLTM() )
		{
			RuiSetString( rui, "gameModeString", "" )
			RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
			RuiSetString( rui, "squadsRemainingTextSingular", "#SHADOW_SQUAD_PLAYERS_REMAIN" )
			RuiSetString( rui, "squadsRemainingTextPlural", "#SHADOW_SQUAD_PLAYERS_REMAIN" )
			RuiSetString( rui, "squadsRemaining2TextSingular", "#SHADOW_SQUAD_SHADOW_PLAYERS_REMAIN" )
			RuiSetString( rui, "squadsRemaining2TextPlural", "#SHADOW_SQUAD_SHADOW_PLAYERS_REMAIN" )
			return
		}

		RuiSetBool( rui, "shouldDisplayLivingPlayerCount", true )

		RuiSetInt( rui, "livingPlayerCountMin", 10 )
		RuiSetString( rui, "squadsRemainingTextSingular", "#SURVIVAL_SQUADS_REMAIN" )
		RuiSetString( rui, "squadsRemainingTextPlural", "#SURVIVAL_SQUADS_REMAIN" )
		
		if( Playlist() == ePlaylists.fs_survival )
		{
			RuiSetString( rui, "gameModeString", "APEX" )
		} else if( Playlist() == ePlaylists.fs_survival_duos )
		{
			RuiSetString( rui, "gameModeString", "APEX DUOS" )
		}
	}
}

void function UpdateGamestateRuiTracking( entity player )
{
	if ( IsValid( player ) && player.IsPlayer() )
		UpdateCommonScoreRuiTracking( file.gamestateRui, player )
}

void function UpdateCommonScoreRuiTracking( var rui, entity player )
{
	RuiTrackInt( rui, "killCount", player, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "kills" ) )
	RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )

	if( Playlist() != ePlaylists.fs_scenarios && Gamemode() != eGamemodes.WINTEREXPRESS )
		RuiTrackInt( rui, "playerObservedCount", player, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "damage" ) )
	// else
		// RuiTrackInt( rui, "playerObservedCount", player, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "playerObservedCount" ) )
	

	RuiTrackBool( rui, "hasDeathFieldImmunity", player, RUI_TRACK_SCRIPT_NETWORK_VAR_BOOL, GetNetworkedVariableIndex( "hasDeathFieldImmunity" ) )

	if ( IsRankedGame() )
		RuiTrackInt( rui, "assistCount", player, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "assists" ) )
		

}

void function SND_ForceUpdateObservedCount(int newObservedCount)
{
	var rui = file.gamestateRui
	
	RuiSetInt( rui, "playerObservedCount", newObservedCount )
}

void function GameModeScoreBarUpdateRules_Default( var rui )
{
	//
}

void function SetGameModeScoreBarUpdateRulesWithFlags( void functionref( var ) rules, int sbflags )
{
	file.gameModeScoreBarUpdateRules = rules
	file.gameModeScoreBarUpdateFlags = sbflags
}

void function SetGameModeScoreBarUpdateRules( void functionref( var ) rules )
{
	SetGameModeScoreBarUpdateRulesWithFlags( rules, 0 )
}

void function ClGameState_SetInfoStatusText( string statusText )
{
	if ( file.gameStateRuiCreated )
		RuiSetString( file.gamestateRui, "statusText", Localize( statusText ) )
}


asset function GetGameStateAsset()
{
	if ( file.gameStateRuiAsset != $"" ) //Gamemodes should set this by calling ClGameState_RegisterGameStateAsset in their init script
		return file.gameStateRuiAsset

	return $"ui/gamestate_info.rpak"
}

asset function GetFullmapGameStateAsset()
{
	if ( file.gameStateFullmapRuiAsset != $"" ) //
		return file.gameStateFullmapRuiAsset

	return $"ui/gamestate_info_fullmap.rpak"
}

void function ClGameState_RegisterGameStateAsset( asset gameStateAsset )
{
	file.gameStateRuiAsset = gameStateAsset
}

void function ClGameState_RegisterGameStateFullmapAsset( asset gameStateFullmapAsset )
{
	file.gameStateFullmapRuiAsset = gameStateFullmapAsset
}


void function ClGameState_AddClient( entity player )
{
	player.cv.scoreboardBadRepPresentMessage <- HudElement( "ScoreboardBadRepPresentMessage", HudElement( "Scoreboard" ) )

	#if PC_PROG
		player.cv.scoreboardBadRepPresentMessage.SetText( "#ASTERISK_FAIRFIGHT_CHEATER" )
	#else
		player.cv.scoreboardBadRepPresentMessage.SetText( "#ASTERISK_BAD_REPUTATION" )
	#endif
	
	// player.cv.hudCheaterMessage <- HudElement( "HudCheaterMessage" )
	// if ( !Durango_IsDurango() && !IsLobby() && player.HasBadReputation() )
		// player.cv.hudCheaterMessage.Show()
	// else
		// player.cv.hudCheaterMessage.Hide()
}


var function ClGameState_GetRui()
{
	if ( !file.gameStateRuiCreated )
		return null
	return file.gamestateRui
}


void function ClGameState_Think()
{
	entity player = GetLocalClientPlayer()

	PerfStart( PerfIndexClient.ScoreBoard )
	UpdateScoreBar( player )
	PerfEnd( PerfIndexClient.ScoreBoard )

	switch ( GetGameState() )
	{
		case eGameState.WaitingForPlayers:
			ClGameStateThink_WaitingForPlayers( player )
			break

		case eGameState.PickLoadout:
			ClGameStateThink_PickLoadOut( player )
			break

		case eGameState.Prematch:
			ClGameStateThink_Prematch( player )
			break

		case eGameState.Playing:
			PerfStart( PerfIndexClient.GameStatePlaying )
			ClGameStateThink_Playing( player )
			PerfEnd( PerfIndexClient.GameStatePlaying )
			break

		case eGameState.SwitchingSides:
			ClGameStateThink_SwitchingSides( player )
			break

		case eGameState.Postmatch:
			ClGameStateThink_Postmatch( player )
			break
	}
}

void function ClGameStateThink_Prematch( entity player )
{
	//string factionChoice = GetFactionChoice( player )
	//ItemDisplayData displayData = GetItemDisplayData( factionChoice )
	//asset factionLogo = displayData.image
	//string factionTitle = displayData.name
	//
	//var rui = ClGameState_GetRui()
	//if ( rui != null )
	//	RuiSetImage( rui, "factionImage", factionLogo )

	//removing countdown timer all together
	if ( !DEV_COUNTDOWNTIMER )
		return

	float timeRemaining = ceil( level.nv.gameStartTime - Time() )

	player.cv.prematchTimer.Show()
	player.cv.prematchTimerGlow.Show()
	player.cv.prematchDesc.Show()

	player.cv.prematchTimer.SetText( string( timeRemaining ) )
	player.cv.prematchTimerGlow.SetText( string( timeRemaining ) )
}

void function ClGameStateThink_WaitingForPlayers( entity player )
{
	int reservedCount = GetTotalPendingPlayersReserved()
	int connectingCount = GetTotalPendingPlayersConnecting()
	int loadingCount = GetTotalPendingPlayersLoading()

	int connectedCount = GetPlayerArray().len()
	int allKnownPlayersCount = reservedCount + connectingCount + loadingCount + connectedCount
	int minPlayers = GetCurrentPlaylistVarInt( "min_players", 0 )
	int expectedPlayers = maxint( minPlayers, allKnownPlayersCount )

	if ( !("lastTimeRemaining" in player.cv) )
		player.cv.lastTimeRemaining <- null

	float endTime = GetNV_PreGameStartTime()
	if ( Time() <= endTime )
	{
		float timeRemainingFloat = (endTime - Time())
		float timeRemaining = ceil( timeRemainingFloat )

		//player.cv.waitingForPlayersDesc.SetText( "#HUD_WAITING_FOR_PLAYERS", connectedCount, expectedPlayers, timeRemaining )
		//player.cv.waitingForPlayersDesc.Show()

		if ( timeRemaining != player.cv.lastTimeRemaining )
		{
			EmitSoundOnEntity( player, WAITING_FOR_PLAYERS_COUNTDOWN_SOUND )
		}

		player.cv.lastTimeRemaining = timeRemaining
	}
	else
	{
		//player.cv.waitingForPlayersDesc.SetText( "#HUD_WAITING_FOR_PLAYERS", connectedCount, expectedPlayers, "" )
		//player.cv.waitingForPlayersDesc.Show()
	}
}

void function ClGameStateThink_PickLoadOut( entity player )
{
}

entity function GetTopCompetitor( int team )
{
	array<entity> players = GetPlayerArrayOfEnemies( team )

	entity topCompetitor
	foreach ( player in players )
	{
		if ( !topCompetitor || (GameRules_GetTeamScore( player.GetTeam()) ) > GameRules_GetTeamScore( topCompetitor.GetTeam()) )
			topCompetitor = player
	}

	return topCompetitor
}

string function GetTopCompetitorName( int team )
{
	entity topCompetitor = GetTopCompetitor( team )
	return topCompetitor != null ? topCompetitor.GetPlayerName() : "None"
}

int function GetTopCompetitorTeam( int team )
{
	entity topCompetitor = GetTopCompetitor( team )
	return topCompetitor != null ? topCompetitor.GetTeam() : 0
}

float function GetGameStateRoundEndTime()
{
	if ( IsRoundBased() )
	{
		float result = (expect float( level.nv.roundEndTime ))
		return result
	}

	float result = (expect float( level.nv.gameEndTime ))
	return result
}

void function GameState_UpdateRuiRoundEndGameTime( var rui, string argName )
{
	float endTime = GetGameStateRoundEndTime()

	if ( (endTime == 0.0) || (Time() > endTime) )
		RuiSetGameTime( rui, argName, RUI_BADGAMETIME )
	else
		RuiSetGameTime( rui, argName, endTime )
}

void function ClGameStateThink_Playing( entity player )
{
	local endTime
	if ( IsRoundBased() )
		endTime = level.nv.roundEndTime
	else
		endTime = level.nv.gameEndTime

	if ( !endTime )
		return

	if ( Time() > endTime )
		return

	if ( endTime - Time() > 30.0 )
		return

	if ( file.thirtySecondWarningDone )
		return

	thread ThirtySecondWarning()
	file.thirtySecondWarningDone = true
}

void function ThirtySecondWarning()
{
	string conversation = GameMode_GetGameEndingConversation( GameRules_GetGameMode() )
	if ( conversation != "" )
		PlayConversationToLocalClient( conversation )

	int lastSecond = -1
	while ( Time() < level.nv.gameEndTime && GetGameState() == eGameState.Playing )
	{
		int second = int( floor( level.nv.gameEndTime - Time() ) )
		if ( lastSecond == -1 )
		{
			lastSecond = second
		}
		else if ( second != lastSecond && second < 30 )
		{
			if ( second > 5 )
			{
				EmitSoundOnEntity( GetLocalClientPlayer(), "HUD_match_start_timer_tick_1P" )
			}
			else if ( second >= 0 )
			{
				EmitSoundOnEntity( GetLocalClientPlayer(), "HUD_match_start_timer_5_seconds_1P" )
			}
		}

		lastSecond = second

		WaitFrame()
	}

	EmitSoundOnEntity( GetLocalClientPlayer(), "HUD_match_start_timer_0_seconds_1P" )
}

string function GetTitanClass( entity titan )
{
	entity soul = titan.GetTitanSoul()
	asset settingsName = soul.GetPlayerSettingsName()

	return GetGlobalSettingsString( settingsName, "titanCharacterName" )
}

array< int > function GetPilotTitanStatusForTeam( int team, int teamSize )
{
	array< int > statusTypes
	statusTypes.resize( teamSize, ePlayerStatusType.PTS_TYPE_NONE )
	int playerIndex = 0
	array< entity > teamPlayers = GetPlayerArrayOfTeam( team )
	foreach ( teamPlayer in teamPlayers )
	{
		statusTypes[playerIndex] = GetPilotTitanStatusForPlayer( teamPlayer )
		playerIndex++
	}

	statusTypes.sort( PilotTitanStatusSort )

	return statusTypes
}

int function GetPilotTitanStatusForPlayer( entity teamPlayer )
{
	int statusIndex = ePlayerStatusType.PTS_TYPE_NONE
	entity titan
	if ( teamPlayer.GetPetTitan() )
		titan = teamPlayer.GetPetTitan()
	else if ( teamPlayer.IsTitan() )
		titan = teamPlayer

	entity playerParent = teamPlayer.GetParent()
	bool playerIsInDropship = playerParent != null && IsDropship( playerParent )

	if ( playerIsInDropship && ( GetWaveSpawnType() == eWaveSpawnType.DROPSHIP || GetGameState() == eGameState.Epilogue ) )
	{
		statusIndex = ePlayerStatusType.PTS_TYPE_EVAC
	}
	else if ( titan && titan.GetTitanSoul() )
	{
		if ( !teamPlayer.IsTitan() )
		{
			if ( IsAlive( teamPlayer ) )
				statusIndex = ePlayerStatusType.PTS_TYPE_PILOT_TITAN
			else
				statusIndex = ePlayerStatusType.PTS_TYPE_DEAD_PILOT_TITAN
		}
		else
		{
			if ( !IsAlive( teamPlayer ) )
			{
				statusIndex = ePlayerStatusType.PTS_TYPE_DEAD
			}
			else
			{
				switch ( GetTitanClass( titan ) )
				{
					case "ion":
						statusIndex = ePlayerStatusType.PTS_TYPE_ION
						break
					case "scorch":
						statusIndex = ePlayerStatusType.PTS_TYPE_SCORCH
						break
					case "ronin":
						statusIndex = ePlayerStatusType.PTS_TYPE_RONIN
						break
					case "tone":
						statusIndex = ePlayerStatusType.PTS_TYPE_TONE
						break
					case "legion":
						statusIndex = ePlayerStatusType.PTS_TYPE_LEGION
						break
					case "northstar":
						statusIndex = ePlayerStatusType.PTS_TYPE_NORTHSTAR
						break
					case "vanguard":
						statusIndex = ePlayerStatusType.PTS_TYPE_VANGUARD
						break
				}
			}
		}
	}
	else
	{
		if ( IsAlive( teamPlayer ) )
			statusIndex = IsTitanAvailable( teamPlayer ) ? ePlayerStatusType.PTS_TYPE_READY : ePlayerStatusType.PTS_TYPE_PILOT
		else
			statusIndex = IsTitanAvailable( teamPlayer ) ? ePlayerStatusType.PTS_TYPE_DEAD_READY : ePlayerStatusType.PTS_TYPE_DEAD
	}

	if ( file.pilotTitanStatusCallback != null )
		statusIndex = file.pilotTitanStatusCallback( teamPlayer, statusIndex )

	return statusIndex
}

int function PilotTitanStatusSort( int a, int b )
{
	if ( a > b )
		return -1
	else if ( a < b )
		return 1

	return 0
}

void function ClGameStateThink_Postmatch( entity player )
{
}

void function ClGameStateThink_SwitchingSides( entity player )
{
	//player.cv.vignette.SetColor( 0, 0, 0, 255 )
	//player.cv.vignette.Show()
}

bool function IsSonyMP()
{
	int gamestate = GetGameState()
	if ( gamestate != eGameState.Playing && gamestate != eGameState.SuddenDeath && gamestate != eGameState.Epilogue )
		return false

	int playerMatchState = PlayerMatchState_GetFor( GetLocalClientPlayer() )
	if ( playerMatchState != ePlayerMatchState.SKYDIVE_FALLING && playerMatchState != ePlayerMatchState.NORMAL )
		return false

	return true
}

void function UpdateIsSonyMP()
{
	bool isSonyMP = IsSonyMP()
	SetIsConsideredSonyMultiplayer( isSonyMP )
}

void function ClGameState_Changed()
{
	entity player = GetLocalClientPlayer()
	player.Signal( "GameStateChanged" )

	foreach ( callbackFunc in clGlobal.gameStateEnterCallbacks[ GetGameState() ] )
	{
		callbackFunc()
	}

	switch ( GetGameState() )
	{
		case eGameState.WaitingForCustomStart:
			//player.cv.gamescomWaitTillReady.Show()
			break

		case eGameState.WaitingForPlayers:
			break

		case eGameState.PickLoadout:
			break

		case eGameState.Prematch:
			RemoveAllRagdolls()
			HideEventNotification()

			SetCrosshairPriorityState( crosshairPriorityLevel.PREMATCH, CROSSHAIR_STATE_HIDE_ALL )

			//player.cv.waitingForPlayersDesc.HideOverTime( 0.25 )
			//player.cv.waitingForPlayersLine.HideOverTime( 0.25 )
			//player.cv.waitingForPlayersTimer.HideOverTime( 0.25 )

			if ( GetCurrentPlaylistVarInt( "prematch_letterbox_enabled", 0 ) == 1 )
				file.letterBoxRui = RuiCreate( $"ui/letter_box.rpak", clGlobal.topoFullScreen, RUI_DRAW_HUD, 0 )

			//player.cv.prematchTimer.SetAlpha( 255 )
			//player.cv.prematchTimerGlow.SetAlpha( 255 )
			//player.cv.prematchDesc.SetAlpha( 255 )

			file.thirtySecondWarningDone = false

			StopLocal1PDeathSound() //If you were watching your own kill replay, don't want this playing through till next round

			clGlobal.levelEnt.Signal( "AnnoucementPurge" )

			break

		case eGameState.Playing:
			ClearCrosshairPriority( crosshairPriorityLevel.PREMATCH )
			//player.cv.vignette.HideOverTime( 0.25 )
			if ( file.letterBoxRui != null )
				RuiSetGameTime( file.letterBoxRui, "hideStartTime", Time() )
			//player.cv.prematchTimer.HideOverTime( 0.25 )
			//player.cv.prematchTimerGlow.HideOverTime( 0.25 )
			//player.cv.prematchDesc.HideOverTime( 0.25 )

			ShowScriptHUD( player )
			break

		case eGameState.SuddenDeath:
			AnnouncementData announcement = Announcement_Create( "#GAMEMODE_ANNOUNCEMENT_SUDDEN_DEATH" )
			Announcement_SetSubText( announcement, GetGameModeSuddenDeathAnnouncementSubtext() )

			Announcement_SetHideOnDeath( announcement, false )
			Announcement_SetDuration( announcement, 7.0 )
			Announcement_SetPurge( announcement, true )
			AnnouncementFromClass( player, announcement )
			break

		case eGameState.WinnerDetermined:
			player.cv.roundSpawnCount = 0
			break

		case eGameState.Epilogue:
			//thread MainHud_Outro( level.nv.winningTeam )
			break

		case eGameState.SwitchingSides:

			float announcementDuration = 7.0
			if ( IsRoundWinningKillReplayEnabled() == true && ( !IsRoundBased() && IsSwitchSidesBased() ) ) //Ideally this should be a call to WillShowRoundWinningKillReplay(), but that's only available on the server
				announcementDuration = SWITCHING_SIDES_DELAY + ROUND_WINNING_KILL_REPLAY_TOTAL_LENGTH

			AnnouncementData announcement = Announcement_Create( "#GameState_HALFTIME" )
			announcement.sortKey = RUI_SORT_SCREENFADE + 1 // Draw over screen fade
			announcement.drawOverScreenFade = true
			Announcement_SetSubText( announcement, file.switchingSidesSubText )
			Announcement_SetHideOnDeath( announcement, false )
			Announcement_SetDuration( announcement, announcementDuration )
			Announcement_SetPurge( announcement, true )

			EmitSoundOnEntity( player, "UI_InGame_HalftimeText_Enter" )
			EmitSoundOnEntityAfterDelay( player, "UI_InGame_HalftimeText_Exit", announcementDuration )

			int friendlyTeam = player.GetTeam()
			int enemyTeam = friendlyTeam == TEAM_IMC ? TEAM_MILITIA : TEAM_IMC

			if ( friendlyTeam == TEAM_IMC )
			{
				Announcement_SetLeftIcon( announcement, TEAM_ICON_IMC )
				Announcement_SetRightIcon( announcement, TEAM_ICON_MILITIA )
			}
			else
			{
				Announcement_SetLeftIcon( announcement, TEAM_ICON_MILITIA )
				Announcement_SetRightIcon( announcement, TEAM_ICON_IMC )
			}

			if ( IsRoundBased() )
			{
				Announcement_SetLeftText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore2( friendlyTeam ) )
				Announcement_SetRightText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore2( enemyTeam ) )
			}
			else
			{
				Announcement_SetLeftText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore( friendlyTeam ) )
				Announcement_SetRightText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore( enemyTeam ) )
			}

			AnnouncementFromClass( player, announcement )

			break

		case eGameState.Postmatch:
			//ShowScoreboard()
			//wait for scoreboard to be up
			delaythread( 1.5 ) ServerCallback_ResetMapSettings()
			break
	}

	//UpdateIsSonyMP()
}

void function GameState_SpectatorTargetChanged( entity player, entity previousTarget, entity currentTarget )
{
	UpdateGamestateRuiTracking( currentTarget )
	UpdateGamestateRuiTracking( previousTarget )
	UpdateGamestateRuiTracking( player )
}

void function SetGameModeSuddenDeathAnnouncementSubtext( string text )
{
	file.suddenDeathAnnouncementSubtext = text
}

string function GetGameModeSuddenDeathAnnouncementSubtext()
{
	return file.suddenDeathAnnouncementSubtext
}

void function SwitchingSides_Changed()
{
	if ( IsMenuLevel() )
		return

	thread SwitchingSides_Changed_threaded()
}

void function SwitchingSides_Changed_threaded()
{
	//entity player = GetLocalViewPlayer()
	//
	//if ( level.nv.switchingSides )
	//{
	//	player.cv.halfTimeText.SetText( "Test - Switching Sides" )
	//	player.cv.halfTimeText.Show()
	//	wait 1.5
	//}
	//else
	//{
	//	player.cv.halfTimeText.Hide()
	//
	//}
}

//Note that RoundWinningKillReplay doesn't send imcTeamScore2 and militiaTeamScore2 overrides.
void function ShowRoundScoresInAnnouncement( AnnouncementData announcement, float subtext2IconDelay, int ornull imcTeamScore2 = null, int ornull militiaTeamScore2 = null )
{
	entity player = GetLocalClientPlayer()

	int friendlyTeam = player.GetTeam()
	int enemyTeam = friendlyTeam == TEAM_IMC ? TEAM_MILITIA : TEAM_IMC

	asset leftIcon
	asset rightIcon

	if ( friendlyTeam == TEAM_IMC )
	{
		leftIcon = TEAM_ICON_IMC
		rightIcon = TEAM_ICON_MILITIA
	}
	else
	{
		leftIcon = TEAM_ICON_MILITIA
		rightIcon = TEAM_ICON_IMC
	}

	if ( level.nv.roundScoreLimitComplete == true ) //Generally this is never true except for modes with RoundWinningKillReplay enabled
	{
		if ( friendlyTeam == level.nv.winningTeam )
		{
			Announcement_SetSubText( announcement, "#GAMEMODE_MATCH_WON_BY_FRIENDLY_TEAM" )
			string friendlyTeamString = friendlyTeam == TEAM_IMC ? "#TEAM_IMC" : "#TEAM_MCOR"
			Announcement_SetOptionalSubTextArgsArray( announcement, [ friendlyTeamString ] )
		}
		else if ( enemyTeam == level.nv.winningTeam )
		{
			Announcement_SetSubText( announcement, "#GAMEMODE_MATCH_WON_BY_ENEMY_TEAM" )
			string enemyTeamString = enemyTeam == TEAM_IMC ? "#TEAM_IMC" : "#TEAM_MCOR"
			Announcement_SetOptionalSubTextArgsArray( announcement, [ enemyTeamString ] )
		}
	}

	//Hack: GetTeamScore2 doesn't work mid-kill replay because we get the rewound values as opposed to the current values.
	//Fix for R2 when we get the ability to flag certain values as "use current value instead of rewound value"
	if ( imcTeamScore2 == null && militiaTeamScore2 == null )
	{
		Announcement_SetLeftText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore2( friendlyTeam ) )
		Announcement_SetRightText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore2( enemyTeam ) )
	}
	else
	{
		Assert( imcTeamScore2 != null && militiaTeamScore2 != null ) //Don't have only one team with teamScore2 override
		if ( friendlyTeam == TEAM_IMC )
		{
			Announcement_SetLeftText( announcement, "#GAMEMODE_JUST_THE_SCORE", imcTeamScore2 )
			Announcement_SetRightText( announcement, "#GAMEMODE_JUST_THE_SCORE", militiaTeamScore2 )
		}
		else
		{
			Announcement_SetLeftText( announcement, "#GAMEMODE_JUST_THE_SCORE", militiaTeamScore2 )
			Announcement_SetRightText( announcement, "#GAMEMODE_JUST_THE_SCORE", imcTeamScore2 )
		}
	}

	Announcement_SetLeftIcon( announcement, leftIcon )
	Announcement_SetRightIcon( announcement, rightIcon )
}

void function PlayRoundWonConversationWithAnnouncementDelay( float conversationDelay )
{
	WaitEndFrame() //Necessary so we don't get the AnnouncementPurge signal from the same announcement we are originating from
	clGlobal.levelEnt.EndSignal( "AnnoucementPurge" )

	if ( conversationDelay > 0 )
		wait conversationDelay

	if ( level.nv.winningTeam == null )
		return

	entity player = GetLocalClientPlayer()
	if ( player.GetTeam() == level.nv.winningTeam )
		PlayConversationToLocalClient( "RoundWonAnnouncement" )
	else if ( level.nv.winningTeam != TEAM_UNASSIGNED )
		PlayConversationToLocalClient( "RoundLostAnnouncement" )
}

void function UpdateScoreboardBadRepPresentMessage()
{
	if ( IsLobby() )
		return

	entity player = GetLocalClientPlayer()

	if ( level.nv.badRepPresent )
		player.cv.scoreboardBadRepPresentMessage.Show()
	else
		player.cv.scoreboardBadRepPresentMessage.Hide()
}

void function UpdateChatHudLocationForTop3()
{
	var hudElement = HudElement( "IngameTextChat" )
	var height = hudElement.GetHeight()
	var screenSize = Hud.GetScreenSize()
	var position = hudElement.GetPos()
	HudElement( "IngameTextChat" ).SetPos( position[0], -1 * ( screenSize[1] - ( height + screenSize[1] * 0.10 ) ) )
}

float function GetGameStartTime()
{
	return expect float( level.nv.gameStartTime.tofloat() )
}

void function ClGameState_SetSwitchingSidesSubText( string value )
{
	file.switchingSidesSubText = value
}

void function ClGameState_SetPilotTitanStatusCallback( int functionref( entity, int ) func )
{
	file.pilotTitanStatusCallback = func
}


void function UpdateScoreBar( entity player )
{
	PerfStart( PerfIndexClient.ScoreBoardUpdate )
	file.gameModeScoreBarUpdateRules( file.gamestateRui )
	PerfEnd( PerfIndexClient.ScoreBoardUpdate )
}

void function AddCallback_OnScoreboardCreated( void functionref() func )
{
	Assert( !file.onScoreboardCreatedFuncs.contains(func) )
	file.onScoreboardCreatedFuncs.append(func)
}

//maxPlayerCount
