global function ClKillReplayHud_Init

global function KillReplayHud_AddClient
global function KillReplayHud_Activate
global function KillReplayHud_Deactivate

global function ServerCallback_KillReplayHud_Activate
global function ServerCallback_KillReplayHud_Deactivate

struct
{
	var killReplayOverlayRui
	bool IsWatchingReplay = false
	int allowedSpectatorTargetCount = 0
} file

void function ClKillReplayHud_Init()
{
	RegisterSignal( "DeactivateKillReplayHud" )

	AddCallback_KillReplayStarted( KillReplayHud_Activate )
	AddCallback_KillReplayEnded( KillReplayHud_Deactivate )

	AddCallback_EntitiesDidLoad( EntitiesDidLoad )
}

void function EntitiesDidLoad()
{
	if ( !IsRoundWinningKillReplayEnabled() ) //Need to check in EntitiesDidLoad as opposed to main() since the .nv isn't set yet in main()
		return

	AddCallback_KillReplayStarted( RoundWinningKillReplayClientHud_Activate )
	AddCallback_KillReplayEnded( RoundWinningKillReplayClientHud_Deactivate )
}

void function KillReplayHud_AddClient()
{
	entity player = GetLocalClientPlayer()
}

string function GetRefFromDamageSourceId( int damageSourceId )
{
	table damageSourceIdEnum = expect table( getconsttable().eDamageSourceId )

	array<string> damageSourceIndexToName
	damageSourceIndexToName.resize( damageSourceIdEnum.len(), "UNDEFINED" )
	foreach ( name, index in damageSourceIdEnum )
	{
		expect int( index )
		if ( index >= 0 )
			damageSourceIndexToName[index] = string( name )
	}

	if ( damageSourceId in damageSourceIndexToName )
		return damageSourceIndexToName[damageSourceId]
	else
		return ""

	unreachable
}

void function ServerCallback_KillReplayHud_Activate() {	
	Custom_KillReplayHud_Activate()
}

void function ServerCallback_KillReplayHud_Deactivate() {
	Custom_KillReplayHud_Deactivate()
}

void function KillReplayHud_Activate()
{
	if ( IsReplayRoundWinning() )
		return

	//printt( "KillReplayHud_Activate, replay not roundwinning" )

	var rui = RuiCreate( $"ui/kill_replay_overlay.rpak", clGlobal.topoFullScreen, RUI_DRAW_HUD, 900 )
	//var rui = CreateCockpitRui( $"ui/kill_replay_overlay.rpak", 0 )
	file.killReplayOverlayRui = rui

	RuiSetString( rui, "killReplayTitleText", "Kill Replay" )

	AttackerDisplayNameStruct nameOfLastKiller = clGlobal.nameOfLastKiller

	if ( nameOfLastKiller.attackerName != "" /*|| nameOfLastKiller.attackerPetName != ""*/ )
	{
		entity player = GetLocalClientPlayer()

		string attackerName = nameOfLastKiller.attackerName
		string attackerPetName = nameOfLastKiller.attackerPetName
		if ( attackerName != GetLocalClientPlayer().GetPlayerName() )
		{
			RuiSetString( file.killReplayOverlayRui, "killerName", "attackerName" )
		}

		entity attacker

		if ( !IsValid( attacker ) )
		{
			foreach ( otherPlayer in GetPlayerArray() )
			{
				if ( otherPlayer.GetPlayerName() != nameOfLastKiller.attackerName )
					continue

				attacker = otherPlayer
				RuiSetBool( file.killReplayOverlayRui, "showKillerWeaponInfo", false )
			}
		}

		if ( !IsValid( attacker ) )
			return

		if ( !attacker.IsPlayer() )
			return

		if ( IsFriendlyTeam( attacker.GetTeam(), player.GetTeam() ) )
			return

		RuiSetBool( file.killReplayOverlayRui, "showKillerInfo", false )
		RuiSetFloat( file.killReplayOverlayRui, "killerHealthFrac", nameOfLastKiller.healthFrac )
	}
}


void function KillReplayHud_Deactivate()
{
	if ( IsReplayRoundWinning() )
		return

	//printt( "FIX THIS PLEASE WHYKillReplayHud_Deactivate, replay not roundwinning" )

	RuiDestroy( file.killReplayOverlayRui )

	entity player = GetLocalClientPlayer()

	//player.cv.vignette.Hide()

	player.Signal( "DeactivateKillReplayHud" )
}

void function RoundWinningKillReplayClientHud_Activate()
{
	if ( IsRoundWinningKillReplayEnabled() == false )
		return

	if ( IsReplayRoundWinning() == false )
		return

	entity clientPlayer = GetLocalClientPlayer()

	StopLocal1PDeathSound() //Don't want this sound playing in RoundWinningKillReplay

	clientPlayer.EndSignal( "OnDestroy" )

	var rui = RuiCreate( $"ui/kill_replay_overlay.rpak", clGlobal.topoFullScreen, RUI_DRAW_HUD, 900 )
	file.killReplayOverlayRui = rui

	string announcementText
	if ( IsRoundBased() )
		announcementText = "#KILL_REPLAY_ROUND_WINNING_KILL_ANNOUNCEMENT"
	else if ( IsSwitchSidesBased() )
		announcementText = "#KILL_REPLAY_ROUND_WINNING_CAP_ANNOUNCEMENT"
	else
		announcementText = "#KILL_REPLAY_ROUND_WINNING_PLAY_ANNOUNCEMENT"

	RuiSetString( file.killReplayOverlayRui, "killReplayTitleText", announcementText )

	ClearAnnouncements() //Clear the "ROUND WON" announcement from end of round

	entity viewEntity = GetViewEntity()
	if ( viewEntity == null ) //Sometimes this can be null, e.g. we went back in time on the client before the entity existed. See Bug 112390
		return

	AttackerDisplayNameStruct names = GetAttackerDisplayNamesFromClassname( viewEntity, true )
	string attackerName = names.attackerName
	string attackerPetName = names.attackerPetName
	bool wasKilledByPet = attackerPetName == "" ? false: true

	string killerName = ""
	if ( wasKilledByPet )
		killerName = Localize( "#KILLREPLAY_WATCHING_KILLER_PET", Localize( attackerName ), Localize( attackerPetName ) )
	else
		killerName = attackerName

	RuiSetString( file.killReplayOverlayRui, "killerName", killerName ) //TODO: See if this works for ctf!

	if ( !viewEntity.IsPlayer() )
		return

	RuiSetBool( file.killReplayOverlayRui, "showKillerInfo", true )
	RuiSetFloat( file.killReplayOverlayRui, "killerHealthFrac", expect float( level.nv.roundWinningKillReplayEntHealthFrac ) )
}

void function RoundWinningKillReplayClientHud_Deactivate() //Not doing screen fade in here, but might need to?
{
	if ( IsRoundWinningKillReplayEnabled() == false )
		return

	if ( IsReplayRoundWinning() )
	{
		//printt( "RoundWinningKillReplayClientHud_Deactivate, IsReplayRoundWinning()" )
		RuiDestroy( file.killReplayOverlayRui )

		entity player = GetLocalClientPlayer()

		player.Signal( "DeactivateKillReplayHud" )

		StopLocal1PDeathSound()
	}
}

void function Custom_KillReplayHud_Activate()
{
	entity player = GetLocalClientPlayer()
	
	if ( !IsValid( player ) )
		return
	
	if ( IsReplayRoundWinning() )
		return

	asset image
	int armorTier
	string attackerName
	bool islocalclient = false

	//Set is watching replay
	file.IsWatchingReplay = true

	//Get the attackers entity
	entity observerTarget = GetLocalClientPlayer().GetObserverTarget()

	//Make sure the entity is valid
	if(!IsValid(observerTarget))
		observerTarget = GetLocalClientPlayer()

	//Causes issues when the observer is the local client
	if(observerTarget != GetLocalClientPlayer() && observerTarget.IsPlayer())
	{
		thread UpdatePlayerHealthAndSheild(observerTarget)

		//Gets attackers legend image
		ItemFlavor character = LoadoutSlot_WaitForItemFlavor( ToEHI( observerTarget ), Loadout_CharacterClass() )
		image = CharacterClass_GetGalleryPortrait( character )
		//Get armor tier
		armorTier = EquipmentSlot_GetEquipmentTier( observerTarget, "armor" )
		//Get attacker name
		attackerName = observerTarget.GetPlayerName()
	}
	else
	{
		image = $""
		armorTier = 0
		attackerName = ""
		islocalclient = true
	}

	//Open Kill Replay Hud
	RunUIScript("OpenKillReplayHud", image, attackerName, armorTier, islocalclient, GameRules_GetGameMode() == "fs_prophunt" )
}

void function Custom_KillReplayHud_Deactivate()
{
	//Set is not watching replay
	file.IsWatchingReplay = false

	if ( IsReplayRoundWinning() )
		return
	
	bool isProphunt = false
	
	if(GameRules_GetGameMode() == "fs_prophunt")
		isProphunt = true
	
	//Close the replay menu
	RunUIScript("CloseKillReplayHud", isProphunt)

	GetLocalClientPlayer().Signal( "DeactivateKillReplayHud" )
}

void function UpdatePlayerHealthAndSheild(entity attacker)
{
	//Gets armor Tier
	int armorTier = EquipmentSlot_GetEquipmentTier( attacker, "armor" )
	
	entity observerTarget = attacker
	
	ItemFlavor character = LoadoutSlot_WaitForItemFlavor( ToEHI( attacker ), Loadout_CharacterClass() )
	asset image = CharacterClass_GetGalleryPortrait( character )
	
	//Update health and sheild while they are watching the replay
    while(file.IsWatchingReplay)
    {
		observerTarget = GetLocalClientPlayer().GetObserverTarget()
		
		if( IsValid(observerTarget) && observerTarget.IsPlayer() && observerTarget != attacker )
		{
			attacker = observerTarget // so we can update name too
			armorTier = EquipmentSlot_GetEquipmentTier( attacker, "armor" ) //update armor tier for new spectator targets
			character = LoadoutSlot_WaitForItemFlavor( ToEHI( attacker ), Loadout_CharacterClass() )
			image = CharacterClass_GetGalleryPortrait( character )
		}
		
		if(!IsValid(attacker)) {
			attacker = GetLocalClientPlayer().GetObserverTarget()
			WaitFrame()
			continue
		}
		
		RunUIScript("ReplayHud_UpdatePlayerData", GetHealthFrac( attacker ), GetShieldHealthFrac( attacker ), armorTier, attacker.GetPlayerName(), image)

		WaitFrame()
    }
}
