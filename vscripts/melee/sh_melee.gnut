//=========================================================
// melee attack = regular melee punch/slash/kick/etc
// synced melee = execution/finisher
//=========================================================

#if SERVER || CLIENT || UI
global function MeleeShared_Init

global function Loadout_MeleeSkin
global function MeleeSkin_GetMainWeaponClassname
global function MeleeSkin_GetOffhandWeaponClassname
global function MeleeSkin_GetMenuModel
global function MeleeSkin_GetMenuAnimSeq
global function MeleeSkin_GetMenuModelRotation
global function MeleeSkin_GetCharacterFlavor
global function MeleeSkin_GetSortOrdinal
#endif


#if SERVER || CLIENT
global function DoesWeaponTriggerMeleeAttack
global function DoesWeaponClassTriggerMeleeAttack
global function IsWeaponClassMelee
global function SetObjectCanBeMeleed
global function GetPlayerMeleeAttackWeapon
global function AttackerCanStartMelee
global function IsValidMeleeAttackTarget
#endif

#if SERVER || CLIENT
global function CodeCallback_OnMeleePressed
global function CodeCallback_OnMeleeStartActivity
global function CodeCallback_OnMeleeHeld
global function CodeCallback_OnMeleeReleased
global function CodeCallback_IsValidMeleeAttackTarget
global function CodeCallback_OnMeleeAttackAnimEvent
#endif

#if SERVER
global function CodeCallback_OnMeleeKilled
global function CodeCallback_NPCMeleeChargedPlayerOrNPC
#elseif CLIENT
global function ClientCodeCallback_ShowMeleePrompt
#endif


////////////////
////////////////
//// Consts ////
////////////////
////////////////
const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY = 1.0
const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY = 0.5

const float MELEE_KNOCKBACK_SCALE = 350.0
const float MELEE_KNOCKBACK_DURATION = 0.25

//global const KNIFE_MODEL = $"mdl/weapons/combat_knife/w_combat_knife.rmdl"
//global const BIRD_MODEL = $"mdl/creatures/bird/bird.rmdl"
//const HUMAN_BLOOD_FX = $"impact_flesh"
//const MECHANICAL_BLOOD_FX = $"P_impact_metal_spectre"



///////////////////////
///////////////////////
//// Private Types ////
///////////////////////
///////////////////////
struct FileStruct_LifetimeLevel
{
	table<ItemFlavor, LoadoutEntry> characterMeleeSkinLoadoutEntryMap

	table<ItemFlavor, ItemFlavor> meleeSkinCharacterMap

	table<ItemFlavor, int> cosmeticFlavorSortOrdinalMap
}
FileStruct_LifetimeLevel& fileLevel



/////////////////////////
/////////////////////////
//// Initialiszation ////
/////////////////////////
/////////////////////////
#if SERVER || CLIENT || UI
void function MeleeShared_Init()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	AddCallback_OnItemFlavorRegistered( eItemType.character, OnItemFlavorRegistered_Character )
}
#endif


#if SERVER || CLIENT || UI
void function OnItemFlavorRegistered_Character( ItemFlavor characterClass )
{
	array<ItemFlavor> meleeSkinList = RegisterReferencedItemFlavorsFromArray( characterClass, "meleeSkins", "flavor", "featureFlag" )
	foreach( ItemFlavor meleeSkin in meleeSkinList )
	{
		fileLevel.meleeSkinCharacterMap[meleeSkin] <- characterClass
		#if SERVER || CLIENT
			//PrecacheModel( MeleeSkin_GetWorldModel( meleeSkin ) )
			//PrecacheModel( MeleeSkin_GetViewModel( meleeSkin ) )
			
			// commented for debugging
			PrecacheWeapon( MeleeSkin_GetMainWeaponClassname( meleeSkin ) )
			PrecacheWeapon( MeleeSkin_GetOffhandWeaponClassname( meleeSkin ) )
		#endif
	}

	MakeItemFlavorSet( meleeSkinList, fileLevel.cosmeticFlavorSortOrdinalMap )

	LoadoutEntry entry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "meleeskin", ItemFlavor_GetGUIDString( characterClass ) )
	entry.DEV_category = "character_meleeskins"
	entry.DEV_name = ItemFlavor_GetHumanReadableRef( characterClass ) + " Melee Skin"
	entry.defaultItemFlavor = meleeSkinList[0]
	entry.validItemFlavorList = meleeSkinList
	entry.isSlotLocked = bool function( EHI playerEHI ) {
		return !IsLobby()
	}
	entry.isActiveConditions = { [Loadout_CharacterClass()] = { [characterClass] = true, }, }
	entry.networkTo = eLoadoutNetworking.PLAYER_EXCLUSIVE
	fileLevel.characterMeleeSkinLoadoutEntryMap[characterClass] <- entry

	#if SERVER && DEVELOPER
		AddCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer( entry, void function( EHI playerEHI, ItemFlavor meleeSkin ) {
			DEV_UpdatePlayerMeleeWeaponCosmetics( FromEHI( playerEHI ), meleeSkin )
		} )
	#endif
}

int function MeleeSkin_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	return fileLevel.cosmeticFlavorSortOrdinalMap[flavor]
}

#endif



//////////////////////////
//////////////////////////
//// Global functions ////
//////////////////////////
//////////////////////////
#if SERVER || CLIENT || UI
LoadoutEntry function Loadout_MeleeSkin( ItemFlavor character )
{
	Assert( ItemFlavor_GetType( character ) == eItemType.character )

	return fileLevel.characterMeleeSkinLoadoutEntryMap[character]
}
#endif


#if SERVER || CLIENT || UI
string function MeleeSkin_GetMainWeaponClassname( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "mainWeaponClassname" )
}
#endif


#if SERVER || CLIENT || UI
string function MeleeSkin_GetOffhandWeaponClassname( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "offhandWeaponClassname" )
}
#endif


#if SERVER || CLIENT || UI
asset function MeleeSkin_GetMenuModel( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	string mainWeaponClassname = MeleeSkin_GetMainWeaponClassname( meleeSkin )
	return GetWeaponInfoFileKeyFieldAsset_Global( mainWeaponClassname, "viewmodel" )
}
#endif


#if SERVER || CLIENT || UI
asset function MeleeSkin_GetMenuAnimSeq( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "menuAnimSeq" )
}
#endif

#if SERVER || CLIENT || UI
vector function MeleeSkin_GetMenuModelRotation( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( meleeSkin ), "menuMdlRot" )
}
#endif


#if SERVER || CLIENT || UI
ItemFlavor function MeleeSkin_GetCharacterFlavor( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return fileLevel.meleeSkinCharacterMap[meleeSkin]
}
#endif

#if SERVER || CLIENT
bool function DoesWeaponTriggerMeleeAttack( entity weapon )
{
	return (weapon.IsWeaponMelee() || weapon.GetWeaponSettingBool( eWeaponVar.attack_button_presses_melee ))
}
#endif


#if SERVER || CLIENT
bool function DoesWeaponClassTriggerMeleeAttack( string weaponName )
{
	return (IsWeaponClassMelee( weaponName ) || GetWeaponInfoFileKeyField_GlobalBool( weaponName, "attack_button_presses_melee" ))
}
#endif


#if SERVER || CLIENT
bool function IsWeaponClassMelee( string weaponName )
{
	// (dw): meant to mimic weapon.IsWeaponMelee()
	int fireMode = expect int(GetWeaponInfoFileKeyField_Global( weaponName, "fire_mode" ))
	printt("IsWeaponClassMelee", weaponName, fireMode, eWeaponFireMode.offhandMelee, eWeaponFireMode.offhandMeleeHybrid)
	return (fireMode == eWeaponFireMode.offhandMelee || fireMode == eWeaponFireMode.offhandMeleeHybrid)
}
#endif


#if SERVER || CLIENT
void function SetObjectCanBeMeleed( entity ent, bool value )
{
	Assert( !ent.IsPlayer(), ent + " should not be a player. This is for non-player, non-NPC entities." )
	Assert( !ent.IsNPC(), ent + " should not be an NPC. This is for non-player, non-NPC entities." )

	ent.e.canBeMeleed = value
}
#endif


#if SERVER || CLIENT
entity function GetPlayerMeleeAttackWeapon( entity player )
{
	entity meleeAttackWeapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand ) // Check if the active weapon is melee first
	if ( !IsValid( meleeAttackWeapon ) || !meleeAttackWeapon.IsWeaponMelee() )
	{
		meleeAttackWeapon = player.GetOffhandWeapon( OFFHAND_MELEE ) // Try using default melee weapon

		if ( !IsValid( meleeAttackWeapon ) )
			return null
	}

	Assert( meleeAttackWeapon.IsWeaponMelee() )

	return meleeAttackWeapon
}
#endif


#if SERVER || CLIENT
bool function IsValidMeleeAttackTarget( entity attacker, entity inputWeaponOrNull, entity attackWeapon, entity target )
{
	if( GameRules_GetGameMode() == "fs_prophunt" && target.GetNetworkedClassName() == "prop_dynamic" )
		return true

	if ( attacker == target )
		return false

	if ( target.IsBreakableGlass() )
		return true

	if ( !target.CanBeMeleed() )
		return false
	
	if ( IsFriendlyTeam( attacker.GetTeam(), target.GetTeam() ) && GameRules_GetGameMode() == "flowstate_snd" && target.p.playerIsPlantingBomb) //avoid punching teammates while planting (qol)
		return false	

	if ( IsFriendlyTeam( attacker.GetTeam(), target.GetTeam() ) && GameRules_GetGameMode() == "flowstate_snd" && target.p.isInExtendedUse) //avoid punching teammates while defusing (qol)
		return false	
	
	if ( IsFriendlyTeam( attacker.GetTeam(), target.GetTeam() ) && GameRules_GetGameMode() == "fs_duckhunt" )
		return false

	if ( IsFriendlyTeam( attacker.GetTeam(), target.GetTeam() ) )
		return true

	if ( !attacker.DoesShareRealms( target ) )
		return false

	if ( IsValid( attackWeapon ) && !attackWeapon.GetMeleeCanHitHumanSized() && IsHumanSized( target ) )
		return false

	if ( target.IsPhaseShifted() )
		return false

	if ( target.IsPlayer() || target.IsNPC() )
	{
		// target is BaseCombatCharacter
		if ( target.ContextAction_IsMeleeExecutionTarget() )
			return false
	}
	else
	{
		if ( !target.e.canBeMeleed )
			return false
	}

	return true
}
#endif



///////////////////
///////////////////
//// Internals ////
///////////////////
///////////////////
#if SERVER || CLIENT
entity function GetMeleeAttackLungeTarget( entity attacker, entity meleeAttackWeapon )
{
	return PlayerMelee_LungeConeTrace( attacker, meleeAttackWeapon, SHARED_CB_IS_VALID_MELEE_ATTACK_TARGET )
}
#endif


#if SERVER || CLIENT
bool function AttackerCanStartMelee( entity attacker, entity inputWeaponOrNull, entity attackWeapon )
{
	Assert( attacker.IsPlayer() )

	if ( !IsAlive( attacker ) )
		return false

	if ( attacker.PlayerMelee_GetState() != PLAYER_MELEE_STATE_NONE )
		return false

	if ( attacker.IsWeaponSlotDisabled( eActiveInventorySlot.mainHand ) ) // Covers bleedout
		return false

	//if ( PlayerIsInMeleeBlockingADS( attacker ) )
	//	return false
	
	if ( attacker.IsPhaseShifted() )
    {
        return false
    }
	
	if ( attacker.Player_IsFreefalling() )
    {
        return false
    }

	if ( attacker.Lunge_IsActive() )
		return false

	if ( IsValid( inputWeaponOrNull ) && !GetCurrentPlaylistVarBool( "quick_melee_enabled", true )
			&& inputWeaponOrNull == attacker.GetOffhandWeapon( OFFHAND_MELEE ) )
		return false

	return true
}
#endif


#if SERVER || CLIENT
bool function CodeCallback_IsValidMeleeAttackTarget( entity attacker, entity target )
{
	entity meleeInputWeapon  = null // We don't know what it is because they haven't pressed a button yet
	entity meleeAttackWeapon = GetPlayerMeleeAttackWeapon( attacker )

	if ( !IsValidMeleeAttackTarget( attacker, meleeInputWeapon, meleeAttackWeapon, target ) )
		return false

	return true
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleePressed( entity attacker, entity meleeInputWeapon )
{

	attacker.p.TEMP_lastMeleeInputWeapon = meleeInputWeapon

	entity meleeAttackWeapon = GetPlayerMeleeAttackWeapon( attacker )

	if ( !AttackerCanStartMelee( attacker, meleeInputWeapon, meleeAttackWeapon ) )
		return
	
	#if SERVER
	if(GetCurrentPlaylistVarBool( "firingrange_aimtrainerbycolombia", false ))
	{
		entity player = attacker
		int basedamage = 30 //!FIXME
		int ornull projectilespershot = 1 //!FIXME
		int pellets = 1
		if(projectilespershot != null)
		{
			pellets = expect int(projectilespershot)
			player.p.totalPossibleDamage += (basedamage * pellets)
		}
		else 
			player.p.totalPossibleDamage += basedamage
		
		//add 1 hit to total hits
		player.p.straferTotalShots += (1*pellets)
		
		Remote_CallFunction_NonReplay(player, "ServerCallback_LiveStatsUIDamageViaWeaponAttack", basedamage, basedamage * pellets)
		Remote_CallFunction_NonReplay(player, "ServerCallback_LiveStatsUIAccuracyViaTotalShots", pellets)
	}
	#endif
	
	attacker.PlayerMelee_StartAttack( PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK )

	// DOOR BUSTING PROTOTYPE
	// todo(dw): use better door detection logic
	{
		bool isShadowSquad = false
		if ( IsFallLTM() )
			isShadowSquad = IsPlayerShadowSquad( attacker )

		bool doorLungeEnabled = !isShadowSquad && GetCurrentPlaylistVarBool( "blockable_door_can_be_hurt_by_special_kick", true )
		entity lungeTarget    = GetMeleeAttackLungeTarget( attacker, meleeAttackWeapon )

		vector eyeTraceHitPos
		if ( doorLungeEnabled && !IsValid( lungeTarget ) )
		{
			TraceResults eyeTrace = TraceLine(
				attacker.EyePosition(), attacker.EyePosition() + 150.0 * attacker.GetViewVector(),
				[ attacker ], TRACE_MASK_NPCWORLDSTATIC, TRACE_COLLISION_GROUP_NONE
			)
			lungeTarget = eyeTrace.hitEnt
			eyeTraceHitPos = eyeTrace.endPos
		}

		if ( doorLungeEnabled && IsValid( lungeTarget ) && IsDoor( lungeTarget ) && lungeTarget.e.canBeMeleed )
		{
			meleeAttackWeapon.AddMod( "proto_door_kick" )

			attacker.Lunge_SetTargetPosition( <eyeTraceHitPos.x, eyeTraceHitPos.y, lungeTarget.GetWorldSpaceCenter().z - 52 > ) //
			attacker.Lunge_SetSmoothTime( 0.7 )
			attacker.Lunge_EnableFlying()
		}
		else if ( meleeAttackWeapon.HasMod( "proto_door_kick" ) )
		{
			meleeAttackWeapon.RemoveMod( "proto_door_kick" )
		}
	}

	#if SERVER
		meleeAttackWeapon.EmitWeaponNpcSound_DontUpdateLastFiredTime( 200, 0.2 )
	#endif

	attacker.SetSelectedOffhand( eActiveInventorySlot.mainHand, meleeAttackWeapon )
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeStartActivity( entity attacker, entity meleeAttackWeapon )
{
	if ( GetBugReproNum() == 53982 )
		Assert( attacker.PlayerMelee_IsAttackActive() )
	else if ( !attacker.PlayerMelee_IsAttackActive() )
		return // todo(dw): workaround for R5DEV-53982

	const float STUN_EFFECT_CUTOFF = 0.05
	float movestunEffect = StatusEffect_GetSeverity( attacker, eStatusEffect.move_slow )
	bool movestunBlocked = (movestunEffect > STUN_EFFECT_CUTOFF)
	if ( !movestunBlocked )
	{
		entity lungeTarget = GetMeleeAttackLungeTarget( attacker, meleeAttackWeapon )

		if ( IsValid( lungeTarget ) )
		{
			bool lungeStartWasSuccessful = attacker.Lunge_SetTargetEntity( lungeTarget )

			if ( lungeStartWasSuccessful && attacker.IsOnGround() )
				attacker.Lunge_LockPitch( true )
		}
	}
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeHeld( entity player, entity weapon )
{
	//
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeReleased( entity player, entity weapon )
{
	//
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeAttackAnimEvent( entity attacker, entity meleeAttackWeapon )
{
	Assert( IsValid( attacker ) )

	if ( !attacker.PlayerMelee_IsAttackActive() )
		return // (dw): see R5DEV-53886

	Assert( attacker.PlayerMelee_GetState() == PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK )
	Assert( !attacker.PlayerMelee_GetAttackHitEntity() )

	#if SERVER
		PIN_OnWeaponAttack( attacker, meleeAttackWeapon, meleeAttackWeapon.GetWeaponClassName(), 1, attacker.GetOrigin(), attacker.GetViewForward() )
	#endif

	float attackRange = meleeAttackWeapon.GetMeleeAttackRange()

	// attack trace
	table legacyTraceResults = PlayerMelee_AttackTrace( attacker, attackRange, (bool function( entity attacker, entity target ) : (meleeAttackWeapon) {
		return IsValidMeleeAttackTarget( attacker, null, meleeAttackWeapon, target )
	}) )

	entity target         = expect entity(legacyTraceResults.ent)
	vector endPosition    = expect vector(legacyTraceResults.position)
	int surfaceProp       = expect int(legacyTraceResults.surfaceProp)
	int staticPropID      = expect int(legacyTraceResults.staticPropID)
	int impactEffectFlags = expect int(legacyTraceResults.impactEffectFlags)
	int codeDamageType    = expect int(legacyTraceResults.damageType)
	vector startPosition  = expect vector(legacyTraceResults.startPosition)
	vector hitNormal      = Normalize( startPosition - endPosition )
	int meleeAttackWeaponImpactTableIndex = meleeAttackWeapon.GetImpactTableIndex()

	// Early out if we didn't hit anything
	if ( !IsValid( target ) )
		return
	
	if( GameRules_GetGameMode() == "fs_prophunt" && target.GetNetworkedClassName() == "prop_dynamic" && IsValid(target.GetParent()))
	{
		target = target.GetParent()
	
		if ( !IsValid( target ) )
			return
	}
	// Impact effects
	if ( !attacker.PlayerMelee_IsAttackActive() )
		return
		
	impactEffectFlags = impactEffectFlags

	attacker.DispatchImpactEffects( target,
	startPosition, endPosition, hitNormal,
	surfaceProp, staticPropID, codeDamageType, meleeAttackWeapon.GetImpactTableIndex(),
	attacker, impactEffectFlags )
	
	// Melee state
	attacker.PlayerMelee_SetAttackHitEntity( target )
	if ( !target.IsWorld() )
		attacker.PlayerMelee_SetAttackRecoveryShouldBeQuick( true )

	// Special case for breakable glass
	if ( target.IsBreakableGlass() )
	{
		#if SERVER
			target.BreakSphere( endPosition, 50 )
		#endif // #if SERVER
		return
	}

	// Melee hit confirmation
	bool targetIsEnemy  = IsEnemyTeam( attacker.GetTeam(), target.GetTeam() )
	float severityScale = (targetIsEnemy ? MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY : MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY)
	meleeAttackWeapon.DoMeleeHitConfirmation( severityScale )

	// Damage (server only)
	#if SERVER
		string weaponName = meleeAttackWeapon.GetWeaponClassName()

		int damageAmount     = meleeAttackWeapon.GetDamageAmountForArmorType( target.GetArmorType() )
		int damageScriptType = meleeAttackWeapon.GetWeaponDamageFlags()
		int damageType       = DMG_MELEE_ATTACK
		int damageSourceId   = (weaponName in eDamageSourceId ? eDamageSourceId[weaponName] : eDamageSourceId.damagedef_unknownBugIt)
		vector damageOrigin  = endPosition
		vector damageForce   = AnglesToForward( attacker.EyeAngles() ) * meleeAttackWeapon.GetWeaponDamageForce()

		if ( target.IsNPC() && target.CanBeGroundExecuted() )
		{
			damageAmount = target.GetHealth()
			damageScriptType = damageScriptType | DF_RAGDOLL
			damageForce = <0, 0, 0>
		}

		// (dw): I'm commenting this out because it's stateful and will stick around on the entity, even if that entity
		// doesn't die to this melee attack.
		//if ( IsHumanSized( target ) )
		//	target.SetContinueAnimatingAfterRagdoll( true )

		// int TEMP_targetHealthBefore         = target.GetHealth() // todo(dw): remove
		// bool TEMP_isTargetBleedingOutBefore = Bleedout_IsBleedingOut( target ) // todo(dw): remove

		table damageTable = {
			scriptType = meleeAttackWeapon.GetWeaponDamageFlags(),
			damageType = damageType,
			damageSourceId = damageSourceId,
			origin = damageOrigin,
			force = damageForce
		}
		target.TakeDamage( damageAmount, attacker, attacker, damageTable )
		attacker.TraceAttackToTriggers( damageAmount, attacker, attacker, damageTable, startPosition, endPosition, hitNormal )
	#endif

	// knockback
	{
		vector lookDirection    = attacker.GetViewForward()
		vector pushBackVelocity = lookDirection * MELEE_KNOCKBACK_SCALE

		if ( target.IsPlayer() || target.IsNPC() || target.IsPlayerDecoy() )
		{
			vector targetDirection = target.GetWorldSpaceCenter() - attacker.GetWorldSpaceCenter()
			if ( DotProduct( lookDirection, targetDirection ) < 0 )
				pushBackVelocity = -pushBackVelocity
		}

		if ( target.IsPlayer() )
		{
			target.KnockBack( pushBackVelocity, MELEE_KNOCKBACK_DURATION )
		}
		else if ( !IsWorldSpawn( target ) )
		{
			#if SERVER
				float pushbackScale = target.IsOnGround() ? 1.0 : 0.1
				PushEnt( target, pushBackVelocity * pushbackScale )
			#endif
		}

		// Must end the attack or the melee lunge (which is active during the attack) will cancel our the knock back
		attacker.PlayerMelee_EndAttack()

		vector attackerKnockBackVelocity = -pushBackVelocity
		bool isAttackingGround           = endPosition.z <= attacker.GetOrigin().z
		attackerKnockBackVelocity.z = 0.0
		attackerKnockBackVelocity *= 0.5
		if ( LengthSqr( attackerKnockBackVelocity ) > 0.0 && !isAttackingGround )
		{
			attacker.KnockBack( attackerKnockBackVelocity + attacker.GetVelocity(), 0.25 )
		}

		attacker.GrappleDetach()
	}
}
#endif


#if SERVER
void function CodeCallback_OnMeleeKilled( entity target )
{
	return
}
#endif


#if SERVER
void function CodeCallback_NPCMeleeChargedPlayerOrNPC( entity ent, var damageInfo )
{
	return
}
#endif


#if CLIENT
bool function ClientCodeCallback_ShowMeleePrompt( entity player )
{
	return false
}
#endif



///////////////////////
///////////////////////
//// Dev functions ////
///////////////////////
///////////////////////
#if SERVER && DEVELOPER
void function DEV_UpdatePlayerMeleeWeaponCosmetics( entity player, ItemFlavor unused )
{
	// TEMP COMMENT
	
	// if ( !IsLobby() )
	// 	SURVIVAL_TryGivePlayerDefaultMeleeWeapons( player )
}
#endif // SERVER


