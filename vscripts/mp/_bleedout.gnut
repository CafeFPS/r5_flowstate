//Bleed Out Mechanic Shared by several game modes.
global function Bleedout_Init
global function Bleedout_StartPlayerBleedout
global function Bleedout_AddCallback_OnPlayerStartBleedout
global function Bleedout_AddCallback_OnPlayerGiveFirstAid
global function Bleedout_ShouldAIMissBleedingPlayer

global function Bleedout_AddCallback_OnPlayerGotFirstAid // dump
global function Bleedout_GetBleedoutAttacker
global function Bleedout_GetBleedoutDamageInfo

global function Bleedout_CheckForTeamBleedout
global function Bleedout_AreThereAlivingMates

global table<string, string> EliminatedPlayers = {}

//CONFIGS
const bool LIFELINE_RGB_SHIELD = false

const asset FX_BLOODTRAIL = $"skit_blood_decal_LG"
const float BLEEDOUT_MAX_USE_DIST2_MOD = 64 * 64
const FX_DRONE_MEDIC_OPEN				= $"P_LL_med_drone_open"
const FX_DRONE_MEDIC_JET_CTR			= $"P_LL_med_drone_jet_ctr_loop"
const FX_DRONE_MEDIC_EYE				= $"P_LL_med_drone_eye"
const FX_DRONE_MEDIC_JET_LOOP			= $"P_LL_med_drone_jet_loop"

// r5 stuff
global function Bleedout_SetBleedoutEffects
global function Bleedout_IsPlayerGivingFirstAid
global function Bleedout_IsReviveButtonDown
global function Bleedout_IsReceivingFirstAid

struct
{
	table<entity,bool> isBleeding
	table<entity,bool> hasSelfRes
	table<entity, entity> IsGettingFirstAidFrom
	table<entity, entity> IsGivingFirstAidTo
	table<entity,entity> lastAttacker
	void functionref(entity, entity, var) Callback_OnPlayerStartBleedout
	void functionref(entity, entity, var) Callback_OnPlayerGiveFirstAid
	void functionref(entity, entity) Callback_OnPlayerGotFirstAid
	int firstAidAttemptID = 0 //The ID that identifies the first aid attempt. Used to distinguish between simultainous healing attempts on the client
} file

void function Bleedout_Init()
{
	RegisterSignal( "BleedOut_StopBleeding" )
	RegisterSignal( "BleedOut_OnRevive" )
	RegisterSignal( "BleedOut_OnStartDying" )
	RegisterSignal( "OnContinousUseStopped" )

	AddCallback_OnClientConnected( Bleedout_OnClientConnected )
	AddCallback_OnClientDisconnected( Bleedout_OnClientDisconnected )
	
	if(GameRules_GetGameMode() == SURVIVAL) //FIXME
		AddCallback_OnPlayerKilled( Bleedout_OnPlayerKilled )

	PrecacheParticleSystem( FX_BLOODTRAIL )
	PrecacheParticleSystem( $"P_drone_medic_shield_beam" )
	PrecacheParticleSystem( $"P_drone_medic_shield" )
	PrecacheParticleSystem( $"P_LL_med_drone_jet_loop" ) 
	PrecacheParticleSystem( $"P_LL_med_drone_eye" )
	PrecacheParticleSystem( $"P_LL_med_drone_jet_ctr_loop" )
	PrecacheParticleSystem($"P_drone_shield_hit_enemy")

	FlagInit( "BleedoutDebug", false )
	
}

void function Bleedout_SetBleedoutEffects( entity target )
{

}

bool function Bleedout_IsPlayerGivingFirstAid( entity player )
{
	return file.IsGivingFirstAidTo[player] != null
}

bool function Bleedout_IsReviveButtonDown( entity player )
{
	return player.UseButtonPressed()
}

bool function Bleedout_IsReceivingFirstAid( entity player )
{
	return IsPlayerGettingFirstAid( player )
}

void function Bleedout_OnClientConnected( entity player )
{
	file.isBleeding[ player ] <- false
	file.hasSelfRes[ player ] <- false
	file.IsGettingFirstAidFrom[ player ] <- null
	file.IsGivingFirstAidTo[ player ] <- null
	file.lastAttacker[ player ] <- svGlobal.worldspawn
}

void function Bleedout_OnClientDisconnected( entity player )
{
	delete file.isBleeding[ player ]
	delete file.hasSelfRes[ player ]
	delete file.IsGettingFirstAidFrom[ player ]
	delete file.IsGivingFirstAidTo[ player ]
	delete file.lastAttacker[ player ]
}

void function Bleedout_OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{
	thread Bleedout_CheckForTeamBleedout( victim )
}

void function Bleedout_AddCallback_OnPlayerStartBleedout( void functionref(entity, entity, var) callback ) //Bleedout_SetCallback_OnPlayerStartBleedout( void functionref(entity) callback )
{
	file.Callback_OnPlayerStartBleedout = callback
}

void function Bleedout_AddCallback_OnPlayerGiveFirstAid( void functionref(entity, entity, var) callback ) //Bleedout_SetCallback_OnPlayerGiveFirstAid( void functionref(entity) callback )
{
	file.Callback_OnPlayerGiveFirstAid = callback
}

void function Bleedout_StartPlayerBleedout( entity player, entity attacker )
{
	if(!IsValid(player) || !IsValid(attacker)) return
	
	//if the player is already bleeding don't restart bleeding logic.
	if ( file.isBleeding[ player ] )
		return

	player.Signal( "BleedOut_StopBleeding" )
	player.Signal( "BleedOut_OnStartDying" )

	file.lastAttacker[ player ] = attacker
	
	thread Bleedout_DeathProtection( player )
	
	if(GameRules_GetGameMode() != "fs_duckhunt")
		SetPlayerEliminated( player )
		
	player.SetPlayerNetInt( "bleedoutType", EquipmentSlot_GetEquipmentTier( player, "incapshield" ) )
	player.SetHealth( 100 )
	
	if( IsValid( attacker ) && attacker.IsPlayer() )
		EmitSoundOnEntityExceptToPlayer( player, attacker, "flesh_bulletimpact_downedshot_3p_vs_3p" )
	else
		EmitSoundOnEntity( player, "flesh_bulletimpact_downedshot_3p_vs_3p" )

	PlayBattleChatterLineToSpeakerAndTeam( player, "bc_imDown" )

	if ( IsValid( file.Callback_OnPlayerStartBleedout ) && !file.isBleeding[ player ] )
		file.Callback_OnPlayerStartBleedout( player, attacker, null )

	// thread BloodTrail( player )
	thread PlayerDying( player )
	thread EnablePlayerRes( player )
	
	//Start selfhealing thread if enabled.
	if ( Bleedout_GetSelfResEnabled( player ) )
		thread EnablePlayerSelfRes( player )
	
	if ( Bleedout_GetDeathOnTeamBleedout( player ) && GameRules_GetGameMode() != "fs_duckhunt" ) //FIXME
		thread Bleedout_CheckForTeamBleedout( player )

	TrackingVision_CreatePOI( eTrackingVisionNetworkedPOITypes.PLAYER_STARTBLEEDOUT, player, player.GetOrigin(), player.GetTeam(), player )

	thread Bleedout_FirstPersonAnim( player )
}

void function Bleedout_DeathProtection( entity player )
{
	if (IsValid(player))
		MakeInvincible(player)
	wait 1.05
	if (IsValid(player))
		ClearInvincible(player)
}

void function Bleedout_FirstPersonAnim( entity player ) // Is there a callback that will be called when a player touched ground?
{
	if(!IsValid(player)) return
		
	vector lastPlayerVel = < 0, 0, -99999 > // Play animation forcely at first
	bool hasPlayed = false

	HolsterAndDisableWeapons( player )

	while( IsValid(player) && file.isBleeding[ player ] )
	{

		if( player.IsOnGround() && lastPlayerVel.z <= -1000 || player.IsOnGround() && !hasPlayed )
		{
			thread function() : ( player )
			{
				player.SetVelocity( < 0, 0, 0 > )
				HolsterAndDisableWeapons( player )
				wait 1.0 // TODO: Find a function that can get animation duration
				DeployAndEnableWeapons( player )
			}()
			PlayFirstPersonAnimation( player, "ptpov_downed_transition" )
			hasPlayed = true
		}

		lastPlayerVel = player.GetVelocity()

		WaitFrame()
	}
}

void function PlayerDying( entity player )
{
	Assert( IsNewThread(), "Must be threaded off." )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "BleedOut_OnRevive" )
	player.EndSignal( "BleedOut_OnStartDying" )
	
	float bleedoutTime = Bleedout_GetBleedoutTime( player )
	bool forceHolster = Bleedout_GetForceWeaponHolster( player )
	
	array<int> ids = []
	ids.append( StatusEffect_AddEndless( player, eStatusEffect.move_slow, 0.25 ) )
	ids.append( StatusEffect_AddEndless( player, eStatusEffect.turn_slow, 0.3 ) )

	// if ( bleedoutTime > 0 )
	// 	ids.append( StatusEffect_AddEndless( player, eStatusEffect.bleedoutDOF, 1.0 ) )

	file.isBleeding[ player ] = true

	player.SetUseDoomedAnims(true)
	player.ForceCrouch()
	player.SetOneHandedWeaponUsageOn()
	BleedoutState_SetPlayerBleedoutState( player, BS_BLEEDING_OUT )

	float bleedoutEndTime = Time() + bleedoutTime

	entity bleedoutWp = CreateWaypoint_Bleedout( player, bleedoutEndTime )
	player.SetPlayerNetTime( "bleedoutEndTime", bleedoutEndTime )

	if ( forceHolster )
		StorePilotWeapons( player )

	int shieldTier = EquipmentSlot_GetEquipmentTier( player, "incapshield" )
	string oldWeapon = ""
	if ( shieldTier > 0 )
	{
		entity currentWeapon = player.GetNormalWeapon( WEAPON_INVENTORY_SLOT_PRIMARY_2 )
		if ( IsValid( currentWeapon ) )
		{
			oldWeapon = currentWeapon.GetWeaponClassName()
			player.TakeWeaponByEntNow( currentWeapon )
		}

		entity incapShield = player.GiveWeapon( "mp_weapon_incap_shield", WEAPON_INVENTORY_SLOT_PRIMARY_2 )
		incapShield.SetScriptInt0( IncapShield_GetMaxShieldHealthFromTier( shieldTier ) )

		player.SetActiveWeaponBySlot( eActiveInventorySlot.mainHand, WEAPON_INVENTORY_SLOT_PRIMARY_2 )
	}

	OnThreadEnd(
	function() : ( player, ids, forceHolster, bleedoutWp, oldWeapon )
		{
			if ( IsValid( player ) )
			{
				foreach ( id in ids )
					StatusEffect_Stop( player, id )

				file.isBleeding[ player ] = false
				file.lastAttacker[ player ] = svGlobal.worldspawn

				player.TakeWeaponNow( "mp_weapon_incap_shield" )
				if ( oldWeapon != "" )
					player.GiveWeapon( oldWeapon, WEAPON_INVENTORY_SLOT_PRIMARY_2 )

				player.SetPlayerNetTime( "bleedoutEndTime", 0.0 )

				player.UnforceCrouch()
				player.SetUseDoomedAnims(false)
				player.SetOneHandedWeaponUsageOff()
				//Remote_CallFunction_NonReplay( player, "ServerCallback_BLEEDOUT_PlayerRevivedDOF" )

				BleedoutState_SetPlayerBleedoutState( player, BS_NOT_BLEEDING_OUT )

				DeleteWaypoint_Safe( player, bleedoutWp )

				if ( forceHolster )
					RetrievePilotWeapons( player )

				//Hide wounded icon for wounded player's allies
				int woundedPlayerEHandle = player.GetEncodedEHandle()
				array<entity> teamPlayers = GetPlayerArrayOfTeam( player.GetTeam() )
				foreach ( entity teamPlayer in teamPlayers )
				{
					if ( teamPlayer == player )
						continue
					Remote_CallFunction_NonReplay( teamPlayer, "ServerCallback_BLEEDOUT_HideWoundedMarker", woundedPlayerEHandle )
				}
			}
		}
	)

	//if ( bleedoutTime > 0 )
	//	StatusEffect_AddTimed( player, eStatusEffect.bleedoutDOF, 1.0, bleedoutTime, 0.0 )
		//Remote_CallFunction_NonReplay( player, "ServerCallback_BLEEDOUT_StartDyingDOF", bleedoutTime )

	//Show wounded icon for wounded player's allies
	int woundedPlayerEHandle = player.GetEncodedEHandle()
	array<entity> teamPlayers = GetPlayerArrayOfTeam( player.GetTeam() )
	foreach ( entity teamPlayer in teamPlayers )
	{
		if ( teamPlayer == player )
			continue

		Remote_CallFunction_NonReplay( teamPlayer, "ServerCallback_BLEEDOUT_ShowWoundedMarker", woundedPlayerEHandle, Time(), Time() + bleedoutTime )
	}

	if ( bleedoutTime > 0 )
		wait bleedoutTime
	else
		WaitForever()

	PlayerDiesFromBleedout( player, file.lastAttacker[ player ] )
}

void function EnablePlayerRes( entity player )
{
	Assert( IsNewThread(), "Must be threaded off." )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "BleedOut_OnStartDying" )
	player.EndSignal( "BleedOut_OnRevive" )

	OnThreadEnd(
	function() : ( player )
		{
			if ( IsValid( player ) )
			{
				player.UnsetUsable()
				Highlight_ClearFriendlyHighlight( player )
			}
		}
	)

	while ( true )
	{
		//If the player is not currently being treated or is self healing. (Team healing should always override self-healing)
		if (  !IsPlayerGettingFirstAid( player ) || IsPlayerSelfHealing( player ) )
		{
			// player.SetUsableByGroup( "pilot" )
			// player.SetUsePrompts( "#BLEEDOUT_USE_TEAMMATE_RES", "#BLEEDOUT_USE_TEAMMATE_RES_PC" )
			player.SetUsableValue( USABLE_BY_ALL | USABLE_CUSTOM_HINTS )

			entity playerUser = expect entity ( player.WaitSignal( "OnPlayerUse" ).player )

			player.UnsetUsable()

			bool tryingToRevive = (IsFriendlyTeam( playerUser.GetTeam(), player.GetTeam() ) || IsRecruitMode())

			if ( tryingToRevive )
			{
				//Player can only res other players if they are not bleeding out themselves.
				if ( !file.isBleeding[ playerUser ] && ( !IsPlayerGettingFirstAid( player ) || IsPlayerSelfHealing( player ) ) )
					waitthread PlayerAttemptRes( playerUser, player )
			}
			else
			{
				player.e.markedForExecutionDeath = true
				if ( TryStartSyncedMelee( playerUser, player ) )
				{
					playerUser.WaitSignal( "SyncedMeleeOver" )
				}
			}
		}
		else
		{
			WaitFrame()
		}
	}
}

void function EnablePlayerSelfRes( entity player )
{
	Assert( IsNewThread(), "Must be threaded off." )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "BleedOut_OnStartDying" )
	player.EndSignal( "BleedOut_OnRevive" )

	while ( true )
	{
		//if (  !IsPlayerGettingFirstAid( player ) )
		//	MessageToPlayer( player, eEventNotifications.BLEEDOUT_SelfHealPrompt )

		if ( player.UseButtonPressed() && !IsPlayerGettingFirstAid( player ) )
		{
		//	MessageToPlayer( player, eEventNotifications.Clear )
			waitthread PlayerAttemptRes( player, player )
		}

		WaitFrame()
	}
}

void function ShieldRGB(entity medicWall)
{
//by Colombia
	while(IsValid(medicWall))
	{
		medicWall.kv.rendercolor = RandomInt(255) + " " + RandomInt(255) + " " + RandomInt(255)
		WaitFrame()
	}
}

void function PlayDocAnims(entity droneMedic, entity medicWall)
//by Colombia
{
	droneMedic.EndSignal( "OnDestroy" )
	
	int fxID_VENT   = droneMedic.LookupAttachment( "VENT_BOT" )
	int fxID_EYE    = droneMedic.LookupAttachment( "EYEGLOW" )
	int fxID_RF     = droneMedic.LookupAttachment( "VENT_RF" )
	int fxID_LF     = droneMedic.LookupAttachment( "VENT_LF" )
	int fxID_RR     = droneMedic.LookupAttachment( "VENT_RR" )
	int fxID_LR     = droneMedic.LookupAttachment( "VENT_LR" )

	//drone medic beam fx, still not 100% accurate
	entity owner = droneMedic.GetOwner()
	entity beamfx = StartParticleEffectOnEntity_ReturnEntity( droneMedic, GetParticleSystemIndex( $"P_drone_medic_shield_beam"), FX_PATTACH_POINT_FOLLOW, fxID_EYE)
	beamfx.DisableHibernation()
	// EffectSetControlPointVector( beamfx, 0, droneMedic.GetOrigin()) //beam start point
	EffectSetControlPointVector( beamfx, 1, owner.GetOrigin() + <0,0,45> + owner.GetForwardVector()*70 + owner.GetRightVector()*30) //beam endpoint
	
	StartParticleEffectOnEntity_ReturnEntity( droneMedic, GetParticleSystemIndex( FX_DRONE_MEDIC_EYE ), FX_PATTACH_POINT_FOLLOW, fxID_EYE )
	StartParticleEffectOnEntity_ReturnEntity( droneMedic, GetParticleSystemIndex( FX_DRONE_MEDIC_JET_CTR ), FX_PATTACH_POINT_FOLLOW, fxID_VENT )
	StartParticleEffectOnEntity_ReturnEntity( droneMedic, GetParticleSystemIndex( FX_DRONE_MEDIC_JET_CTR ), FX_PATTACH_POINT_FOLLOW, fxID_VENT )
	StartParticleEffectOnEntity_ReturnEntity( droneMedic, GetParticleSystemIndex( FX_DRONE_MEDIC_JET_LOOP ), FX_PATTACH_POINT_FOLLOW, fxID_RF )
	StartParticleEffectOnEntity_ReturnEntity( droneMedic, GetParticleSystemIndex( FX_DRONE_MEDIC_JET_LOOP ), FX_PATTACH_POINT_FOLLOW, fxID_LF )
	StartParticleEffectOnEntity_ReturnEntity( droneMedic, GetParticleSystemIndex( FX_DRONE_MEDIC_JET_LOOP ), FX_PATTACH_POINT_FOLLOW, fxID_RR )
	StartParticleEffectOnEntity_ReturnEntity( droneMedic, GetParticleSystemIndex( FX_DRONE_MEDIC_JET_LOOP ), FX_PATTACH_POINT_FOLLOW, fxID_LR )
	
	// Anim
	float animTime = droneMedic.GetSequenceDuration( "lifeline_drone_revive" )
	PlayAnim(droneMedic, "lifeline_drone_revive")
	wait animTime-0.2
	if(IsValid(beamfx)) beamfx.Destroy()
	wait 0.2
}

void function PlayerAttemptRes( entity playerHealer, entity playerToRes )
//by Colombia
{
	Assert( IsNewThread(), "Must be threaded off." )
	playerToRes.EndSignal( "OnDeath" )
	playerHealer.EndSignal( "OnDeath" )
	playerHealer.EndSignal( "OnContinousUseStopped" )

	HolsterAndDisableWeapons( playerHealer )

	playerHealer.MovementDisable()
	playerToRes.MovementDisable()

	bool selfRes = playerHealer == playerToRes

	ItemFlavor toResCharacter = LoadoutSlot_GetItemFlavor( ToEHI( playerToRes ), Loadout_CharacterClass() )
	asset toResPlayerSettings = CharacterClass_GetSetFile( toResCharacter )
	string toResRigWeight = GetGlobalSettingsString( toResPlayerSettings, "bodyModelRigWeight" )
	// player.GetPlayerSettingString( "bodyModelRigWeight" )
	string healerAnimation
	string toResAnimation
	LoadoutEntry characterSlot = Loadout_CharacterClass()

	ItemFlavor character = LoadoutSlot_WaitForItemFlavor( ToEHI( playerHealer ), characterSlot ) // this sometimes waits forever
	string characterRef = ItemFlavor_GetHumanReadableRef( character )
	entity medicWall
	entity docdrone
	
	switch( characterRef )
	{
		case "character_lifeline":
			healerAnimation = "mp_pt_light_revive_quick_healthy"
			toResAnimation = "Pilot_doomed_revive_quick_injured"
			
			vector angles = AnglesCompose( playerHealer.GetAngles(), <0,180,0> )
			medicWall = CreatePropDynamic( $"mdl/fx/medic_shield_wall.rmdl", playerHealer.GetOrigin() + <0,0,0> + playerHealer.GetForwardVector()*20 + playerHealer.GetRightVector()*30 , angles, SOLID_VPHYSICS )
			medicWall.kv.contents = (CONTENTS_WINDOW)
			medicWall.kv.rendercolor = "64 248 250 255"//Should look same color to all players
			if(LIFELINE_RGB_SHIELD)
				thread ShieldRGB(medicWall)
			medicWall.kv.modelscale = 1
			medicWall.kv.CollisionGroup = TRACE_COLLISION_GROUP_BLOCK_WEAPONS_AND_PHYSICS
			medicWall.SetPassThroughFlags( PTF_ADDS_MODS | PTF_NO_DMG_ON_PASS_THROUGH )
			medicWall.SetBlocksRadiusDamage( true )
			medicWall.SetTakeDamageType( DAMAGE_NO)
			medicWall.SetDamageNotifications( true )
			if(!LIFELINE_RGB_SHIELD)
				medicWall.Hide()
			//medicWall.SetMaxHealth( 350 )
			//medicWall.SetHealth( 350 )
			
			EmitSoundOnEntity(medicWall, "Lifeline_ReviveShield_Sustain_3P")
			
			docdrone = CreatePropDynamic( $"mdl/props/lifeline_drone/lifeline_drone.rmdl", medicWall.GetOrigin() + <0,0,0>, angles, SOLID_VPHYSICS )
			docdrone.SetOwner(playerHealer)
			
			thread PlayDocAnims(docdrone, medicWall) 
			
			if(!LIFELINE_RGB_SHIELD)
				{
				entity shieldfx2 = StartParticleEffectInWorld_ReturnEntity( GetParticleSystemIndex($"P_drone_medic_shield"), medicWall.GetOrigin(), playerHealer.GetAngles() )
				shieldfx2.SetParent(medicWall)
				}
				
			SetVisibleEntitiesInConeQueriableEnabled( medicWall, true )			
			SetTeam( medicWall, TEAM_BOTH )
			medicWall.SetPassThroughThickness( 0 )
			medicWall.SetPassThroughDirection( -0.30 )	
				break
		case "character_wattson":
			healerAnimation = "Pilot_doomed_revive_shock_healthy"
			toResAnimation = "Pilot_doomed_revive_shock_injured"
				break
		default:
			healerAnimation = "Pilot_doomed_revive_healthy"
			toResAnimation = "Pilot_doomed_revive_injured"
	}


	if ( selfRes )
		healerAnimation = "mp_pt_" + toResRigWeight + "_self_revive_crouch"
	
	float playbackRate = 1.0
	
	
	float firstAidTime = playerHealer.GetSequenceDuration( healerAnimation )
	
	if(GameRules_GetGameMode() == "fs_duckhunt")
	{
		playbackRate = 1.35
		firstAidTime = firstAidTime*0.65
	}
	
	float firstAidHealPercent = Bleedout_GetFirstAidHealPercent( playerHealer )

	float endTime = Time() + firstAidTime

	int playerEHandle = playerToRes.GetEncodedEHandle()
	int healerEHandle = playerHealer.GetEncodedEHandle()
	int attemptID = GetNewFirstAidAttemptID()

	Remote_CallFunction_NonReplay( playerToRes, "ServerCallback_BLEEDOUT_StartFirstAidProgressBar", endTime, playerEHandle, healerEHandle, attemptID )
	Remote_CallFunction_NonReplay( playerHealer, "ServerCallback_BLEEDOUT_StartFirstAidProgressBar", endTime, playerEHandle, healerEHandle, attemptID )
	file.IsGettingFirstAidFrom[ playerToRes ] = playerHealer
	file.IsGivingFirstAidTo[ playerHealer ] = playerToRes

	playerToRes.Signal( "BleedOut_OnReviveStart" )

	playerToRes.SetPlayerNetEnt( "revivePlayerHealer", playerHealer )
	playerToRes.SetPlayerNetTime( "reviveEndTime", Time() + firstAidTime )
	
	OnThreadEnd(
	function() : ( playerHealer, playerToRes, attemptID, medicWall, characterRef, docdrone )
		{
			playerToRes.SetPlayerNetEnt( "revivePlayerHealer", null )
			playerToRes.SetPlayerNetTime( "reviveEndTime", 0.0 )

	
			if ( IsValid( playerHealer ) )
			{
				switch( characterRef )
					{
					case "character_lifeline":
						medicWall.Destroy()
						docdrone.Destroy()
					}
				file.IsGivingFirstAidTo[ playerHealer ] = null
				DestroyPlayAnimationEntityBlocker( playerHealer )
				playerHealer.Anim_Stop()
				playerHealer.ClearParent()
				ClearPlayerAnimViewEntity( playerHealer )
				DeployAndEnableWeapons( playerHealer )
				playerHealer.MovementEnable()
				Remote_CallFunction_NonReplay( playerHealer, "ServerCallback_BLEEDOUT_StopFirstAidProgressBar", attemptID )
			}

			if ( IsValid( playerToRes ) )
			{
				file.IsGettingFirstAidFrom[ playerToRes ] = null
				DestroyPlayAnimationEntityBlocker( playerToRes )
				playerToRes.Anim_Stop()
				playerToRes.ClearParent()
				playerToRes.SnapEyesToFeet()
				ClearPlayerAnimViewEntity( playerToRes )
				playerToRes.MovementEnable()
				Remote_CallFunction_NonReplay( playerToRes, "ServerCallback_BLEEDOUT_StopFirstAidProgressBar", attemptID )

				if ( !file.isBleeding[ playerToRes ] )
				{
					// hack
					thread function() : ( playerToRes )
					{
						if(!IsValid(playerToRes)) return
						playerToRes.ForceStand()
						WaitFrame()
						if(!IsValid(playerToRes)) return
						playerToRes.UnforceStand()
						
						if(GameRules_GetGameMode() == "fs_duckhunt")
						{
							Highlight_SetFriendlyHighlight( playerToRes, "prophunt_teammate" )
							GivePassive(playerToRes, ePassives.PAS_PILOT_BLOOD)
						}
						BleedoutState_SetPlayerBleedoutState( playerToRes, BS_NOT_BLEEDING_OUT )
					}()
				}
			}
		}
	)

	CreatePlayAnimationEntityBlocker( playerHealer, false )
	CreatePlayAnimationEntityBlocker( playerToRes, false )

	FirstPersonSequenceStruct reviverSequence
	reviverSequence.blendTime = 0.25
	reviverSequence.attachment = "ref"
	reviverSequence.thirdPersonAnim = healerAnimation
	reviverSequence.firstPersonAnim = ""
	reviverSequence.useAnimatedRefAttachment = false
	reviverSequence.thirdPersonCameraAttachments = ["VDU"]
	reviverSequence.thirdPersonCameraVisibilityChecks = true
	reviverSequence.playerPushable = true
	reviverSequence.snapPlayerFeetToEyes = false
	
	FirstPersonSequenceStruct toResSequence
	toResSequence.blendTime = 0.25
	toResSequence.attachment = "ref"
	toResSequence.thirdPersonAnim = toResAnimation
	toResSequence.firstPersonAnim = ""
	toResSequence.useAnimatedRefAttachment = true
	toResSequence.thirdPersonCameraAttachments = ["VDU"]
	toResSequence.thirdPersonCameraVisibilityChecks = true
	toResSequence.noParent = false

	if ( selfRes )
	{
		reviverSequence.noParent = true
		reviverSequence.useAnimatedRefAttachment = false
	}
	
	thread FirstPersonSequence( reviverSequence, playerHealer )
	
	if ( !selfRes )
	{
		PlayBattleChatterLineToSpeakerAndTeam( playerHealer, "bc_revivingPlayer" )
		thread FirstPersonSequence( toResSequence, playerToRes, playerHealer )
	}
	
	if(playbackRate != 1.0)
	{
		playerHealer.Anim_SetPlaybackRate(playbackRate)
		playerToRes.Anim_SetPlaybackRate(playbackRate)
	}
	waitthread TrackContinuousUse( playerHealer, playerToRes, firstAidTime, true )

	//Heal player health
	playerToRes.SetHealth( playerToRes.GetMaxHealth() * firstAidHealPercent )
	file.isBleeding[ playerToRes ] = false
	file.lastAttacker[ playerToRes ] = svGlobal.worldspawn
	if ( IsPilotEliminationBased() && GameRules_GetGameMode() != "fs_duckhunt" )
		ClearPlayerEliminated( playerToRes )

	if ( IsValid( file.Callback_OnPlayerGiveFirstAid ) )
	{
		//Do not run this callback if player is self healing.
		if ( playerHealer != playerToRes )
			file.Callback_OnPlayerGiveFirstAid( playerHealer, null, null ) // 99% chance this will crash
	}

	if ( IsValid( file.Callback_OnPlayerGotFirstAid ) )
		file.Callback_OnPlayerGotFirstAid( playerToRes, playerHealer )

	if ( selfRes )
    {
		playerToRes.SetPlayerNetBool( "usedSelfRevive", true )
        Inventory_SetPlayerEquipment(playerToRes, "incapshield_pickup_lv3", "incapshield")
    }
	else
	{
		if ( GetCurrentPlaylistVarBool( "thank_for_revive_enabled", true ) )
			Remote_CallFunction_NonReplay( playerToRes, "ServerCallback_PromptSayThanks", playerHealer )
	}

	playerToRes.Signal( "BleedOut_OnRevive" )
	playerHealer.p.revivesGiven++
}

void function BloodTrail( entity player )
{
	player.EndSignal( "BleedOut_StopBleeding" )
	player.EndSignal( "BleedOut_OnRevive" )
	player.EndSignal( "OnDeath")

	while ( true )
	{
		float interval = RandomFloatRange( 0.25, 0.5 )
		PlayFXOnEntity( FX_BLOODTRAIL, player )
		wait interval
	}
}

void function PlayerDiesFromBleedout( entity player, entity attacker )
{
	if ( IsValid( attacker ) )
	{
		try{
			player.Die( attacker, attacker, { damageSourceId = eDamageSourceId.bleedout } )
		//player.BecomeRagdoll( Vector(0,0,0), false )
		}catch(e420)
		{
			printt("Was not fixed, debug this asap")
		}
	}
	else
	{
		try{
			player.Die( svGlobal.worldspawn, svGlobal.worldspawn, { damageSourceId = eDamageSourceId.bleedout } )
		}catch(e420)
		{
			printt("Was not fixed, debug this asap 2")
		}
		//player.BecomeRagdoll( Vector(0,0,0), false )
	}


}

//This function checks to see if all players on a team are dead or bleeding out.
//If all the players are dead/bleeding out, it kills the surviving team players.
void function Bleedout_CheckForTeamBleedout( entity player, entity excludePlayer = null )
{
	if( Flag( "BleedoutDebug" ) )
		return

	int team = player.GetTeam()

	if( !Bleedout_AreThereAlivingMates( team, player ) )
		foreach( targetPlayer in GetPlayerArrayOfTeam_Alive( team ) )
			if( targetPlayer != excludePlayer )
				PlayerDiesFromBleedout( targetPlayer, file.lastAttacker[ targetPlayer ] )
}

bool function Bleedout_AreThereAlivingMates( int team, entity excludePlayer = null )
{
	if( Flag( "BleedoutDebug" ) )
		return true

	foreach ( entity teamPlayer in GetPlayerArrayOfTeam_Alive( team ) )
	{
		if( Bleedout_GetSelfResEnabled( teamPlayer ) )
			file.hasSelfRes[ teamPlayer ] = true
		else
			file.hasSelfRes[ teamPlayer ] = false

		if ( !Bleedout_IsBleedingOut( teamPlayer ) && teamPlayer != excludePlayer || file.hasSelfRes[ teamPlayer ] )
			return true
	}

	return false
}

bool function Bleedout_ShouldAIMissBleedingPlayer( entity player )
{
	//If the player is not bleeding
	if ( !file.isBleeding[ player ] )
		return false

	//If the bleedout settings don't affect AI accuracy.
	if ( !Bleedout_ShouldAIMissPlayer( player ) )
		return false

	return true
}

bool function IsPlayerGettingFirstAid( entity player )
{
	return file.IsGettingFirstAidFrom[ player ] != null
}

bool function IsPlayerSelfHealing( entity player )
{
	return file.IsGettingFirstAidFrom[ player ] == player
}

//////////////
//Utilities
//////////////
void function TrackContinuousUse( entity player, entity useTarget, float useTime, bool doRequireUseButtonHeld )
{
	player.EndSignal( "OnDeath" )
	useTarget.EndSignal( "OnDeath" )
	useTarget.EndSignal( "OnDestroy" )

	table result = {}
	result.success <- false

	float maxDist2 = DistanceSqr( player.GetOrigin(), useTarget.GetOrigin() ) + BLEEDOUT_MAX_USE_DIST2_MOD

	OnThreadEnd
	(
		function() : ( player, result )
		{
			if ( !result.success )
			{
				player.Signal( "OnContinousUseStopped" )
			}
		}
	)

	float startTime = Time()
	while ( Time() < startTime + useTime && (!doRequireUseButtonHeld || player.UseButtonPressed()) && !player.IsPhaseShifted() && DistanceSqr( player.GetOrigin(), useTarget.GetOrigin() ) <= maxDist2 )
		WaitFrame()

	if ( ( !doRequireUseButtonHeld || player.UseButtonPressed() ) && DistanceSqr( player.GetOrigin(), useTarget.GetOrigin() ) <= maxDist2  )
		result.success = true
}

int function GetNewFirstAidAttemptID()
{
	file.firstAidAttemptID += 1
	return file.firstAidAttemptID
}

// dump functions

void function Bleedout_AddCallback_OnPlayerGotFirstAid( void functionref( entity injured, entity healer ) callback )
{
	file.Callback_OnPlayerGotFirstAid = callback
}

entity function Bleedout_GetBleedoutAttacker( entity victim )
{
	return file.lastAttacker[victim]
}

ScriptDamageInfoClone function Bleedout_GetBleedoutDamageInfo( entity victim )
{
	ScriptDamageInfoClone damageInfo
	return damageInfo
}
