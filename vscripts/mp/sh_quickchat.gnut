global function ShQuickchat_Init
#if CLIENT
global function AddCallback_OnQuickchatEvent
global function Quickchat
global function QuickchatToLivingAndDead
global function HandleBroadcastCommsAction
global function ServerToClient_BroadcastCommsActionToTeam
global function GetChatTitleColorForPlayer
global function GetMenuOptionTextForCommsAction
global function GetShortTextForCommsAction
global function GetDefaultIconForCommsAction
global function GetPingAssetForCommsAction
global function ShouldMuteCommsActionForCooldown
global function SetCommsDialogueEnabled
global function PlaySoundForCommsAction
#endif // CLIENT

#if SERVER
global function HandleBroadcastCommsAction
#endif

#if DEVELOPER
global function DEV_ReloadCommsTable
#endif // DEVELOPER

global enum eCommsFlags
{
	NONE = 0,

	FORCE_URGENT = (1 << 0),
	FORCE_FAR = (1 << 1),
	SILENCE = (1 << 2),
	INCLUDE_DEAD = (1 << 3),

	_flagCount = 4
}

global struct CommsAction
{
	int index

	string menuText
	string shortText
	string chatText

	string aliasSubname
	bool   hasCalm
	bool   hasCalmFar
	bool   hasUrgent
	bool   hasUrgentFar
	string subEvent
	string flavorEvent

	asset defaultIcon
	asset pingAsset
}

global struct CommsOptions
{
	bool isFirstPerson
	bool isFar
	bool isUrgent
	bool pauseQueue
}

struct
{
	bool                    quickchatInitialized = false
	table<int, CommsAction> actions
	#if CLIENT
		bool  commsDialogueEnabled = true
		float flavorDebounceTime = 120.0 //
		float flavorGlobalDebounceTime = 30.0 //
    #endif // CLIENT
	table< int, array<void functionref( entity player, int eventId, entity subjectEnt )> >    onQuickchatCallbacks
} file

void function LoadCommsActionsFromDatatable()
{
	var dt = GetDataTable( $"datatable/comms_actions.rpak" )

	int col_featureFlag  = GetDataTableColumnByName( dt, "featureFlag" )
	int col_event        = GetDataTableColumnByName( dt, "event" )
	int col_menuText     = GetDataTableColumnByName( dt, "menuText" )
	int col_shortText    = GetDataTableColumnByName( dt, "shortText" )
	int col_chatText     = GetDataTableColumnByName( dt, "chatText" )
	int col_aliasSubname = GetDataTableColumnByName( dt, "aliasSubname" )
	int col_hasCalm      = GetDataTableColumnByName( dt, "hasCalm" )
	int col_hasCalmFar   = GetDataTableColumnByName( dt, "hasCalmFar" )
	int col_hasUrgent    = GetDataTableColumnByName( dt, "hasUrgent" )
	int col_hasUrgentFar = GetDataTableColumnByName( dt, "hasUrgentFar" )
	int col_subEvent     = GetDataTableColumnByName( dt, "subEvent" )
	int col_flavorEvent  = GetDataTableColumnByName( dt, "flavorEvent" )
	int col_defaultIcon  = GetDataTableColumnByName( dt, "defaultIcon" )
	int col_pingAsset    = GetDataTableColumnByName( dt, "pingAsset" )

	for ( int row = 0; row < GetDatatableRowCount( dt ); row++ )
	{
		string commsActionName = GetDataTableString( dt, row, col_event )

		string featureFlagRef = GetDataTableString( dt, row, col_featureFlag )
		if ( featureFlagRef != "" && !GetFeatureFlagByString( featureFlagRef ) )
		{
			//printf( "Skipping comms action %s because feature flag %s is off.", commsActionName, featureFlagRef )
			continue
		}

		asset pingAsset = GetDataTableAsset( dt, row, col_pingAsset )
		if ( pingAsset != $"" )
			RegisterItemFlavorFromSettingsAsset( pingAsset )

			int commsAction = eCommsAction[commsActionName]

			CommsAction action
			action.menuText = GetDataTableString( dt, row, col_menuText )
			action.shortText = GetDataTableString( dt, row, col_shortText )
			action.chatText = GetDataTableString( dt, row, col_chatText )
			action.aliasSubname = GetDataTableString( dt, row, col_aliasSubname )
			action.hasCalm = GetDataTableBool( dt, row, col_hasCalm )
			action.hasCalmFar = GetDataTableBool( dt, row, col_hasCalmFar )
			action.hasUrgent = GetDataTableBool( dt, row, col_hasUrgent )
			action.hasUrgentFar = GetDataTableBool( dt, row, col_hasUrgentFar )
			action.subEvent = GetDataTableString( dt, row, col_subEvent )
			action.flavorEvent = GetDataTableString( dt, row, col_flavorEvent )
			action.defaultIcon = GetDataTableAsset( dt, row, col_defaultIcon )
			action.pingAsset = pingAsset
			action.index = commsAction

			file.actions[commsAction] <- action
	}
}


void function RegisterCustomComs()
{
	// ammo
	RegisterCustomCom( eCommsAction.PING_AMMO_SNIPER,           "ping_foundAmmoSniper")
	RegisterCustomCom( eCommsAction.INVENTORY_NEED_AMMO_SNIPER, "ping_needAmmoSniper")

	// weapons
	RegisterCustomCom( eCommsAction.PING_WEAPON_VOLT,          "ping_foundVoltSmg")
	RegisterCustomCom( eCommsAction.PING_WEAPON_SMART_PISTOL,  "ping_foundPistol")
	RegisterCustomCom( eCommsAction.PING_WEAPON_SENTINEL,      "ping_foundSentinel")

    // npcs

	asset icon = $"rui/hud/ping/icon_ping_enemy"
	asset iconasset = $"settings/itemflav/ping/ping_enemy.rpak"
	string chattext = "#PING_ENEMY_SPOTTED_GENERAL"
	string shorttext = "#PROMPT_PING_ENEMY_SPOTTED_GENERAL_SHORT"
	string menutext = "#PROMPT_PING_ENEMY_SPOTTED_GENERAL"

	// creatures
	RegisterCustomCom( eCommsAction.PING_ENEMY_NPC_SPIDER, "ping_spotSpider", icon, iconasset, chattext, shorttext, menutext)
	RegisterCustomCom( eCommsAction.PING_ENEMY_NPC_PROWLER, "ping_spotProwler", icon, iconasset, chattext, shorttext, menutext)
	RegisterCustomCom( eCommsAction.PING_ENEMY_NPC_GOLIATH, "ping_spotGoliath", icon, iconasset, chattext, shorttext, menutext)

	// robots
	RegisterCustomCom( eCommsAction.PING_ENEMY_NPC_DRONE, "ping_spotDrone", icon, iconasset, chattext, shorttext, menutext )
	RegisterCustomCom( eCommsAction.PING_ENEMY_NPC_TITAN, "ping_spotTitan", icon, iconasset, chattext, shorttext, menutext )
	RegisterCustomCom( eCommsAction.PING_ENEMY_NPC_REAPER, "ping_spotReaper", icon, iconasset, chattext, shorttext, menutext )
	RegisterCustomCom( eCommsAction.PING_ENEMY_NPC_SPECTRE, "ping_spotSpectre", icon, iconasset, chattext, shorttext, menutext )
	RegisterCustomCom( eCommsAction.PING_ENEMY_NPC_TICK, "ping_spotTick", icon, iconasset, chattext, shorttext, menutext )
}

void function RegisterCustomCom( int index, string alias, asset icon = $"", asset pingAsset = $"", string chattext = "#PING_LOOT", string shorttext = "", string menutext = "")
{
	if(index in file.actions)
	    return

	if(pingAsset != $"")
	    RegisterItemFlavorFromSettingsAsset( pingAsset )

	CommsAction action
	action.chatText = chattext
	action.menuText = menutext
	action.shortText = shorttext
	action.chatText = chattext
	action.defaultIcon = icon
	action.aliasSubname = alias
	action.hasCalm = true
	action.hasUrgent = true
	action.hasCalmFar = false
	action.hasUrgentFar = false
	action.index = index

	file.actions[index] <- action
}

void function ShQuickchat_Init()
{
	AddCallback_RegisterRootItemFlavors( LoadCommsActionsFromDatatable )
	RegisterCustomComs()

	#if SERVER
		AddClientCommandCallback( "ClientCommand_Quickchat", ClientCommand_Quickchat )
	#endif // SERVER

	#if CLIENT
		file.flavorDebounceTime = GetCurrentPlaylistVarFloat( "comms_actions_flavor_debounce_time", 150.0 )
		file.flavorGlobalDebounceTime = GetCurrentPlaylistVarFloat( "comms_actions_flavor_global_debounce_time", 90.0 )
	#endif

	file.quickchatInitialized = true
}


void function DEV_ReloadCommsTable()
{
	file.actions.clear()
	LoadCommsActionsFromDatatable()
	RegisterCustomComs()
}

#if CLIENT
void function Quickchat( entity player, int index, entity subject = null )
{
	if ( !file.quickchatInitialized )
		return

	string add = ""
	if ( IsValid( subject ) )
	{
		add = " " + eCommsFlags.NONE + " " + subject.GetEncodedEHandle()
	}

	player.ClientCommand( "ClientCommand_Quickchat " + index + add )
}

void function QuickchatToLivingAndDead( entity player, int index, entity subject = null )
{
	if ( !file.quickchatInitialized )
		return

	string add = ""
	if ( subject != null )
	{
		add = " " + subject.GetEncodedEHandle()
	}

	player.ClientCommand( "ClientCommand_Quickchat " + index + " " + eCommsFlags.INCLUDE_DEAD + add )
}

vector function GetChatTitleColorForPlayer( entity player )
{
	entity localPlayer = GetLocalClientPlayer()
	if ( player == localPlayer )
		return OBITUARY_COLOR_LOCALPLAYER
	if ( IsPartyMember( player ) )
		return OBITUARY_COLOR_PARTY

	if ( localPlayer.GetTeam() == player.GetTeam() )
		return OBITUARY_COLOR_FRIENDLY

	return OBITUARY_COLOR_ENEMY
}

table< entity, table<int, float> > s_playerToActionTimesMap
void function SetPlayerLastSaid( entity player, int actionIndex )
{
	if ( !(player in s_playerToActionTimesMap) )
		s_playerToActionTimesMap[player] <- {}
	if ( !(actionIndex in s_playerToActionTimesMap[player]) )
		s_playerToActionTimesMap[player][actionIndex] <- 0.0

	s_playerToActionTimesMap[player][actionIndex] = Time()
}

float function GetPlayerLastSaid( entity player, int actionIndex )
{
	float baseline = 0.0
	if ( player in s_playerToActionTimesMap )
	{
		if ( actionIndex in s_playerToActionTimesMap[player] )
			baseline = s_playerToActionTimesMap[player][actionIndex]
	}

	float result = (Time() - baseline)
	return result
}

array<string> function GetSubjectNamesForCommsAction( int commsAction, entity subjectEnt )
{
	if ( !IsValid( subjectEnt ) )
		return [""]

	if ( subjectEnt.IsPlayer() )
		return [subjectEnt.GetPlayerName()]

	switch ( subjectEnt.GetNetworkedClassName() )
	{
		case "prop_survival":
		{
			LootData ld = SURVIVAL_Loot_GetLootDataByIndex( subjectEnt.GetSurvivalInt() )
			return [ld.pickupString]
		}

		case "weaponx":
			string weaponClassName = subjectEnt.GetWeaponClassName()
			if ( file.actions[commsAction].chatText == "#INVENTORY_NEED_WEAPONATTACHMENT_HOPUP" )
			{
				array<string> possibleHopups = []
				array<string> attachmentRefs = GetAttachmentsForPoint( "hopup", weaponClassName )
				foreach ( string ref in attachmentRefs )
				{
					possibleHopups.append( SURVIVAL_Loot_GetLootDataByRef( ref ).pickupString )
				}
				return possibleHopups
			}

			return [string( subjectEnt.GetWeaponPrintName() )]

	}

	if ( subjectEnt.IsPlayerDecoy() )
	{
		entity bossPlayer = subjectEnt.GetBossPlayer()
		if ( IsValid( bossPlayer ) )
			return [bossPlayer.GetPlayerName()]
		return ["<decoyUnk:[" + subjectEnt + "]>"]
	}

	if ( subjectEnt.IsNPC() )
	{
		if ( commsAction == eCommsAction.PING_NPC_LOOT_TICK )
			return [Localize( "#NPC_LOOT_TICK_UI_TITLE" )]
		return [format( "enemy [%s]", subjectEnt.GetTitleForUI() )]
	}


	if ( commsAction == eCommsAction.PING_LOOT_DRONE )
	{
		return [Localize( "#LOOT_DRONE_UI_TITLE" )]
	}



	if ( commsAction == eCommsAction.PING_LOOT_ROLLER )
	{
		return [Localize( "#LOOT_ROLLER_UI_TITLE" )]
	}


	if ( commsAction == eCommsAction.PING_LOOT_VAULT ||
		commsAction == eCommsAction.PING_LOOT_VAULT_OPEN ||
		commsAction == eCommsAction.PING_LOOT_VAULT_HAS_KEY_SQUAD ||
		commsAction == eCommsAction.PING_LOOT_VAULT_HAS_KEY_SELF )
		return [Localize( "#LOOT_VAULT_UI_TITLE" )]


	return ["<subjectUnk:[" + subjectEnt + "]>"]
}


vector function GetSubjectColorForCommsAction( entity subjectEnt )
{
	const vector DEFAULT_RESULT = <255, 255, 255>

	if ( !IsValid( subjectEnt ) )
		return DEFAULT_RESULT

	if ( subjectEnt.IsPlayer() )
		return GetChatTitleColorForPlayer( subjectEnt )

	switch ( subjectEnt.GetNetworkedClassName() )
	{
		case "prop_survival":
			return GetRarityColor( subjectEnt )

		case "weaponx":
			return BURN_COLOR
	}

	if ( subjectEnt.IsPlayerDecoy() )
	{
		entity bossPlayer = subjectEnt.GetBossPlayer()
		if ( IsValid( bossPlayer ) )
			return GetChatTitleColorForPlayer( bossPlayer )
	}

	return DEFAULT_RESULT
}

string function GetSubjectLootTierForCommsAction( entity subjectEnt )
{
	int tier = 0

	if ( !IsValid( subjectEnt ) || subjectEnt.GetNetworkedClassName() != "prop_survival" )
	{
		if ( HACK_IsVaultDoor( subjectEnt ) || IsVaultPanel( subjectEnt ) )
		{
			entity playerWithKey = VaultPanel_GetTeammateWithKey( GetLocalClientPlayer().GetTeam() )
			string playerWithKeyName
			if ( IsValid( playerWithKey ) )
				playerWithKeyName = VaultPanel_GetTeammateWithKey( GetLocalClientPlayer().GetTeam() ).GetPlayerName()
			if ( playerWithKeyName != "" )
				return playerWithKeyName
		}
		return string( tier )
	}

	tier = SURVIVAL_Loot_GetLootDataByIndex( subjectEnt.GetSurvivalInt() ).tier
	return string( tier )
}

bool function GetCommsActionIsFar( entity player, entity subjectEnt, vector subjectPos, int commsFlags )
{
	const float FAR_DIST_THRESHOLD = 2048.0

	if ( commsFlags & eCommsFlags.FORCE_FAR )
	{
		printt( "Far [YES] <- eCommsFlags.FORCE_FAR" )
		return true
	}

	vector actionPos = subjectPos    // IsValid( subjectEnt ) ? subjectEnt.GetOrigin() : subjectPos
	float dist       = Distance( actionPos, player.GetOrigin() )
	bool result      = (dist > FAR_DIST_THRESHOLD)
	return result
}

float function GetEffectiveDeltaSince( float timeThen )
{
	if ( timeThen <= 0.0001 )
		return 999999.0

	return (Time() - timeThen)
}

bool function PlayerDeliveryShouldBeUrgent_Common( entity player )
{
	const float TEAMMATE_NEAR_SPOTTED_ENEMY = 2048.0
	const float LAST_DAMAGED_BY_PLAYER_OR_NPC = 30.0
	const float LAST_DID_DAMAGE_TO_PLAYER_OR_NPC = 30.0

	if ( Bleedout_IsBleedingOut( player ) )
		return true

	//
	if ( GetEffectiveDeltaSince( player.GetLastTimeDamagedByOtherPlayer() ) < LAST_DAMAGED_BY_PLAYER_OR_NPC )
	{
		printt( "Urgent [YES] <- Last damaged by other player" )
		return true
	}

	if ( GetEffectiveDeltaSince( player.GetLastTimeDamagedByNPC() ) < LAST_DAMAGED_BY_PLAYER_OR_NPC )
	{
		printt( "Urgent [YES] <- Last damaged by NPC" )
		return true
	}

	//
	if ( GetEffectiveDeltaSince( player.GetLastTimeDidDamageToOtherPlayer() ) < LAST_DID_DAMAGE_TO_PLAYER_OR_NPC )
	{
		printt( "Urgent [YES] <- Last did damage to other player" )
		return true
	}

	if ( GetEffectiveDeltaSince( player.GetLastTimeDidDamageToNPC() ) < LAST_DID_DAMAGE_TO_PLAYER_OR_NPC )
	{
		printt( "Urgent [YES] <- Last did damage to NPC" )
		return true
	}

	//
	if ( Waypoint_AnyEnemySpottedNearPoint( player.EyePosition(), TEAMMATE_NEAR_SPOTTED_ENEMY ) )
	{
		printt( "Urgent [YES] <- Any teammate near spotted enemy" )
		return true
	}

	return false
}

bool function PlayerDeliveryShouldBeUrgent( entity player, vector subjectPos, int commsFlags )
{
	const float TEAMMATE_NEAR_PLAYER = 2048.0
	const float TEAMMATE_NEAR_SUBJECT_POS = 1024.0
	const float SUBJECT_NEAR_SPOTTED_ENEMY = 1024.0

	if ( commsFlags & eCommsFlags.FORCE_URGENT )
	{
		printt( "Urgent [YES] <- eCommsFlags.FORCE_URGENT" )
		return true
	}

	vector eyePos             = player.EyePosition()
	int team                  = player.GetTeam()
	array<entity> teamPlayers = GetPlayerArrayOfTeam_Alive( team )
	foreach( entity teamPlayer in teamPlayers )
	{
		if ( teamPlayer != player )
		{
			float distToPlayer     = Distance( eyePos, teamPlayer.EyePosition() )
			float distToSubjectPos = Distance( subjectPos, teamPlayer.EyePosition() )
			if ( (distToPlayer > TEAMMATE_NEAR_PLAYER) && (distToSubjectPos > TEAMMATE_NEAR_SUBJECT_POS) )
				continue
		}

		if ( PlayerDeliveryShouldBeUrgent_Common( teamPlayer ) )
			return true
	}

	if ( Waypoint_AnyEnemySpottedNearPoint( subjectPos, SUBJECT_NEAR_SPOTTED_ENEMY ) )
	{
		printt( "Urgent [YES] <- Waypoint near spotted enemy" )
		return true
	}

	if ( DeathField_IsActive() )
	{
		const float START_PLAYING_DIST = -30.0        // postive distance is inside safe zone
		float stormDist = DeathField_PointDistanceFromFrontier( eyePos )
		if ( stormDist < START_PLAYING_DIST )
		{
			printt( "Urgent [YES] <- Inside deathfield" )
			return true
		}
	}


	float stim = StatusEffect_GetSeverity( player, eStatusEffect.stim_visual_effect )
	if ( stim > 0.001 )
	{
		printf( "Urgent [YES] <- Stim (%0.2f)", stim )
		return true
	}

	return false
}

float function GetCooldownTimeForCommsAction( int commsAction )
{
	switch( commsAction )
	{
		case eCommsAction.PING_ENEMY_SPOTTED_SPECIFIC:
		case eCommsAction.PING_ENEMY_TRAP:
		case eCommsAction.PING_ENEMY_SMOKE:
		case eCommsAction.PING_ENEMY_SHIELD:
		case eCommsAction.PING_ENEMY_TELEPORTER:
			return 1.5
	}

	return 4.0
}
bool function ShouldMuteCommsActionForCooldown( entity player, int commsAction, entity subjectEnt )
{
	if ( IsValid( subjectEnt ) && (subjectEnt.GetNetworkedClassName() == "prop_survival") )
	{
		float delta = (Time() - subjectEnt.e.lastVocalizedCommsTime)
		if ( delta < 3.0 )
			return true
		return false
	}

	float cooldownTime = GetCooldownTimeForCommsAction( commsAction )
	float delta        = GetPlayerLastSaid( player, commsAction )
	if ( delta < cooldownTime )
		return true

	return false
}

string function GetNameForCommsAction( int commsAction )
{
	foreach( string key, int val in eCommsAction )
	{
		if ( val == commsAction )
			return key
	}
	return ""
}
void function ServerToClient_BroadcastCommsActionToTeam( entity player, int commsAction, entity subjectEnt, vector subjectPos, int commsFlags )
{
	HandleBroadcastCommsAction( player, commsAction, subjectEnt, subjectPos, commsFlags )
}

void function HandleBroadcastCommsAction( entity player, int commsAction, entity subjectEnt, vector subjectPos, int commsFlags )
{
	if ( !file.quickchatInitialized )
		return

	if ( !IsAlive( player ) && (commsFlags & eCommsFlags.INCLUDE_DEAD) == 0 )
		return

	if ( !player.IsPlayer() )
		return

	if ( ShouldMuteCommsActionForCooldown( player, commsAction, subjectEnt ) )
		return

	if ( IsValid( subjectEnt ) )
		subjectEnt.e.lastVocalizedCommsTime = Time()

	CommsAction act = file.actions[commsAction]

	CommsOptions opt
	opt.isFirstPerson = (player == GetLocalViewPlayer())
	opt.isFar = GetCommsActionIsFar( player, subjectEnt, subjectPos, commsFlags )
	opt.isUrgent = PlayerDeliveryShouldBeUrgent( player, subjectPos, commsFlags )
	opt.pauseQueue = true

	PlaySoundForCommsAction( player, commsAction, opt )

	RunQuickChatCallbacks( player, commsAction, subjectEnt )

	string chatText = act.chatText
	if ( chatText != "" )
	{
		string playerName          = opt.isFirstPerson ? Localize( "#OBITUARY_YOU" ) : player.GetPlayerName()
		vector playerColor         = GetChatTitleColorForPlayer( player )
		array<string> subjectNames = GetSubjectNamesForCommsAction( commsAction, subjectEnt )
		vector subjectColor        = GetSubjectColorForCommsAction( subjectEnt )
		string subjectTier         = GetSubjectLootTierForCommsAction( subjectEnt )

		if ( !PlayerIsPingMuted( player ) )
		{
			foreach ( string subjectName in subjectNames )
			{
				Obituary_Print_Localized( Localize( chatText, playerName, Localize( subjectName ), subjectTier ), playerColor, subjectColor, <255, 255, 255>, <0, 0, 0>, 0.5 )
			}
		}
	}

	SetPlayerLastSaid( player, commsAction )
}

void function PlaySoundForCommsAction( entity player, int commsAction, CommsOptions opt, string flavorEventOverride = "" )
{
	if ( PlayerIsPingMuted( player ) )
		return

	if ( !file.commsDialogueEnabled )
		return

	string sound = GetPlayerDialogSound( player, commsAction, opt )
	if ( sound != "" )
	{
		printt( format( "Comms: '%s' #%d    base:'%s'   (%s) far:%d urgent:%d    :  '%s'", GetNameForCommsAction( commsAction ), commsAction, file.actions[commsAction].aliasSubname, (opt.isFirstPerson ? "1p" : "3p"), (opt.isFar ? 1 : 0), (opt.isUrgent ? 1 : 0), sound ) )

		float sincePlastPlayed = (Time() - player.p.sayLineLatestTime)
		if ( (sincePlastPlayed < 30.0) && (player.p.sayLineLatestSound != "") )
		{
			player.p.lastCanceledCommsAction = player.p.lastSaidCommsAction
			StopSoundOnEntity( player, player.p.sayLineLatestSound )
		}

		// The dialogue queue is paused here for the duration of the ping VO such that no new items will be popped off of the dialogue queue while ping VO is playing.
		// This was done to handle multiple pings occurring at the same time, since the dialogue queue pause is done through a stack.
		var soundHandle = EmitSoundOnEntity( player, sound )
		//thread SuspendDialogueQueueForDurationOfSound( player, soundHandle )// TODO: undefined

		// Remove any player events from the queue so they don't double-speak
		//RemovePlayerDialogueEventsFromDialogueQueue( player ) TODO: undefined
		if ( opt.pauseQueue )
			thread SuspendMainDialogueQueueForDurationOfSound( player, soundHandle )

		//
		RemovePlayerDialogueEventsFromMainDialogueQueue( player )

		player.p.sayLineLatestSound = sound
		player.p.sayLineLatestTime = Time()
		player.p.lastSaidCommsAction = commsAction

		string subEvent = file.actions[commsAction].subEvent
		string flavorEvent = flavorEventOverride == "" ? file.actions[commsAction].flavorEvent : flavorEventOverride
		if ( subEvent != "" )
		{
			thread PlaySoundForSubActionWhenPrimaryFinishes( soundHandle, commsAction, GetCommsActionForName( subEvent ), player, opt, flavorEvent )
		}
		else if ( flavorEvent != "" )
		{
			int flavorAction = GetCommsActionForName( flavorEvent )
			string flavorSound = GetPlayerDialogSound( player, flavorAction, opt )
			if ( DoesAliasExist( flavorSound ) && ShouldPlayFlavorAction( player, flavorAction ) )
			{
				thread PlaySoundForSubActionWhenPrimaryFinishes( soundHandle, commsAction, flavorAction, player, opt )
			}
		}
	}
}
CommsAction function GetCommsAction( int index )
{
	CommsAction blankAction
	if ( (index < 0) || (index >= eCommsAction._count) )
		return blankAction

	return file.actions[ index ]
}


bool function ShouldPlayFlavorAction( entity player, int flavorAction )
{
	if ( GetCurrentPlaylistVarInt( "disable_flavor_lines", 0 ) > 0 )
		return false

	if ( Time() - player.p.commActionFlavorGlobalDebounceTime < file.flavorGlobalDebounceTime )
		return false

	if ( flavorAction in player.p.commActionFlavorDebounceTimes )
	{
		if ( Time() - player.p.commActionFlavorDebounceTimes[flavorAction] > file.flavorDebounceTime )
		{
			player.p.commActionFlavorDebounceTimes[flavorAction] = Time()
			return true
		}
		else
		{
			return false
		}
	}
	else
	{
		player.p.commActionFlavorDebounceTimes[flavorAction] <- Time()
		return true
	}

	unreachable
}

void function PlaySoundForSubActionWhenPrimaryFinishes( var primarySoundHandle, int primaryCommsAction, int subCommsAction, entity player, CommsOptions opt, string flavorEvent = "" )
{
	int i = 0//stub
	EndSignal( player, "OnDestroy" )
	EndSignal( player, "OnDeath" )

	PauseDialogueQueue( i )

	OnThreadEnd(
		function()
		{
			int i = 0//stub
			ResumeDialogueQueue( i )
		}
	)

	WaitSignal( primarySoundHandle, "OnSoundFinished" )

	if ( player.p.lastCanceledCommsAction != primaryCommsAction )
		PlaySoundForCommsAction( player, subCommsAction, opt, flavorEvent )
}

string function GetMenuOptionTextForCommsAction( int commsAction )
{
	Assert( commsAction < eCommsAction._count )
	CommsAction data = file.actions[commsAction]
	return Localize( data.menuText )
}

string function GetShortTextForCommsAction( int commsAction )
{
	Assert( commsAction < eCommsAction._count )
	CommsAction data = file.actions[commsAction]
	return Localize( data.shortText )
}

asset function GetDefaultIconForCommsAction( int commsAction )
{
	Assert( commsAction < eCommsAction._count )
	CommsAction data = file.actions[commsAction]
	return data.defaultIcon
}

asset function GetPingAssetForCommsAction( int commsAction )
{
	Assert( commsAction < eCommsAction._count )
	CommsAction data = file.actions[commsAction]
	return data.pingAsset
}

string function GetPlayerDialogSound( entity player, int index, CommsOptions options )
{
	if ( !file.quickchatInitialized )
		return ""
	if ( (index < 0) || (index >= eCommsAction._count) )
		return ""

	CommsAction act = file.actions[index]
	string subAlias = act.aliasSubname
	if ( subAlias == "" )
		return ""

	string ext
	if ( options.isFar && options.isUrgent && act.hasUrgentFar )
		ext = "_urgentFar"
	else if ( options.isUrgent && act.hasUrgent )
		ext = "_urgent"
	else if ( options.isFar && act.hasCalmFar )
		ext = "_calmFar"
	else if ( act.hasCalm )
		ext = "_calm"
	else
		ext = ""

	string result = GetBattleChatterAlias1P3P( player, (subAlias + ext), options.isFirstPerson )
	#if DEVELOPER
		if ( ShouldTryToReplaceMissingVoiceWithTempVoice() )
		{
			if ( !DoesAliasExist( result ) )
			{
				result = GetBattleChatterAlias1P3PWithTempVoice( (subAlias + ext), options.isFirstPerson )

				if ( !DoesAliasExist( result ) )
					Warning( "Attempted to fall back to temp voice \"" + TEMP_VOICE + "\", but resulting alias \"" + result + "\" does not exist in miles." )
			}
		}
	#endif //
	return result
}

void function SetCommsDialogueEnabled( bool value )
{
	file.commsDialogueEnabled = value
}
void function AddCallback_OnQuickchatEvent( int index, void functionref(entity, int, entity) func )
{
	if ( !(index in file.onQuickchatCallbacks) )
		file.onQuickchatCallbacks[ index ] <- []

	Assert( !file.onQuickchatCallbacks[ index ].contains( func ) )
	file.onQuickchatCallbacks[ index ].append( func )
}

void function RunQuickChatCallbacks( entity player, int commsAction, entity subjectEnt )
{
	if ( commsAction in file.onQuickchatCallbacks )
	{
		foreach ( func in file.onQuickchatCallbacks[ commsAction ] )
		{
			func( player, commsAction, subjectEnt )
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif // CLIENT

#if SERVER
bool function ClientCommand_Quickchat( entity player, array<string> args )
{
	if ( args.len() < 1 )
		return true

	int index = int( args[0] )
	if ( index < 0 || !(index in file.actions) )
		return true

	entity subject = null
	int flags = eCommsFlags.NONE
	if ( args.len() > 1 )
	{
		flags = int( args[1] )

		if ( args.len() > 2 )
		{
			string equipSlot = args[2]
			if ( equipSlot in EquipmentSlot_GetAllEquipmentSlots() )
			{
				if ( EquipmentSlot_IsAttachmentSlot( equipSlot ) )
					equipSlot = EquipmentSlot_GetAttachmentWeaponSlot( equipSlot )
	
				if ( EquipmentSlot_IsMainWeaponSlot( equipSlot ) )
				{
					EquipmentSlot es = Survival_GetEquipmentSlotDataByRef( equipSlot )
					subject = player.GetNormalWeapon( es.weaponSlot )
				}
			}
	
			if ( args.len() > 3 )
			{
				subject = GetEntityFromEncodedEHandle( int( args[3] ) )
	
				if ( !IsValid( subject ) )
					return true
			}
		}
	}

	HandleBroadcastCommsAction( player, index, subject, player.GetOrigin(), flags )
	return true
}

void function HandleBroadcastCommsAction( entity playerSpeaking, int commsAction, entity subjectEnt, vector subjectPos, int commsFlags )
{
	array<entity> players = GetPlayerArrayOfTeam_Alive( playerSpeaking.GetTeam() )
	foreach ( player in players )
		Remote_CallFunction_Replay( player, "HandleBroadcastCommsAction", playerSpeaking, commsAction, subjectEnt, subjectPos, commsFlags )

	if ( GetCurrentPlaylistVarBool( "thanks_welcome_reply_enabled", true ) )
		if ( commsAction == eCommsAction.REPLY_THANKS && IsValid( subjectEnt ) && subjectEnt.IsPlayer() )
			Remote_CallFunction_NonReplay( subjectEnt, "ServerCallback_PromptWelcome" )
}

#endif // SERVER