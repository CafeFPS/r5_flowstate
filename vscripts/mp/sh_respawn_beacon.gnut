global function Sh_RespawnBeacon_Init

global function RespawnBeacons_RegisterNetworking

global function GetRespawnStyle

#if SERVER
global function RespawnBeacons_OnSquadEliminated
global function RespawnBeacon_PutPlayerInDropship
global function AddCallback_OnDNAPickupDestroyed
#if DEVELOPER
global function RespawnPlayersInDropship
global function RespawnPlayersInDropshipAtPoint
global function RespawnPlayersInDropshipAtPoint2
global function RespawnPlayersInDropshipAtPointTDM
#endif
#endif

#if CLIENT
global function ServerCallback_RespawnPodStarted
global function ServerCallback_DisplayWaitingForRespawn
global function ServerCallback_RespawnDNAHint

global function ServerCallback_RespawnBeaconStart
global function ServerCallback_RespawnBeaconStop

global function GetRespawnStatus
global function TryPingRespawnItem
#endif

global const string RESPAWN_CHAMBER_TARGETNAME         = "respawn_chamber"
global const string RESPAWN_DNA_TARGETNAME             = "respawn_dna"
global const string RESPAWN_DROPSHIP_TARGETNAME        = "respawn_dropship"

const float RESPAWN_BEACON_HOLO_EFFECT_HEIGHT          = 75.0

global const float RESPAWN_DNA_LIFETIME                = 90.0
const float RESPAWN_DROP_TIME                          = 10.0
const asset RESPAWN_BEACON_MODEL                       = $"mdl/dev/empty_model.rmdl"
global const float RESPAWN_BEACON_RESPAWN_TIME         = 5.0

global const string RESPAWN_BEACON_SUCCESS_SOUND       = "Survival_RespawnChamber_Activate"
global const string RESPAWN_BEACON_LOOP_SOUND          = "Survival_RespawnBeacon_Linking_loop"

const asset RESPAWN_DROPSHIP_MODEL                     = $"mdl/vehicle/goblin_dropship/goblin_dropship.rmdl"

global const asset RESPAWN_BEACON_EMITTER_FX           = $"P_chamber_proj_holo"
global const asset RESPAWN_BEACON_BEAM_FX              = $"P_chamber_beam"
global const asset RESPAWN_BEACON_SCAN_FX              = $"P_chamber_celebration"

global const asset RESPAWN_BEACON_ICON                 = $"rui/hud/gametype_icons/survival/dna_station"
global const asset RESPAWN_BEACON_ICON_SMALL           = $"rui/hud/gametype_icons/survival/dna_station_small"
const string SOUND_HOLOGRAM_LOOP                       = "Survival_Emit_RespawnChamber"

const string ANIM_FLYIN_IDLE = "dropship_classic_mp_flyin_idle"
const string ANIM_FLYIN_MOVE = "dropship_classic_mp_flyin"

const float RESPAWN_CHAMBER_ICON_FADE_DIST_NEAR        = 300.0
const float RESPAWN_CHAMBER_ICON_FADE_DIST_FAR         = 1000.0

global enum eRespawnStyle
{
	NONE,
	DEPRECATED,
	RESPAWN_CHAMBERS,
	_COUNT
}

global struct dropshipAnimData
{
	string idleAnim
	string idlePOVAnim
	string jumpAnim
	string jumpPOVAnim
	string attachment = "origin"
	bool hideProxy = true
	void functionref( entity ) viewConeFunc
	float yawAngle
	string firstPersonJumpOutSound // Unfortunately first person anims play for everybody, not just the person who the anim is played upon, so script needs to play the sound as opposed to a qc entry
}

struct
{
	array<dropshipAnimData> dropshipAnimDataList
	array<entity> allStations

	#if CLIENT
		array<var> respawnChamberRuis
		table<entity, int> chamberToBeamFX
	#endif

	#if SERVER
	array< void functionref(entity) >	callbacks_OnDNAPickupDestroyed
	table< entity, float > lastPingTimes
	#endif
}
file

void function Sh_RespawnBeacon_Init()
{
	#if SERVER
	AddSpawnCallbackEditorClass( "prop_dynamic", "script_survival_revival_chamber", OnRespawnChamberSpawned )
	#endif

	PrecacheModel( RESPAWN_DROPSHIP_MODEL )
	// AddCallback_EntitiesDidLoad( RespawnBeacon_EntitiesdidLoad )

	if ( GetRespawnStyle() == eRespawnStyle.NONE )
		return

	PrecacheModel( RESPAWN_BEACON_MODEL )
	PrecacheParticleSystem( RESPAWN_BEACON_EMITTER_FX )
	PrecacheParticleSystem( RESPAWN_BEACON_BEAM_FX )
	PrecacheParticleSystem( RESPAWN_BEACON_SCAN_FX )


	#if CLIENT
		RegisterSignal( "ReviveRuiThread" )
		RegisterSignal( "SpectatorShowRespawnRui" )

		AddCreateCallback( "prop_dynamic", RespawnEntitySpawned )
		AddCreateCallback( "prop_script", RespawnEntitySpawned )

		AddCreateCallback( PLAYER_WAYPOINT_CLASSNAME, PlayerWaypoint_CreateCallback )
		AddDestroyCallback( PLAYER_WAYPOINT_CLASSNAME, PlayerWaypoint_DestroyCallback )

		AddCallback_OnClientScriptInit( OverrideMinimapPackages )

		RegisterButtonPressedCallback( KEY_SPACE, TryPingRespawnItem )
		RegisterButtonPressedCallback( BUTTON_A, TryPingRespawnItem )

		SetMapFeatureItem( 1000, "#RESPAWN_BEACON", "#RESPAWN_BEACON_DESC", RESPAWN_BEACON_ICON )
	#elseif SERVER
		AddSpawnCallback( "prop_dynamic", RespawnEntitySpawned )
		AddSpawnCallback( "prop_script", RespawnEntitySpawned )

		AddClientCommandCallback( "PingNearestRespawn", ClientCommand_PingNearestRespawn )

		AddCallback_OnClientDisconnected( RespawnBeacon_OnClientDisconnected )

		// from CLASSIC MP, because I didn't want to revive that file
		RegisterSignal( "sRampOpen" )

		dropshipAnimData dataForPlayerA
		dataForPlayerA.idleAnim           = "Classic_MP_flyin_exit_playerA_idle"
		dataForPlayerA.idlePOVAnim        = "Classic_MP_flyin_exit_povA_idle"
		dataForPlayerA.jumpAnim           = "Classic_MP_flyin_exit_playerA_jump"
		dataForPlayerA.jumpPOVAnim        = "Classic_MP_flyin_exit_povA_jump"
		dataForPlayerA.viewConeFunc       = ViewConeWide
		dataForPlayerA.yawAngle           = -18.0
		dataForPlayerA.firstPersonJumpOutSound = "commander_sequence_soldier_a_jump"

		dropshipAnimData dataForPlayerB
		dataForPlayerB.idleAnim           = "Classic_MP_flyin_exit_playerB_idle"
		dataForPlayerB.idlePOVAnim        = "Classic_MP_flyin_exit_povB_idle"
		dataForPlayerB.jumpAnim           = "Classic_MP_flyin_exit_playerB_jump"
		dataForPlayerB.jumpPOVAnim        = "Classic_MP_flyin_exit_povB_jump"
		dataForPlayerB.viewConeFunc       = ViewConeWide
		dataForPlayerB.yawAngle           = 8.0
		dataForPlayerB.firstPersonJumpOutSound = "commander_sequence_soldier_b_jump"

		dropshipAnimData dataForPlayerC
		dataForPlayerC.idleAnim           = "Classic_MP_flyin_exit_playerC_idle"
		dataForPlayerC.idlePOVAnim        = "Classic_MP_flyin_exit_povC_idle"
		dataForPlayerC.jumpAnim           = "Classic_MP_flyin_exit_playerC_jump"
		dataForPlayerC.jumpPOVAnim        = "Classic_MP_flyin_exit_povC_jump"
		dataForPlayerC.viewConeFunc       = ViewConeWide
		dataForPlayerC.yawAngle           = 8.0
		dataForPlayerC.firstPersonJumpOutSound = "commander_sequence_soldier_c_jump"

		dropshipAnimData dataForPlayerD
		dataForPlayerD.idleAnim           = "Classic_MP_flyin_exit_playerD_idle"
		dataForPlayerD.idlePOVAnim        = "Classic_MP_flyin_exit_povD_idle"
		dataForPlayerD.jumpAnim           = "Classic_MP_flyin_exit_playerD_jump"
		dataForPlayerD.jumpPOVAnim        = "Classic_MP_flyin_exit_povD_jump"
		dataForPlayerD.viewConeFunc       = ViewConeWide
		dataForPlayerD.yawAngle           = -16.0
		dataForPlayerD.firstPersonJumpOutSound = "commander_sequence_soldier_d_jump"

		file.dropshipAnimDataList = [ dataForPlayerA, dataForPlayerB, dataForPlayerC, dataForPlayerD ]
		// END from CLASSIC MP

		if ( GetRespawnStyle() == eRespawnStyle.RESPAWN_CHAMBERS )
		{
			AddCallback_OnDeathBoxSpawned( OnDeathBoxSpawned )
			AddCallback_OnGetBestObserverTarget( GetBestObserverTarget )
		}
	#endif
	
	ShRespawnBeacon_RegisterAinAnalysisFuncs()
}

void function RespawnBeacons_RegisterNetworking()
{
	RegisterNetworkedVariable( "respawnStatus", SNDC_PLAYER_GLOBAL, SNVT_INT, eRespawnStatus.NONE )
	RegisterNetworkedVariable( "respawnStatusEndTime", SNDC_PLAYER_GLOBAL, SNVT_TIME, -1 )
	RegisterNetworkedVariable( "respawnBannerPickedUpTime", SNDC_PLAYER_GLOBAL, SNVT_TIME, -1 )

	#if CLIENT
	RegisterNetworkedVariableChangeCallback_int( "respawnStatus", RespawnStatusChanged )
	#endif
}


void function ShRespawnBeacon_RegisterAinAnalysisFuncs()
{
	AddDropshipFlightAnalysis( eFlightPathAnalysisIndex.RESPAWN_DROPSHIP_FLYIN_MOVE, RESPAWN_DROPSHIP_MODEL, ANIM_FLYIN_MOVE, AnaylsisFuncDropshipTestJumpout, "dropship_deploy" )
}

#if CLIENT
void function OverrideMinimapPackages( entity player )
{
	if ( GetRespawnStyle() == eRespawnStyle.RESPAWN_CHAMBERS )
	{
		RegisterMinimapPackage( "prop_script", eMinimapObject_prop_script.RESPAWN_CHAMBER, MINIMAP_OBJECT_RUI, MinimapPackage_RespawnChamber, FULLMAP_OBJECT_RUI, MinimapPackage_RespawnChamber )
		RegisterMinimapPackage( "prop_script", eMinimapObject_prop_script.RESPAWN_DNA, $"ui/minimap_square_respawn_dna_pickup.rpak", MinimapPackage_RespawnDNA, $"ui/in_world_minimap_respawn_dna.rpak", MinimapPackage_RespawnDNA )
	}
}

void function RespawnStatusChanged( entity player, int old, int new, bool actuallyChanged )
{
	if ( player == GetLocalClientPlayer() )
		UpdateRespawnStatus( new )

	if ( new == eRespawnStatus.WAITING_FOR_DROPPOD )
		FlashGameWindow()

	entity viewPlayer = GetLocalViewPlayer()

	if ( !IsValid( viewPlayer ) )
		viewPlayer = GetLocalClientPlayer()

	if ( !IsValid( viewPlayer ) )
		return

	bool waitingToBeRespawned = HasTeammatesToRespawn( viewPlayer.GetTeam() )

	foreach ( rui in file.respawnChamberRuis )
	{
		UpdateRespawnChamberRuis( rui, waitingToBeRespawned )
	}

	ArrayRemoveInvalid( file.allStations )

	if ( GetRespawnStyle() != eRespawnStyle.NONE )
	{
		int fxId = GetParticleSystemIndex( RESPAWN_BEACON_BEAM_FX )

	foreach ( ent in file.allStations )
	{
		if ( waitingToBeRespawned )
		{
			if ( !EffectDoesExist( file.chamberToBeamFX[ ent ] ) )
			{
				file.chamberToBeamFX[ ent ] = StartParticleEffectOnEntityWithPos( ent, fxId, FX_PATTACH_POINT_FOLLOW_NOROTATE, ent.LookupAttachment( "FX_EMITTER" ), <0,0,0>, <0,0,0> )
			}
		}
		else
		{
			if ( EffectDoesExist( file.chamberToBeamFX[ ent ] ) )
			{
				EffectStop( file.chamberToBeamFX[ ent ], true, true )
			}

				file.chamberToBeamFX[ ent ] = -1
			}
		}
	}

	                                                                                                          
	DeathScreen_RespawnStatusChanged( player, old, new, actuallyChanged )
}

void function UpdateRespawnChamberRuis( var rui, bool waitingToBeRespawned )
{
	if ( waitingToBeRespawned )
	{
		RuiSetFloat( rui, "distanceFade", RESPAWN_CHAMBER_ICON_FADE_DIST_FAR )
		RuiSetBool( rui, "pinToEdge", true )
		RuiSetBool( rui, "showClampArrow", true )
	}
	else
	{
		RuiSetFloat( rui, "distanceFade", RESPAWN_CHAMBER_ICON_FADE_DIST_NEAR )
		RuiSetBool( rui, "pinToEdge", false )
		RuiSetBool( rui, "showClampArrow", false )
	}
}
#endif

void function RespawnEntitySpawned( entity ent )
{
	switch ( ent.GetTargetName() )
	{
		case RESPAWN_CHAMBER_TARGETNAME:
#if CLIENT
			AddEntityCallback_GetUseEntOverrideText( ent, RespawnChamber_TextOverride )
			var rui = AddOverheadIcon( ent, RESPAWN_BEACON_ICON, false, $"ui/overhead_icon_respawn_beacon.rpak" )
			RuiSetFloat2( rui, "iconSize", <80,80,0> )
			RuiSetFloat( rui, "distanceFade", RESPAWN_CHAMBER_ICON_FADE_DIST_NEAR )
			RuiSetBool( rui, "adsFade", true )
			RuiSetString( rui, "hint", "#RESPAWN_ALLCAPS" )

			thread ManageRespawnChamberData( ent, rui )

			if ( GetCurrentPlaylistVarBool( "enable_radar_on_respawn_beacons", true ) )
				thread AddRadarToRespawnStation( ent )
#endif

#if SERVER
			ent.DisableHibernation()
			ent.AllowMantle()
			ent.SetUsable()
			ent.SetUsableByGroup( "pilot" )
			ent.AddUsableValue( USABLE_BY_ALL | USABLE_CUSTOM_HINTS )
			ent.Minimap_SetAlignUpright( true )
			ent.Minimap_SetClampToEdge( false )
			ent.Minimap_SetCustomState( eMinimapObject_prop_script.RESPAWN_CHAMBER )
			ent.Minimap_SetZOrder( MINIMAP_Z_OBJECT )
#endif

			file.allStations.append( ent )

			SetCallback_CanUseEntityCallback( ent, IsNotBusy )
			AddCallback_OnUseEntity( ent, RespawnChamberOnUse )
			break

#if SERVER
			ent.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_OWNER
			ent.Hide()
			ent.Minimap_SetAlignUpright( true )
			ent.Minimap_SetClampToEdge( true )
			ent.Minimap_SetCustomState( eMinimapObject_prop_script.RESPAWN_DNA )
#endif
			break
	}

}

#if SERVER
void function OnRespawnChamberSpawned( entity ent )
{
	asset model = ent.GetModelName()

	vector origin = ent.GetOrigin()
	vector angles = ent.GetAngles()

	array<entity> links = ent.GetLinkEntArray()
	entity link

	if ( links.len() > 0 )
	{
		link = links[0]
	}

	ent.Destroy()

	if ( GetRespawnStyle() != eRespawnStyle.RESPAWN_CHAMBERS || GameRules_GetGameMode() != SURVIVAL )
		return

	// spawn a new one with the correct targetname
	entity respawnChamber = CreatePropScript_NoDispatchSpawn( model, origin, angles, 6 )
	SetTargetName( respawnChamber, RESPAWN_CHAMBER_TARGETNAME )
	respawnChamber.SetScriptName("script_survival_revival_chamber")
	DispatchSpawn( respawnChamber )

	if ( IsValid( link ) )
	{
		respawnChamber.e.hasBomb = true
		respawnChamber.e.lastBouncePosition = link.GetOrigin()
		respawnChamber.e.goalAngles = link.GetAngles()
		link.Destroy()
	}
}


void function RespawnBeacon_OnClientDisconnected( entity player )
{
	if ( IsValid( player.p.respawnBeacon ) )
		player.p.respawnBeacon.Destroy()
}

void function RespawnPlayersInDropship( array<entity> players, entity beacon )
{
	Point p

	if ( beacon.e.hasBomb )
	{
		p.origin = beacon.e.lastBouncePosition
		p.angles = beacon.e.goalAngles
	}
	else if ( beacon.GetLinkEntArray().len() == 0 )
	{
		p = GetClosestRespawnDropoff( beacon.GetOrigin() )
	}
	else
	{
		entity link = beacon.GetLinkEntArray()[0]
		p.origin = link.GetOrigin()
		p.angles = link.GetAngles()
	}
	thread RespawnPlayersInDropshipAtPoint( players, p.origin, AnglesCompose( p.angles, <0,0,0> ) )
}

void function RespawnPlayersInDropshipAtPoint( array<entity> players, vector origin, vector angles )
{
    entity dropship = CreateEntity( "npc_dropship" )
    SetSpawnOption_AISettings( dropship, "npc_dropship_respawn" )
    SetTargetName( dropship, RESPAWN_DROPSHIP_TARGETNAME )
    DispatchSpawn( dropship )
    dropship.SetInvulnerable()
    dropship.DisableHibernation()
    thread JetwashFX( dropship )

    dropship.DisableGrappleAttachment()

    dropship.SetOrigin( origin )
    dropship.SetAngles( angles )
    Attachment attachResult = dropship.Anim_GetAttachmentAtTime( "dropship_classic_mp_flyin", "ORIGIN", 0.0 )

    int i = 0
    foreach ( player in players )
    {
        if ( IsValid( player ) )
        {
            thread RespawnBeacon_PutPlayerInDropship( player, dropship, i, attachResult.position )
        }
        i++
    }

    EmitSoundOnEntity( dropship, "goblin_imc_evac_hover" )
    EndSignal( dropship, "OnDestroy" )

    // Fix anim bug with this of it getting weirdly teleported.
    thread PlayAnim( dropship, "dropship_classic_mp_flyin_idle", origin, angles )

    // Warp in now.
    dropship.MakeInvisible()
    waitthread __WarpInEffectShared( attachResult.position, attachResult.angle, "dropship_warpin", 0.0 )
    dropship.MakeVisible()

    thread PlayAnim( dropship, "dropship_classic_mp_flyin", origin, angles )

    // Wait for correct time to warp out
    wait dropship.GetSequenceDuration( "dropship_classic_mp_flyin" ) - 5

    // Hide dropShip now and warpout.
    dropship.Hide()
    __WarpOutEffectShared( dropship )

    dropship.Destroy()
}

void function RespawnPlayersInDropshipAtPointTDM( array<entity> players, vector origin, vector angles )
{
	entity dropship = CreateEntity( "npc_dropship" )
	SetSpawnOption_AISettings( dropship, "npc_dropship_respawn" )
	SetTargetName( dropship, RESPAWN_DROPSHIP_TARGETNAME )
	DispatchSpawn( dropship )
	dropship.SetInvulnerable()
	dropship.DisableHibernation()
	EmitSoundOnEntity( dropship, "goblin_imc_evac_hover" )
	thread JetwashFX( dropship )

	dropship.DisableGrappleAttachment()

	dropship.SetOrigin( origin )
	dropship.SetAngles( angles )
	Attachment attachResult = dropship.Anim_GetAttachmentAtTime( "dropship_classic_mp_flyin", "ORIGIN", 0.0 )

	int i=0
	foreach ( player in players )
	{
		if ( IsValid( player ) )
		{
			thread RespawnBeacon_PutPlayerInDropship2 ( player, dropship, i, attachResult.position )
		}
		i++
	}

	EndSignal( dropship, "OnDestroy" )

	thread PlayAnim( dropship, "dropship_classic_mp_flyin_idle", origin, angles )
	dropship.MakeInvisible()
	waitthread __WarpInEffectShared( attachResult.position, attachResult.angle, "dropship_warpin", 0.0 )
	dropship.MakeVisible()
	waitthread PlayAnim( dropship, "dropship_classic_mp_flyin", origin, angles )
	dropship.Destroy()
}

void function RespawnPlayersInDropshipAtPoint2( entity player, vector origin, vector angles )
{
	entity dropship = CreateEntity( "npc_dropship" )
	SetSpawnOption_AISettings( dropship, "npc_dropship_respawn" )
	SetTargetName( dropship, RESPAWN_DROPSHIP_TARGETNAME )
	DispatchSpawn( dropship )
	dropship.SetInvulnerable()
	dropship.DisableHibernation()
	//EmitSoundOnEntity( dropship, "goblin_imc_evac_hover" )
	thread JetwashFX( dropship )

	dropship.DisableGrappleAttachment()

	dropship.SetOrigin( origin )
	dropship.SetAngles( angles )
	Attachment attachResult = dropship.Anim_GetAttachmentAtTime( "dropship_classic_mp_flyin", "ORIGIN", 0.0 )

	int i=0
	thread RespawnBeacon_PutPlayerInDropship2( player, dropship, i, attachResult.position )

	EndSignal( dropship, "OnDestroy" )

	thread PlayAnim( dropship, "dropship_classic_mp_flyin_idle", origin, angles )
	dropship.MakeInvisible()
	waitthread __WarpInEffectShared( attachResult.position, attachResult.angle, "dropship_warpin", 0.0 )
	dropship.MakeVisible()
	waitthread PlayAnim( dropship, "dropship_classic_mp_flyin", origin, angles )
	dropship.Destroy()
}



void function DelayedDestroyDNA( entity ent, float lifetime )
{
	ent.EndSignal( "OnDestroy" )

	wait lifetime

	entity player = ent.GetOwner()
	if ( IsValid( player ) )
	{
		player.SetPlayerNetInt( "respawnStatus", eRespawnStatus.PICKUP_DESTROYED )
		foreach ( callbackFunc in file.callbacks_OnDNAPickupDestroyed )
		{
			callbackFunc( player )
		}
	}

	ent.Destroy()
}

void function AddCallback_OnDNAPickupDestroyed( void functionref(entity) callbackFunc )
{
	Assert( !file.callbacks_OnDNAPickupDestroyed.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " with AddCallback_OnDNAPickupDestroyed" )
	file.callbacks_OnDNAPickupDestroyed.append( callbackFunc )
}
#endif

/*
----- REVIVE CHAMBER -----
*/

bool function IsNotBusy( entity player, entity ent )
{
	if ( Bleedout_IsBleedingOut( player ) )
		return false

	if ( player.ContextAction_IsActive() )
		return false

	if ( !SURVIVAL_PlayerAllowedToPickup( player ) )
		return false

	if ( ent.e.isBusy )
		return false

	return true
}

#if CLIENT
void function ManageRespawnChamberData( entity ent, var rui )
{
	file.chamberToBeamFX[ ent ] <- -1
	file.respawnChamberRuis.append( rui )
	ent.EndSignal( "OnDestroy" )

	UpdateRespawnChamberRuis( rui, HasTeammatesToRespawn( GetLocalViewPlayer().GetTeam() ) )

	OnThreadEnd(
		function() : ( ent, rui )
		{
			if ( EffectDoesExist( file.chamberToBeamFX[ ent ] ) )
				EffectStop( file.chamberToBeamFX[ ent ], true, true )

			delete file.chamberToBeamFX[ ent ]

			file.respawnChamberRuis.fastremovebyvalue( rui )
		}
	)

	WaitForever()
}

void function AddRadarToRespawnStation( entity ent )
{
	vector fwd = AnglesToForward( ent.GetAngles() )
	vector up = AnglesToUp( ent.GetAngles() )
	vector rgt = AnglesToRight( ent.GetAngles() )
	vector offset = up*100
	vector angles = AnglesCompose( ent.GetAngles(), <0,0,-10> )

	ent.EndSignal( "OnDestroy" )

	entity fxHolder = CreateClientsideScriptMover( $"mdl/dev/empty_model.rmdl", ent.GetOrigin() + up*RESPAWN_BEACON_HOLO_EFFECT_HEIGHT, <-90,0,0> )

	array<int> fx
	fx.append( StartParticleEffectOnEntity( fxHolder, GetParticleSystemIndex( RESPAWN_BEACON_EMITTER_FX ), FX_PATTACH_ABSORIGIN_FOLLOW, -1 ) )
	EmitSoundOnEntity( fxHolder, SOUND_HOLOGRAM_LOOP )

	OnThreadEnd(
		function() : ( fx, fxHolder )
		{
			//radar.Dissolve( ENTITY_DISSOLVE_CORE, <0,0,0>, 500 )
			foreach ( effect in fx )
			{
				EffectStop( effect, false, true )
			}
			fxHolder.Destroy()
		}
	)

	WaitForever()
}

void function MinimapPackage_RespawnDNA( entity ent, var rui )
{
	RuiSetImage( rui, "defaultIcon", $"" )
	RuiSetImage( rui, "clampedDefaultIcon", $"" )
	RuiSetBool( rui, "useTeamColor", false )
	RuiSetFloat2( rui, "iconScale", <1.0,60.0/120.0,0.0> * 2.0 )

	thread RespawnDNA_SetCharacterIcon( ent, rui, "defaultIcon" )
}

void function RespawnDNA_SetCharacterIcon( entity ent, var rui, string argName )
{
	ent.EndSignal( "OnDestroy" )

	entity owner = ent.GetOwner()
	if ( !IsValid( owner ) )
		return

	owner.EndSignal( "OnDestroy" )

	ItemFlavor character = LoadoutSlot_WaitForItemFlavor( ToEHI( owner ), Loadout_CharacterClass() )

	asset setFile = CharacterClass_GetSetFile( character )
	asset icon = GetGlobalSettingsAsset( setFile, "unitframe_icon" )

	RuiSetImage( rui, argName, icon )
}

void function MinimapPackage_RespawnChamber( entity ent, var rui )
{
	RuiSetImage( rui, "defaultIcon", RESPAWN_BEACON_ICON )
	RuiSetImage( rui, "smallIcon", RESPAWN_BEACON_ICON_SMALL )
	RuiSetBool( rui, "hasSmallIcon", true )
	RuiSetImage( rui, "clampedDefaultIcon", $"" )
	RuiSetBool( rui, "useTeamColor", false )
}

string function RespawnChamber_TextOverride( entity ent )
{
	entity player = GetLocalViewPlayer()
	int team = player.GetTeam()
	if ( GetPlayerArrayOfTeam( team ).len() == GetPlayerArrayOfTeam_Alive( team ).len() ||
			!HasTeammatesToRespawn( team ) )
	{
		//return "Respawn Teammates Here"
		//if ( !TeammatesWaitingToBeRespawned( team ) )
		return "#HINT_RESPAWN_NEED"
	}

	return "#HINT_RESPAWN_USE"
}

string function RespawnDNA_TextOverride( entity ent )
{
	if ( GetLocalViewPlayer().GetTeam() == ent.GetTeam() )
		return Localize( "#HINT_PICKUP_DNA_USE", ent.GetOwner().GetPlayerName() )

	return "#HINT_DESTROY_DNA_USE"
}
#endif

float function GetRespawnStationUseTime( entity ent )
{
	return RESPAWN_BEACON_RESPAWN_TIME
}


void function RespawnChamberOnUse( entity pickup, entity player, int pickupFlags )
{
	if ( !(pickupFlags & USE_INPUT_LONG ) )
		return
                   
                                                                                                                                                                
        
     
	if ( !HasTeammatesToRespawn( player.GetTeam() ) )
		return

	#if CLIENT
	HidePlayerHint( "#RESPAWN_AT_BEACONS_HINT" )
		#endif

	ExtendedUseSettings settings
	settings.successSound = RESPAWN_BEACON_SUCCESS_SOUND
	#if CLIENT
		settings.loopSound = RESPAWN_BEACON_LOOP_SOUND
		settings.displayRui = $"ui/health_use_progress.rpak"
		settings.displayRuiFunc = DisplayRuiForRespawnChamber
		settings.icon = $""
		settings.hint = "#HINT_RESPAWNING"
		settings.icon = RESPAWN_BEACON_ICON
	#elseif SERVER
		settings.startFunc = RespawnBeaconStartUse
		settings.endFunc = RespawnBeaconStopUse
		settings.successFunc = RespawnUserTeam
		settings.exclusiveUse = true
		settings.movementDisable = true
		settings.holsterWeapon = true
		#endif
	settings.duration = GetRespawnStationUseTime( pickup )
	settings.useInputFlag = IN_USE_LONG

	thread ExtendedUse( pickup, player, settings )
}

#if CLIENT
void function DisplayRuiForRespawnChamber( entity ent, entity player, var rui, ExtendedUseSettings settings )
{
	DisplayRuiForRespawnChamber_Internal( rui, settings.icon, Time(), Time() + settings.duration, settings.hint )
}

void function DisplayRuiForRespawnChamber_Internal( var rui, asset icon, float startTime, float endTime, string hint )
{
	RuiSetBool( rui, "isVisible", true )
	RuiSetImage( rui, "icon", icon )
	RuiSetGameTime( rui, "startTime", startTime )
	RuiSetGameTime( rui, "endTime", endTime )
	RuiSetString( rui, "hintKeyboardMouse", hint )
	RuiSetString( rui, "hintController", hint )
}
#endif

#if SERVER
void function RespawnUserTeam( entity ent, entity playerUser, ExtendedUseSettings settings )
{
	if ( !HasTeammatesToRespawn( playerUser.GetTeam() ) )
		return

	int fxId = GetParticleSystemIndex( RESPAWN_BEACON_SCAN_FX )

	asset model = ent.GetModelName()
	vector origin = ent.GetOrigin()
	vector angles = ent.GetAngles()

	entity newEnt = CreatePropDynamicLightweight( model, origin, angles, 6 )
	StartParticleEffectOnEntityWithPos( newEnt, fxId, FX_PATTACH_POINT_FOLLOW_NOROTATE, newEnt.LookupAttachment( "FX_EMITTER" ), newEnt.GetOrigin(), <0,0,0> )
	//newEnt.Anim_Play( "mh_active_2_inactive" )
	//newEnt.Dissolve( ENTITY_DISSOLVE_CORE, <0,0,0>, 500 )

	thread RespawnTeamPlayers( ent, playerUser.GetTeam(), playerUser )

	ent.Destroy()
}

void function RespawnTeamPlayers( entity ent, int team, entity respawnCaller )
{
	array<entity> playersToSpawn
	foreach ( p in GetPlayerArrayOfTeam( team ) )
	{
		if ( !IsAlive( p ) && p.GetPlayerNetInt( "respawnStatus" ) == eRespawnStatus.WAITING_FOR_DELIVERY )
		{
			playersToSpawn.append( p )
			Survival_PlayerRespawnedTeammate( respawnCaller, p )
		}
	}

	thread RespawnPlayersInDropship( playersToSpawn, ent )
}
#endif

/*
----- UTILITY -----
*/

int function CountTeammatesWaitingToBeRespawned( int team )
{
	int count = 0
	foreach ( player in GetPlayerArrayOfTeam( team ) )
	{
		if ( !IsAlive( player ) )
		{
			if ( player.GetPlayerNetInt( "respawnStatus" ) == eRespawnStatus.WAITING_FOR_DELIVERY )
				count++
		}
	}
	return count
}

bool function HasTeammatesToRespawn( int team )
{
	return CountTeammatesWaitingToBeRespawned( team ) > 0
}

#if CLIENT
string function RespawnBeacon_TextOverride( entity ent )
{
	entity player = GetLocalViewPlayer()
	entity owner = ent.GetOwner()

	if ( !IsValid( owner ) )
		return ""

	if ( !owner.IsPlayer() )
		return ""

	if ( ent.GetTeam() == player.GetTeam() )
		return Localize( "%use% Respawn " + owner.GetPlayerName() )

	return Localize( "%use% Destroy Respawn Beacon" )
}
#endif

int function GetRespawnStatus( entity player )
{
	if ( !IsValid( player ) )
		return eRespawnStatus.NONE

	return player.GetPlayerNetInt( "respawnStatus" )
}


int function GetRespawnStyle()
{
	int respawnStyle
	string playlistRespawnStyle = GetCurrentPlaylistVarString( "survival_respawn_style", "respawn_chambers" ).tolower()
	bool respawnStyleFound = false

	for( int i = 0; i < eRespawnStyle._COUNT; i++ )
	{
		string enumStyle = GetEnumString( "eRespawnStyle", i )
		if (enumStyle.tolower() == playlistRespawnStyle)
		{
			respawnStyle = i
			respawnStyleFound = true
			break
		}
	}

	Assert( respawnStyleFound, "Playlist Respawn Style '" + playlistRespawnStyle + "' is not a specified enumerator." )

	return respawnStyle
}

#if SERVER
void function DestroyItem( entity ent, entity playerUser )
{
	PlayImpactFXTable( ent.GetOrigin(), ent, "exp_emp" )
	EmitSoundAtPosition( TEAM_UNASSIGNED, ent.GetOrigin(), "Object_Dissolve", ent )
	ent.Dissolve( ENTITY_DISSOLVE_CORE, <0,0,0>, 500 )
}
#endif


#if CLIENT
void function ServerCallback_DisplayWaitingForRespawn( entity ent, float startTime, float endTime )
{
	thread DisplayWaitingForRespawnThread( ent, startTime, endTime )
}

void function DisplayWaitingForRespawnThread( entity ent, float startTime, float endTime )
{
	clGlobal.levelEnt.Signal( "ReviveRuiThread" )
	clGlobal.levelEnt.EndSignal( "SquadEliminated" )
	clGlobal.levelEnt.EndSignal( "ReviveRuiThread" )

	if ( !IsValid( ent ) )
		return

	ent.SetDoDestroyCallback( true )
	ent.EndSignal( "OnDestroy" )

	if ( Time() > endTime )
		return

		DeathScreen_UpdateRespawnTime( startTime, endTime )

	OnThreadEnd(
		function() : ()
		{
		}
	)

	wait endTime - Time()
}

void function DisplayWaitingForStationThread( int state )
{
	/*
	clGlobal.levelEnt.Signal( "ReviveRuiThread" )
	clGlobal.levelEnt.EndSignal( "SquadEliminated" )
	clGlobal.levelEnt.EndSignal( "ReviveRuiThread" )

	string text
	switch ( state )
	{
		case eRespawnStatus.WAITING_FOR_DELIVERY:
			text = "#WAITING_FOR_RESPAWN"
			break
		case eRespawnStatus.PICKUP_DESTROYED:
			text = "#STATUS_PICKUP_DESTROYED"
			break
	}

	UpdateRespawnStatus( state )

	OnThreadEnd(
		function() : ()
		{
			UpdateRespawnStatus( eRespawnStatus.NONE )
		}
	)

	WaitForever()
	*/
}

void function ServerCallback_RespawnPodStarted( float endTime )
{
	thread ReviveRuiThread( endTime )
}

void function ReviveRuiThread( float endTime )
{
	clGlobal.levelEnt.Signal( "ReviveRuiThread" )
	clGlobal.levelEnt.EndSignal( "SquadEliminated" )

	DeathScreen_UpdateRespawnTime( Time(), endTime )

	Chroma_RespawningInDropship()

	OnThreadEnd(
		function() : ()
		{
			Chroma_RespawnComplete()
		}
	)

	wait ( endTime - Time() )
}

void function ServerCallback_RespawnDNAHint()
{
	AddPlayerHint( 10.0, 1.0, $"", "#RESPAWN_AT_BEACONS_HINT" )
}
#endif

#if SERVER
void function RespawnBeacons_OnSquadEliminated( int team )
{
	array<entity> squadMembers = GetPlayerArrayOfTeam( team )
	foreach ( player in squadMembers )
	{
		if ( IsValid( player.p.respawnPod ) )
			player.p.respawnPod.Destroy()

		if ( IsValid( player.p.respawnBeacon ) )
			player.p.respawnBeacon.Destroy()

		player.SetPlayerNetInt( "respawnStatus", eRespawnStatus.SQUAD_ELIMINATED )
	}
}

void function OnDeathBoxSpawned( entity deathbox, entity attacker, int damageSourceID )
{
	entity player = deathbox.GetOwner()
	
	if( GameRules_GetGameMode() == "fs_aimtrainer" )
		return
	
	if ( !IsValid( player ) )
		return

	if ( GetPlayerArrayOfTeam_Alive( player.GetTeam() ).len() == 0 )
		return

	//switch ( damageSourceID )
	//{
	//	case eDamageSourceId.fall:
	//	case eDamageSourceId.splat:
	//	case eDamageSourceId.invalid:
	//		return
	//}

	entity respawnBeacon = CreateWaypoint_RespawnBanner( player, deathbox )
	player.SetPlayerNetInt( "respawnStatus", eRespawnStatus.WAITING_FOR_PICKUP )
	player.SetPlayerNetTime( "respawnStatusEndTime", Time() + RESPAWN_DNA_LIFETIME )
	Remote_CallFunction_NonReplay( player, "ServerCallback_DisplayWaitingForRespawn", respawnBeacon, Time(), player.GetPlayerNetTime( "respawnStatusEndTime" ) )
	thread DelayedDestroyDNA( respawnBeacon, RESPAWN_DNA_LIFETIME )
	thread DeathBoxThink_RespawnBeacon( deathbox, respawnBeacon )
}

void function DeathBoxThink_RespawnBeacon( entity box, entity dna ) // todo(dh) rename?
{
	box.EndSignal( "OnDestroy" )
	dna.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function() : ( box, dna )
		{
			if ( !IsValid( dna ) )
			{
				if ( IsValid( box ) )
				{
					SetTeam( box, TEAM_UNASSIGNED )
					UpdateDeathBoxHighlight( box )

					if ( box.GetLinkEntArray().len() == 0 )
						box.Dissolve( ENTITY_DISSOLVE_CORE, <0,0,0>, 500 )
				}
			}
		}
	)

	box.e.ownerWeapon = dna
	AddCallback_OnUseEntity( box, DeathBoxOnUse )

	WaitForever()
}

void function DeathBoxOnUse( entity box, entity playerUser, int useFlags )
{
	entity dna = box.e.ownerWeapon
	if ( !IsValid( dna ) )
		return

	entity owner = dna.GetOwner()
	if ( !IsValid( owner ) )
		return

	if ( dna.GetTeam() == playerUser.GetTeam() )
	{
		if ( GetCurrentPlaylistVarBool( "respawn_beacon_fp_gladiator_card", true ) )
		{
			playerUser.SetPlayerNetEnt( "gladCardPlayer", owner )
			PlayFirstPersonAnimation( playerUser, "ptpov_burn_card_activate_seq_gladcard" )
		}

		owner.SetPlayerNetInt( "respawnStatus", eRespawnStatus.WAITING_FOR_DELIVERY )
		owner.SetPlayerNetTime( "respawnStatusEndTime", 0 )
		Remote_CallFunction_Replay( playerUser, "ServerCallback_RespawnDNAHint" )
		SetTeam( box, TEAM_UNASSIGNED )

		PingNearestRespawnBeacon( owner, playerUser.GetOrigin() )

		PlayBattleChatterLineToSpeakerAndTeam( playerUser, "bc_gotFriendlyBanner" )

		dna.Destroy()
	}
}

void function PingMyDNA( entity player )
{
	entity dna = player.p.respawnBeacon
	if ( IsValid( dna ) )
	{
		entity wp = CreateWaypoint_Ping_Location( player, ePingType.RESPAWN_CARD, dna, dna.GetOrigin(), -1, false )
		wp.SetAbsOrigin( dna.GetOrigin() )
		wp.SetParent( dna )
	}
}

void function PingNearestRespawnBeacon( entity player, vector origin )
{
	entity station = GetClosestValidStation( origin )
	if ( IsValid( station ) )
	{
		entity wp = CreateWaypoint_Ping_Location( player, ePingType.RESPAWN_STATION, station, station.GetOrigin(), -1, false )
		wp.SetAbsOrigin( station.GetOrigin() + <0, 0, 35> )
		wp.SetParent( station )
	}
}

void function RespawnBeacon_PutPlayerInDropship( entity player, entity ship, int pos, vector teleportOrigin )
{
	ship.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	dropshipAnimData animData = file.dropshipAnimDataList[ pos ]

	FirstPersonSequenceStruct idleAnimSequence
	idleAnimSequence.firstPersonAnim = animData.idlePOVAnim
	idleAnimSequence.thirdPersonAnim = animData.idleAnim
	idleAnimSequence.viewConeFunction = ViewCone360
	idleAnimSequence.attachment = animData.attachment
	idleAnimSequence.hideProxy = animData.hideProxy

	FirstPersonSequenceStruct jumpAnimSequence
	jumpAnimSequence.firstPersonAnim = animData.jumpPOVAnim
	jumpAnimSequence.thirdPersonAnim = animData.jumpAnim
	jumpAnimSequence.viewConeFunction = ViewConeTight
	jumpAnimSequence.attachment = animData.attachment
	jumpAnimSequence.hideProxy = animData.hideProxy

	// player.Signal( "StopPostDeathLogic" )
	AddCinematicFlag( player, CE_FLAG_INTRO )
	AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
	AddCinematicFlag( player, CE_FLAG_EMBARK ) // DoF
	player.SetPlayerNetInt( "respawnStatus", eRespawnStatus.WAITING_FOR_DROPPOD )

	entity dummyEnt = CreatePropDynamic( $"mdl/humans/class/medium/pilot_medium_bloodhound.rmdl" ) // TODO: use generic model.  Can't use player settings here since they could be a spectator
	float idleTime = dummyEnt.GetSequenceDuration( animData.idleAnim )
	float jumpTime = dummyEnt.GetSequenceDuration( animData.jumpAnim )
	float totalTime = idleTime + jumpTime

	Remote_CallFunction_NonReplay( player, "ServerCallback_RespawnPodStarted", Time() + totalTime )
	dummyEnt.Destroy()

	player.p.respawnPod = ship
	player.StartObserverMode( OBS_MODE_CHASE )
	player.SetObserverTarget( ship )
	player.SetPlayerCanToggleObserverMode(false)

	ScreenFadeFromBlack( player, 1.0, 1.0 )

	table<string,bool> e
	e[ "clearDof" ] <- true
	e[ "didHolsterAndDisableWeapons" ] <- false

	OnThreadEnd(
		function () : ( player, e )
		{
			if ( IsValid( player ) )
			{
				RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
				RemoveCinematicFlag( player, CE_FLAG_INTRO )

				if ( e[ "clearDof" ] )
					RemoveCinematicFlag( player, CE_FLAG_EMBARK )

				if ( e[ "didHolsterAndDisableWeapons" ] )
				{
					DeployAndEnableWeapons( player )
					EnableOffhandWeapons( player )
				}
					
				player.SetPlayerNetInt( "respawnStatus", 0 )
				player.p.respawnPod = null
				player.p.respawnPodLanded = false
				player.ClearParent()
				ClearPlayerAnimViewEntity( player )				
			}
		}
	)

	wait idleTime
	
	if(!IsValid(player)) return
	
	player.StopObserverMode()
	ClearPlayerEliminated( player )
	player.p.respawnPodLanded = true
	
	DecideRespawnPlayer( player )
	ResetPlayerInventory( player )
	player.SetOrigin( ship.GetOrigin() )

	thread FadePlayerView( player, 0.1, e )
	HolsterAndDisableWeapons( player )
	e[ "didHolsterAndDisableWeapons" ] <- true
	player.SetInvulnerable()
	EmitSoundOnEntityOnlyToPlayer( player, player, animData.firstPersonJumpOutSound )
	waitthread FirstPersonSequence( jumpAnimSequence, player, ship )

	//return controls
	player.SetAngles( player.GetAngles() ) // this works don't change it
	player.ClearInvulnerable()
	player.UnfreezeControlsOnServer()

	FallTempAirControl( player )
	PlayBattleChatterLineToSpeakerAndTeam( player, "bc_returnFromRespawn" )
	DecideRespawnPlayer( player )
}

void function RespawnBeacon_PutPlayerInDropship2( entity player, entity ship, int pos, vector teleportOrigin )
{
	ship.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	dropshipAnimData animData = file.dropshipAnimDataList[ pos ]

	FirstPersonSequenceStruct idleAnimSequence
	idleAnimSequence.firstPersonAnim = animData.idlePOVAnim
	idleAnimSequence.thirdPersonAnim = animData.idleAnim
	idleAnimSequence.viewConeFunction = ViewCone360
	idleAnimSequence.attachment = animData.attachment
	idleAnimSequence.hideProxy = animData.hideProxy

	FirstPersonSequenceStruct jumpAnimSequence
	jumpAnimSequence.firstPersonAnim = animData.jumpPOVAnim
	jumpAnimSequence.thirdPersonAnim = animData.jumpAnim
	jumpAnimSequence.viewConeFunction = ViewConeTight
	jumpAnimSequence.attachment = animData.attachment
	jumpAnimSequence.hideProxy = animData.hideProxy

	// player.Signal( "StopPostDeathLogic" )
	AddCinematicFlag( player, CE_FLAG_INTRO )
	AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
	AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD_INSTANT )
	AddCinematicFlag( player, CE_FLAG_HIDE_PERMANENT_HUD )
	//AddCinematicFlag( player, CE_FLAG_EMBARK ) // DoF
	entity dummyEnt = CreatePropDynamic( $"mdl/humans/class/medium/pilot_medium_bloodhound.rmdl" ) // TODO: use generic model.  Can't use player settings here since they could be a spectator
	float idleTime = dummyEnt.GetSequenceDuration( animData.idleAnim )
	float jumpTime = dummyEnt.GetSequenceDuration( animData.jumpAnim )
	float totalTime = idleTime + jumpTime
	player.SetPlayerNetInt( "respawnStatus", eRespawnStatus.WAITING_FOR_DROPPOD )
	
	ScreenFadeFromBlack( player, 1.0, 1.0 )

	table<string,bool> e
	e[ "clearDof" ] <- true
	e[ "didHolsterAndDisableWeapons" ] <- false

	OnThreadEnd(
		function () : ( player, e )
		{
			if ( IsValid( player ) )
			{
				RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
				RemoveCinematicFlag( player, CE_FLAG_INTRO )
				RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD_INSTANT )
				RemoveCinematicFlag( player, CE_FLAG_HIDE_PERMANENT_HUD )

				if ( e[ "clearDof" ] )
					RemoveCinematicFlag( player, CE_FLAG_EMBARK )

				if ( e[ "didHolsterAndDisableWeapons" ] )
					DeployAndEnableWeapons( player )
					EnableOffhandWeapons( player )
				player.SetPlayerNetInt( "respawnStatus", 0 )
				player.p.respawnPod = null
				player.p.respawnPodLanded = false
				player.ClearParent()
				ClearPlayerAnimViewEntity( player )
				player.ClearInvulnerable()
				ClearInvincible(player)

			}
		}
	)

	player.SetAbsOrigin( ship.GetOrigin() + <0,0,-58> )
	player.SetParent(ship)
	player.SetAngles(ship.GetAngles())
	EmitSoundOnEntity( ship, "goblin_imc_evac_hover" )

	//waitthread FirstPersonSequence( idleAnimSequence, player, ship )
	wait idleTime
	
	if ( !IsAlive( player ) )
		DecideRespawnPlayer( player )

	EmitSoundOnEntityOnlyToPlayer( player, player, animData.firstPersonJumpOutSound )
	HolsterAndDisableWeapons( player )
	MakeInvincible(player)
	waitthread FirstPersonSequence( jumpAnimSequence, player, ship )
	EnableOffhandWeapons( player )
	DeployAndEnableWeapons( player )
	ClearInvincible(player)
	FallTempAirControl( player )
}

void function FadePlayerView( entity player, float duration, table<string,bool> e )
{
	player.EndSignal( "OnDeath" )
	wait duration
	RemoveCinematicFlag( player, CE_FLAG_EMBARK )
	e[ "clearDof" ] = false
	ScreenFadeFromBlack( player, 1.0, 1.0 )
}

entity function GetClosestValidStation( vector origin )
{
	ArrayRemoveInvalid( file.allStations )

	array<entity> stations = clone file.allStations
	array<ArrayDistanceEntry> allResults = ArrayDistanceResults( stations, origin )
	allResults.sort( DistanceCompareClosest )

	// look for a new battery
	for ( int i = 0; i < allResults.len(); i++ )
	{
		entity station = allResults[i].ent

		if ( !SURVIVAL_DeathFieldIsValid() )
			return station

		if ( SURVIVAL_PosInSafeZone( station.GetOrigin() ) )
			return station
	}

	return null
}

void function FallTempAirControl( entity player )
{
	if ( player.IsOnGround() )
		return

	AddPlayerMovementEventCallback( player, ePlayerMovementEvents.TOUCH_GROUND, OnPlayerTouchGround )
	player.kv.airSpeed = 300
	player.kv.airAcceleration = 1000
}

void function OnPlayerTouchGround( entity player )
{
	RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.TOUCH_GROUND, OnPlayerTouchGround )
	player.kv.airSpeed = player.GetPlayerSettingFloat( "airSpeed" )
	player.kv.airAcceleration = player.GetPlayerSettingFloat( "airAcceleration" )

	player.p.lastRespawnTouchGroundTime = Time()

	PIN_PlayerLandedOnGround( player )
}

entity function GetBestObserverTarget( entity observer, bool reverse )
{
	if ( IsValid( observer.p.respawnPod ) )
	{
		if ( observer.GetObserverMode() != OBS_MODE_CHASE )
			observer.StartObserverMode( OBS_MODE_CHASE )
		return observer.p.respawnPod
	}

	return null
}
#endif


bool function AnaylsisFuncDropshipTestJumpout( FlightPath flightPath, vector origin, float yaw )
{
	vector angles = <0,yaw,0>
	vector forward = AnglesToForward( angles )
	vector right = AnglesToRight( angles )

	if ( !IsLegalFlightPath( flightPath, origin, forward, right, true ) )
		return false

	if ( !CanDeploy( flightPath, origin, angles, forward, right ) )
		return false

	return true
}

bool function CanDeploy( FlightPath flightPath, vector origin, vector angles, vector forward, vector right )
{
	Point deployPoint = GetPreviewPoint( flightPath )
	vector deployOrigin = GetOriginFromPoint( deployPoint, origin, forward, right )
	vector deployAngles = GetAnglesFromPoint( deployPoint, angles )

	// flatten it
	deployAngles.x = 0
	deployAngles.z = 0

	vector deployFwd = AnglesToForward( deployAngles )

	deployOrigin = deployOrigin - deployFwd*150 // move backwards a bit

	TraceResults results = TraceHull( deployOrigin, deployOrigin - <0,0,1000>, <-300,-300,-300>, <300,300,300>, null, flightPath.traceMask, TRACE_COLLISION_GROUP_NONE )
	// DebugDrawSphere( deployOrigin, 20, 255,0,0, true, 5.0 )
	// DebugDrawLine( deployOrigin, results.endPos, 255,0,0, true, 5.0 )
	// DebugDrawSphere( deployOrigin - <0,0,1000>, 20, 255,0,0, true, 5.0 )

	if ( results.startSolid )
		return false

	if ( results.fraction < 1 )
		return false

	return true
}
#if CLIENT
void function TryPingRespawnItem( entity player )
{
	if ( !IsSpectating() )
		return

	entity viewPlayer = GetLocalViewPlayer()

	if ( PlayerIsMarkedAsCanBeRespawned( player ) )
	{
		vector org = viewPlayer.GetOrigin()
		player.ClientCommand( "PingNearestRespawn " + org.x + " " + org.y + " " + org.z )
	}
}
#endif

#if SERVER
bool function ClientCommand_PingNearestRespawn( entity player, array<string> args )
{
	if ( args.len() < 3 )
		return false

	vector org

	org.x = float( args[0] )
	org.y = float( args[1] )
	org.z = float( args[2] )

	float lastPingTime = 0.0
	if ( player in file.lastPingTimes )
		lastPingTime = file.lastPingTimes[ player ]
	else
		file.lastPingTimes[ player ] <- 0.0

	if ( Time() - lastPingTime < 1.0 )
		return true

	file.lastPingTimes[ player ] = Time()

	if ( player.GetPlayerNetInt( "respawnStatus" ) == eRespawnStatus.WAITING_FOR_PICKUP )
	{
		PingMyDNA( player )
	}
	else if ( player.GetPlayerNetInt( "respawnStatus" ) == eRespawnStatus.WAITING_FOR_DELIVERY )
	{
		PingNearestRespawnBeacon( player, org )
	}

	return true
}

void function RespawnBeaconStartUse( entity ent, entity player, ExtendedUseSettings settings )
{
	if ( Time() + settings.duration < 5000 )
	Remote_CallFunction_Replay( player, "ServerCallback_RespawnBeaconStart", Time(), Time() + settings.duration )
}

void function RespawnBeaconStopUse( entity ent, entity player, ExtendedUseSettings settings )
{
	Remote_CallFunction_Replay( player, "ServerCallback_RespawnBeaconStop" )
}
#endif

#if CLIENT
bool function IsRespawnStationPingType( int pingType )
{
	switch( pingType )
	{
		case ePingType.RESPAWN_STATION:
			return true
#if(false)



#endif //
#if(false)



#endif //
	}

	return false
}

void function PlayerWaypoint_CreateCallback( entity wp )
{
	int wpType = wp.GetWaypointType()

	int pingType = Waypoint_GetPingTypeForWaypoint( wp )

	entity pingedEnt = GetPingedEntForLocWaypoint( wp )

	if ( WaypointOwnerIsMuted( wp ) )
		return

	if ( IsRespawnStationPingType( pingType ) )
	{
		if ( IsValid( pingedEnt ) )
		{
			if ( IsRespawnStationEnt( pingedEnt ) )
			{
				var rui = pingedEnt.e.overheadRui
				if ( rui != null )
				{
					RuiSetBool( rui, "isVisible", false )
				}
			}
		}
	}

	if ( pingType == ePingType.RESPAWN_CARD )
	{
		if ( IsValid( pingedEnt ) && pingedEnt.GetNetworkedClassName() == PLAYER_WAYPOINT_CLASSNAME )
		{
			var rui = pingedEnt.wp.ruiHud
			if ( rui != null )
			{
				RuiSetGameTime( rui, "startPingTime", Time() )
			}
		}
	}
}

void function PlayerWaypoint_DestroyCallback( entity wp )
{
	int wpType = wp.GetWaypointType()

	int pingType = Waypoint_GetPingTypeForWaypoint( wp )

	entity pingedEnt = GetPingedEntForLocWaypoint( wp )

	if ( IsRespawnStationPingType( pingType ) )
	{
		if ( IsValid( pingedEnt ) )
		{
			if ( IsRespawnStationEnt( pingedEnt ) )
			{
				var rui = pingedEnt.e.overheadRui
				if ( rui != null )
				{
					RuiSetBool( rui, "isVisible", true )
				}
			}
		}
	}
}

void function ServerCallback_RespawnBeaconStart( float startTime, float endTime )
{
	if ( IsSpectating() )
	{
		thread SpectatorShowRespawnRui( startTime, endTime )
	}
}

void function SpectatorShowRespawnRui( float startTime, float endTime )
{
	entity player = GetLocalViewPlayer()

	if ( !IsValid( player ) )
		return

	if ( Time() > endTime )
		return

	player.EndSignal( "OnDeath" )
	clGlobal.levelEnt.EndSignal( "SpectatorShowRespawnRui" )

	var rui = CreateFullscreenRui( $"ui/health_use_progress.rpak" )
	DisplayRuiForRespawnChamber_Internal( rui, RESPAWN_BEACON_ICON, startTime, endTime, "#HINT_RESPAWNING" )

	EmitSoundOnEntity( player, RESPAWN_BEACON_LOOP_SOUND )

	OnThreadEnd(
		function() : ( rui , player )
		{
			if ( IsValid( player ) )
			{
				StopSoundOnEntity( player, RESPAWN_BEACON_LOOP_SOUND )
			}

			RuiDestroy( rui )
		}
	)

	float waitTime = endTime - Time()
	wait waitTime
	EmitSoundOnEntity( player, RESPAWN_BEACON_SUCCESS_SOUND )
}

void function ServerCallback_RespawnBeaconStop()
{
	if ( IsSpectating() )
		clGlobal.levelEnt.Signal( "SpectatorShowRespawnRui" )
}
#endif

#if SERVER
// 323 lines
#endif
bool function IsRespawnStationEnt( entity ent )
{
	switch( ent.GetTargetName() )
	{
		case RESPAWN_CHAMBER_TARGETNAME:
			return true

#if(false)
// 3 lines
#endif //

#if(false)
// 3 lines
#endif //
	}

	return false
}

#if(false)
// 20 lines
#endif

