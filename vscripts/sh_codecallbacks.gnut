global function CodeCallbacksShared_Init

global function CodeCallback_AnimationDone
global function CodeCallback_AnimationInterrupted
global function CodeCallback_CanUseEntity
global function ClearCallback_CanUseEntityCallback
global function SetCallback_CanUseEntityCallback
global function CodeCallback_CanUseZipline
global function CodeCallback_PlayerClassChanged
global function CodeCallback_OnUseEntity
//global function CodeCallback_OnUseStart
global function CodeCallback_OnUseEnd
global function CodeCallback_OnUseButtonPressed
global function CodeCallback_OnUseButtonReleased
global function AddCallback_OnUseButtonPressed
global function RemoveCallback_OnUseButtonPressed
global function AddCallback_OnUseButtonReleased
global function RemoveCallback_OnUseButtonReleased
global function ResetZiplineUsageDelayed

global function CodeCallback_ForceScriptError

global function AddCallback_PlayerClassChanged
global function AddCallback_PlayerCanUseZipline

global function CodeCallback_CanPlayerReload

#if CLIENT
global function CodeCallback_OnTurretCancelPressed
global function CodeCallback_OnWeaponDisable
global function ClientCodeCallback_PartyUpdated
global function ClientCodeCallback_PartyMemberAdded
global function ClientCodeCallback_PartyMemberRemoved
global function ClientCodeCallback_UserInfoUpdated
global function AddCallback_OnPartyUpdated
global function RemoveCallback_OnPartyUpdated
global function AddCallback_PlayerClassActuallyChanged
#endif

#if SERVER
global function CodeCallback_OnWeaponReload
global function SetCallback_OnPlayerReload
global function CodeCallback_OnReloadButtonPressed
global function SetCallback_OnReloadButtonPressed
#endif

global function AddCallback_OnVehicleLaunch
global function CodeCallback_OnVehicleLaunch
global function AddCallback_OnVehicleCollide
global function CodeCallback_OnVehicleCollide

global function AddCallback_OnPlayerChangedTeam
global function AddCallback_OnPlayerZoomIn
global function AddCallback_OnPlayerZoomOut

global function AddCallback_CheckPlayerCanUse
global function RemoveCallback_CheckPlayerCanUse

#if CLIENT
global function ServerCallback_PlayerChangedTeams
#endif

global function CodeCallback_OnPlayerStartZoomIn
global function CodeCallback_OnPlayerStartZoomOut

global function CodeCallback_CanStartCustomWeaponActivity
global function AddCallback_CanStartCustomWeaponActivity

struct
{
	#if SERVER
		void functionref( entity ) Callback_OnPlayerReload
		void functionref( entity ) Callback_OnPlayerReloadPressed
		table<entity, int>         currentPlayerTeamMap
	#endif
	#if CLIENT
		var disembarkRUI

		array< void functionref() > partyUpdatedCallbacks
	#endif

	array<bool functionref( entity, entity )> canPlayerUseCheckCallbacks

} file

void function CodeCallbacksShared_Init()
{
	RegisterSignal( "NewZiplineUse" )
	RegisterSignal( "OnAnimationDone" )
	RegisterSignal( "OnAnimationInterrupted" )
	RegisterSignal( "SettingsChanged" )
	RegisterSignal( "OnPrimaryAttack" )

	// these signals get sent to an entity when a player uses that entity
	RegisterSignal( "OnPlayerUse" )
	RegisterSignal( "OnPlayerUseLong" )
	RegisterSignal( "OnPlayerUseAlt" )

	// this signal gets sent to a player when that player presses a use button
	RegisterSignal( "PlayerPressedUse" )

	#if CLIENT
		RegisterConCommandTriggeredCallback( "-useAndReload", CancelDisembark )
		RegisterConCommandTriggeredCallback( "-use", CancelDisembark )
	if(GameRules_GetGameMode() == SURVIVAL)
		RegisterConCommandTriggeredCallback( "+offhand4", CheckForAccelerants )
	#endif

	#if SERVER
		SetCallback_OnPlayerReload( PlayerReloadGamemodeLogic_Default )
	#endif

	#if SERVER
		AddCallback_EntityChangedTeam( "player", OnPlayerEntityChangedTeam )
		AddCallback_OnClientConnected( OnClientConnected )
		AddCallback_OnClientDisconnected( OnClientDisconnected )
	#endif
}


void function CodeCallback_AnimationDone( entity ent )
{
	Signal( ent, "OnAnimationDone" )
}


void function CodeCallback_AnimationInterrupted( entity ent )
{
	Signal( ent, "OnAnimationInterrupted" )
}

// better to not define these than just return true. Otherwise code will call these function for no reason

void function ClearCallback_CanUseEntityCallback( entity ent )
{
	ent.e.canUseEntityCallback = null
}


void function SetCallback_CanUseEntityCallback( entity ent, bool functionref( entity, entity ) callbackFunc )
{
	Assert( ent.e.canUseEntityCallback == null )
	ent.e.canUseEntityCallback = callbackFunc
}


bool function CodeCallback_CanUseEntity( entity player, entity ent )
{
	if ( !IsAlive( player ) )
		return false

	if ( player.IsPhaseShifted() )
		// it's not really there!
		return false

	if ( GetGameState() >= eGameState.WinnerDetermined )
		return false

	if ( ent == player )
	{
		return false
	}

	if ( ent.IsNPC() )
	{
		// handle leeching separately
		if ( Leech_IsLeechable( ent ) )
			return false
	}

	if ( player.IsTitan() )
	{
		return !ent.IsTitan()
	}

	if ( ent.IsTitan() )
	{
		return PlayerCanEmbarkTitan( player, ent )
	}

	if ( ent.IsNPC() )
	{
		// player titan can't use NPCs
		if ( !player.IsTitan() )
		{
			// not titan NPCs are not usable
			//if ( !( ent.IsTitan() || IsTurret( ent ) ) )
			//	return false

			if ( !IsAlive( ent ) )
				return false
		}
	}

	if ( ent.e.canUseEntityCallback != null )
		return ent.e.canUseEntityCallback( player, ent )

	foreach ( bool functionref( entity, entity ) callbackFunc in file.canPlayerUseCheckCallbacks )
	{
		if ( !callbackFunc( player, ent ) )
			return false
	}

	return true
}

void function ResetZiplineUsageDelayed(entity player)
{
	if(!IsValid(player)) return
	
	if(IsValid(player.Zipline_GetActiveZipline()) && IsValid(player.Zipline_GetLastZipline()) && player.Zipline_GetActiveZipline() != player.Zipline_GetLastZipline())
	{
		player.p.ziplineUsages = 0
		return
	}
	
	Signal( player, "NewZiplineUse" )
	EndSignal( player, "NewZiplineUse" )
	
	bool clearScore = false

	float maxTime = Time() + ZIPLINES_COOLDOWN
	
	while( Time() < maxTime )
		WaitFrame()
	
	if(IsValid(player))
		player.p.ziplineUsages = 0
}

const float ZIPLINE_MAX_USE_ANGLE = 35.0
bool function CodeCallback_CanUseZipline( entity player, entity zipline, vector ziplineClosestPoint )
{
	if ( !IsValid( player ) )
		return false
	
	if ( !player.IsHuman() )
		return false

	if ( player.IsOnGround() )
	{
		if ( !PlayerCanSeePos( player, ziplineClosestPoint, false, ZIPLINE_MAX_USE_ANGLE ) )
			return false

		entity weapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )
		if ( IsValid( weapon ) && weapon.IsWeaponInAds() )
			return false
	}

	if ( GetGameState() >= eGameState.WinnerDetermined )
		return false
	
	if(player.p.ziplineUsages == 3)
			return false
		
	#if SERVER
		foreach ( func in svGlobal.canUseZiplineCallbacks )
		{
			if ( !func( player, zipline, ziplineClosestPoint ) )
				return false
		}
	#else
		foreach ( func in clGlobal.canUseZiplineCallbacks )
		{
			if ( !func( player, zipline, ziplineClosestPoint ) )
				return false
		}
	#endif

	return true
}


void function AddCallback_PlayerCanUseZipline( bool functionref( entity, entity, vector ) callbackFunc )
{
	#if SERVER
		svGlobal.canUseZiplineCallbacks.append( callbackFunc )
	#else
		clGlobal.canUseZiplineCallbacks.append( callbackFunc )
	#endif
}


bool function CodeCallback_CanPlayerReload( entity player )
{
	if ( player.p.isInExtendedUse )
		return false

	return true
}

void function AddCallback_PlayerClassChanged( void functionref( entity ) callbackFunc )
{
	#if SERVER
		svGlobal.onPlayerClassChangedCallbacks.append( callbackFunc )
	#else
		clGlobal.onPlayerClassChangedCallbacks.append( callbackFunc )
	#endif
}

#if CLIENT
void function AddCallback_PlayerClassActuallyChanged( void functionref( entity ) callbackFunc )
{
	clGlobal.onPlayerClassActuallyChangedCallbacks.append( callbackFunc )
}
#endif

void function CodeCallback_PlayerClassChanged( entity player, bool actualSettingsFileChanged )
{
	//printt(FUNC_NAME(), player, "actualSettingsFileChanged", actualSettingsFileChanged)
	if ( !IsValid( player ) )
		return

	if ( IsLobby() )
		return

	player.Signal( "SettingsChanged" )
	string newClass = player.GetPlayerClass()

	#if SERVER
		foreach ( callbackFunc in svGlobal.onPlayerClassChangedCallbacks )
		{
			callbackFunc( player )
		}
		if ( IsAlive( player ) && IsValid( player ) && GetCurrentPlaylistVarFloat( "pilot_health_multiplier", 0.0 ) != 0.0 )
		{
			float pilotHealthMultiplier = GetCurrentPlaylistVarFloat( "pilot_health_multiplier", 1.0 )
			int pilotMaxHealth          = int( player.GetMaxHealth() * pilotHealthMultiplier )
			player.SetMaxHealth( pilotMaxHealth )
			player.SetHealth( pilotMaxHealth )
		}
	#else
		foreach ( callbackFunc in clGlobal.onPlayerClassChangedCallbacks )
		{
			callbackFunc( player )
		}
	#endif

	#if CLIENT
		player.classChanged = true
		// Force titan to cast shadows in first person
		//player.ForceShadowVisible( newClass == "titan" )

		UpdatePlayerStatusCounts()
		MapConVar_Init()

		/*if ( IsWatchingReplay() )
			UpdateKillReplayIconPosition()*/
	#else
		if(IsValid( player ) ){
		player.kv.renderColor = "255 255 255 255"
		TakeAllPassives( player )
		InitDamageStates( player )
		if ( GameRules_GetGameMode() == "survival" )// Survey Beacon Minimap Icon
			thread SetSurveyBaconMinimapVisibility( player )}
	#endif

	//if ( IsClient() && !player.IsTitan() )
	//	HideRodeoAlert()

	//if ( IsPilot( player ) )
	//	thread PilotHardLandingThink( player )

	#if SERVER
		player.Signal( "OnChangedPlayerClass" )

		UpdatePlayerMinimapMaterials( player )
	#endif
}

#if SERVER
void function CodeCallback_OnWeaponReload( entity weapon )
{
	entity weaponOwner = weapon.GetWeaponOwner()
	if ( !IsAlive( weaponOwner ) )
		return

	if ( !weaponOwner.IsPlayer() )
		return

	if ( !IsPilot( weaponOwner ) )
		return

	//This calls a function that can be set per gamemode. Runs an empty function by default.
	file.Callback_OnPlayerReload( weaponOwner )

	#if GRUNTCHATTER_ENABLED
		if ( NPC_GruntChatterSPEnabled( weaponOwner ) )
			GruntChatter_TryPlayerPilotReloading( weaponOwner )
	#endif
}

void function SetCallback_OnPlayerReload( void functionref( entity ) rules )
{
	file.Callback_OnPlayerReload = rules
}

void function SetCallback_OnReloadButtonPressed( void functionref( entity ) callback )
{
	file.Callback_OnPlayerReloadPressed = callback
}

#if SERVER
void function CodeCallback_OnReloadButtonPressed( entity player )
{
	if ( file.Callback_OnPlayerReloadPressed != null )
		file.Callback_OnPlayerReloadPressed( player )
}
#endif

void function PlayerReloadGamemodeLogic_Default( entity player )
{
}
#endif

bool function CodeCallback_OnUseEntity( entity player, entity ent, int useInputFlags )
{
	// use AddCallback_OnUseEntity( ent, callbackFunc ) to add a on use callback function
	foreach ( callbackFunc in ent.e.onUseEntityCallbacks )
	{
		callbackFunc( ent, player, useInputFlags )
	}

	if ( useInputFlags & USE_INPUT_DEFAULT )
		Signal( ent, "OnPlayerUse", { player = player } )
	if ( useInputFlags & USE_INPUT_LONG )
		Signal( ent, "OnPlayerUseLong", { player = player } )
	if ( useInputFlags & USE_INPUT_ALT )
		Signal( ent, "OnPlayerUseAlt", { player = player } )

	#if CLIENT
		if ( IsFirstTimePredicted() )
		{
			if ( useInputFlags & USE_INPUT_DEFAULT && ent.e.predictedUseSuccess )
				ent.e.predictedUseCount += 1
		}
	#endif // SERVER

	// return true to tell code to run its code to use the entity
	return true
}


void function AddCallback_CheckPlayerCanUse( bool functionref( entity, entity ) callback )
{
	Assert( !file.canPlayerUseCheckCallbacks.contains( callback ), "Callback registered twice" )
	file.canPlayerUseCheckCallbacks.append( callback )
}


void function RemoveCallback_CheckPlayerCanUse( bool functionref( entity, entity ) callback )
{
	Assert( file.canPlayerUseCheckCallbacks.contains( callback ), "Callback was not registered" )
	file.canPlayerUseCheckCallbacks.fastremovebyvalue( callback )
}


#if CLIENT
void function CancelDisembark( entity player )
{
	if ( file.disembarkRUI != null )
	{
		RuiDestroy( file.disembarkRUI )
		file.disembarkRUI = null
	}
}

void function CheckForAccelerants( entity player )
{
	if(player != GetLocalClientPlayer()) return
		
	//printt("Flowstate DEBUG - Trying to use ultimate.")
	entity ultimateAbility = player.GetOffhandWeapon( OFFHAND_INVENTORY )
	if ( !IsValid( ultimateAbility ) )
		return

	int ammoNow = ultimateAbility.GetWeaponPrimaryClipCount()
	int ammoMax = ultimateAbility.GetWeaponPrimaryClipCountMax()
	
	if ( ammoNow < ammoMax )
	{
		//check for accelerants here
		//printt("Flowstate DEBUG - Check for accelerants here.")
		array<ConsumableInventoryItem> playerInventory = SURVIVAL_GetPlayerInventory( player )

		foreach ( invItem in playerInventory )
		{	
			if(invItem.type == 43)
			{
				Consumable_UseItemByType(player, 5)
				SURVIVAL_RemoveFromPlayerInventory(player, "health_pickup_ultimate", 1)
				//printt("Flowstate DEBUG - Ultimate accelerant found! Recharging ultimate and removing item from inventory...")
			} else {
				//printt("Flowstate DEBUG - Ultimate accelerant not found!")	
			}
		}

	} else if ( ammoNow >= ammoMax )
	{
		printt("Flowstate DEBUG - Ultimate is ready we can't use accelerants.")
	}
}

#endif

/*
void function CodeCallback_OnUseStart( entity player )
{
}
*/

void function CodeCallback_OnUseEnd( entity player )
{
	if ( player.Lunge_IsActive() )
		player.Lunge_ClearTarget()
}


void function AddCallback_OnUseButtonPressed( entity player, void functionref( entity ) callbackFunc )
{
	Assert( player.IsPlayer() )
	Assert( !player.e.onPlayerUseButtonPressed.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " to entity" )

	player.e.onPlayerUseButtonPressed.append( callbackFunc )
}


void function RemoveCallback_OnUseButtonPressed( entity player, void functionref( entity ) callbackFunc )
{
	int ornull funcPos = player.e.onPlayerUseButtonPressed.find( callbackFunc )
	Assert( funcPos != null, "Cannot remove " + string( callbackFunc ) + " that was not added to entity" )
	player.e.onPlayerUseButtonPressed.remove( expect int( funcPos ) )
}


void function CodeCallback_OnUseButtonPressed( entity player )
{
	player.Signal( "PlayerPressedUse" )
	// use AddCallback_OnUseButtonPressed( ent, callbackFunc ) to add a on push callback function
	foreach ( callbackFunc in player.e.onPlayerUseButtonPressed )
	{
		callbackFunc( player )
	}
}


void function AddCallback_OnUseButtonReleased( entity player, void functionref( entity ) callbackFunc )
{
	Assert( player.IsPlayer() )
	Assert( !player.e.onPlayerUseButtonReleased.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " to entity" )

	player.e.onPlayerUseButtonReleased.append( callbackFunc )
}


void function RemoveCallback_OnUseButtonReleased( entity player, void functionref( entity ) callbackFunc )
{
	int ornull funcPos = player.e.onPlayerUseButtonReleased.find( callbackFunc )
	Assert( funcPos != null, "Cannot remove " + string( callbackFunc ) + " that was not added to entity" )
	player.e.onPlayerUseButtonReleased.remove( expect int( funcPos ) )
}


void function CodeCallback_OnUseButtonReleased( entity player )
{
	// use AddCallback_OnUseButtonReleased( ent, callbackFunc ) to add a on push callback function
	foreach ( callbackFunc in player.e.onPlayerUseButtonReleased )
	{
		callbackFunc( player )
	}
}

#if CLIENT
void function CodeCallback_OnTurretCancelPressed( entity player )
{
	if ( InPrediction() && !IsFirstTimePredicted() )
		return

	ScreenFade( player, 0, 0, 0, 255, 0.1, 1.0, FFADE_OUT )
}
#endif // #if CLIENT

// code triggering script error with useful message
void function CodeCallback_ForceScriptError( entity ent, string errorMsg )
{
	Assert( 0, errorMsg )
}


void function AddCallback_OnVehicleLaunch( entity ent, void functionref( entity ) callbackFunc )
{
	Assert( !ent.e.onVehicleLaunchCallbacks.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " to entity" )

	ent.e.onVehicleLaunchCallbacks.append( callbackFunc )
}


void function CodeCallback_OnVehicleLaunch( entity vehicle )
{
	// use AddCallback_OnVehicleLaunch( ent, callbackFunc ) to add a on push callback function
	foreach ( callbackFunc in vehicle.e.onVehicleLaunchCallbacks )
	{
		callbackFunc( vehicle )
	}
}


void function AddCallback_OnVehicleCollide( entity ent, void functionref( entity ) callbackFunc )
{
	Assert( !ent.e.onVehicleCollideCallbacks.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " to entity" )

	ent.e.onVehicleCollideCallbacks.append( callbackFunc )
}


void function CodeCallback_OnVehicleCollide( entity vehicle )
{
	// use AddCallback_OnVehicleCollide( ent, callbackFunc ) to add a on push callback function
	foreach ( callbackFunc in vehicle.e.onVehicleCollideCallbacks )
	{
		callbackFunc( vehicle )
	}
}


array <void functionref(entity, int, int)> s_callbacksOnPlayerChangedTeam
void function AddCallback_OnPlayerChangedTeam( void functionref( entity player, int oldTeam, int newTeam ) func )
{
	s_callbacksOnPlayerChangedTeam.append( func )
}

array <void functionref(entity)> s_callbacksOnPlayerZoomIn
void function AddCallback_OnPlayerZoomIn( void functionref( entity player ) func )
{
	s_callbacksOnPlayerZoomIn.append( func )
}

array <void functionref(entity)> s_callbacksOnPlayerZoomOut
void function AddCallback_OnPlayerZoomOut( void functionref( entity player ) func )
{
	s_callbacksOnPlayerZoomOut.append( func )
}

table < int, array <bool functionref(entity, int)> > s_callbacksCanStartCustomWeaponActivity
void function AddCallback_CanStartCustomWeaponActivity( int activity, bool functionref( entity player, int activity ) func )
{
	if ( !(activity in s_callbacksCanStartCustomWeaponActivity) )
	{
		s_callbacksCanStartCustomWeaponActivity[ activity ] <- []
	}

	Assert( !s_callbacksCanStartCustomWeaponActivity[ activity ].contains( func ) )
	s_callbacksCanStartCustomWeaponActivity[activity].append( func )
}

#if SERVER
void function OnClientConnected( entity player )
{
	file.currentPlayerTeamMap[player] <- player.GetTeam()
}


void function OnClientDisconnected( entity player )
{
	if ( player in file.currentPlayerTeamMap )
		delete file.currentPlayerTeamMap[player]

	UpdatePlayerCounts()
}

void function OnPlayerEntityChangedTeam( entity player )
{
	// Assert( player.GetClassName() == "player" )
	int oldTeam = (player in file.currentPlayerTeamMap ? file.currentPlayerTeamMap[player] : TEAM_INVALID)
	int newTeam = player.GetTeam()

	foreach( void functionref(entity, int, int) callbackFunc in s_callbacksOnPlayerChangedTeam )
		callbackFunc( player, oldTeam, newTeam )

	foreach ( ent in GetPlayerArray() )
		Remote_CallFunction_Replay( ent, "ServerCallback_PlayerChangedTeams", player, oldTeam, newTeam )
}
#endif

#if CLIENT
void function ServerCallback_PlayerChangedTeams( entity player, int oldTeam, int newTeam )
{
	if ( !IsValid( player ) )
		return // todo(dw)

	ShEHI_OnPlayerChangedTeam( player, oldTeam, newTeam )

	foreach( void functionref(entity, int, int) callbackFunc in s_callbacksOnPlayerChangedTeam )
		callbackFunc( player, oldTeam, newTeam )

	#if DEVELOPER
		if ( oldTeam == TEAM_INVALID || newTeam == TEAM_INVALID )
			return

		if ( !IsValid( player ) )
			return

		string playerName = player.GetPlayerName()
		vector playerNameColor = OBITUARY_COLOR_ENEMY
		string teamString      = "Team " + newTeam

		if ( newTeam == 1 )
		{
			playerNameColor = <200, 200, 210>
			teamString = "Spectator"
		}
		else if ( newTeam == GetLocalViewPlayer().GetTeam() )
		{
			playerNameColor = OBITUARY_COLOR_FRIENDLY
			//teamString = "FRIENDLY"
		}

		//if ( !IsRecruitMode() )
		//	Obituary_Print( playerName, "CHANGED TEAMS TO", teamString, playerNameColor, OBITUARY_COLOR_WEAPON, playerNameColor )
	#endif
	//"Switching " + player.GetPlayerNameWithClanTag() + " from " + GetTeamStr( team1 ) + " to " + GetTeamStr( team2 )
}
#endif

void function CodeCallback_OnPlayerStartZoomIn( entity player )
{
	foreach ( func in s_callbacksOnPlayerZoomIn )
	{
		func( player )
	}
}


void function CodeCallback_OnPlayerStartZoomOut( entity player )
{
	foreach ( func in s_callbacksOnPlayerZoomOut )
	{
		func( player )
	}
}


bool function CodeCallback_CanStartCustomWeaponActivity( entity player, int activity )
{
	if ( activity in s_callbacksCanStartCustomWeaponActivity )
	{
		foreach ( func in s_callbacksCanStartCustomWeaponActivity[ activity ] )
		{
			if ( !func( player, activity ) )
				return false
		}
	}

	return true
}

#if CLIENT
void function CodeCallback_OnWeaponDisable( entity weapon )
{
	entity weaponOwner = weapon.GetWeaponOwner()
	if ( !IsAlive( weaponOwner ) )
		return

	if ( !weaponOwner.IsPlayer() )
		return

	if ( !IsPilot( weaponOwner ) )
		return

	if ( weaponOwner != GetLocalClientPlayer() || weaponOwner != GetLocalViewPlayer() )
		return

	HidePlayerHint( "#NO_RESERVE_AMMO" )
}

void function ClientCodeCallback_PartyUpdated()
{
	printt( "ClientCodeCallback_PartyUpdated" )
	foreach ( callbackFunc in file.partyUpdatedCallbacks )
	{
		callbackFunc()
	}
}

void function ClientCodeCallback_PartyMemberAdded()
{
	printt( "ClientCodeCallback_PartyMemberAdded" )
}

void function ClientCodeCallback_PartyMemberRemoved()
{
	printt( "ClientCodeCallback_PartyMemberRemoved" )
}

void function ClientCodeCallback_UserInfoUpdated( string hardware, string uid )
{
	printt( "ClientCodeCallback_UserInfoUpdated( " + hardware + ", " + uid + ")" )
}

void function AddCallback_OnPartyUpdated( void functionref() callbackFunc )
{
	if ( file.partyUpdatedCallbacks.contains( callbackFunc ) )
	{
		Assert( false, "Tried to add a callback that was already added" )
	}

	file.partyUpdatedCallbacks.append( callbackFunc )
}

void function RemoveCallback_OnPartyUpdated( void functionref() callbackFunc )
{
	Assert( file.partyUpdatedCallbacks.contains( callbackFunc ) )
	file.partyUpdatedCallbacks.fastremovebyvalue( callbackFunc )
}
#endif
