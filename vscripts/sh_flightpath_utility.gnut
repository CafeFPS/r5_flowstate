#if SERVER
untyped
#endif

globalize_all_functions

global const ANALYSIS_PREVIEW_TIME = 5.0
global const vector AIRDROP_MAXS = <80,80,256>
global  const vector AIRDROP_MINS = <-80,-80,0>

struct AirdropBadPlace
{
	int id
	vector origin
	int radius
	entity ownerEnt
}

struct
{
	array<AirdropBadPlace> airdropBadPlaceArray
	int                    airdropBadPlaceCount

	array<entity> airdropTraceIgnoreEntArray
} file

vector function GetOriginFromAttachPoint( AttachPoint point, vector origin, vector forward, vector right )
{
	origin += forward * point.origin.x
	origin += right * -point.origin.y
	origin += <0, 0, point.origin.z>
	return origin
}


vector function GetOriginFromPoint( Point point, vector origin, vector forward, vector right )
{
	origin += forward * point.origin.x
	origin += right * -point.origin.y
	origin += <0, 0, point.origin.z>
	return origin
}


vector function GetAnglesFromAttachPoint( AttachPoint point, vector angles )
{
	return AnglesCompose( angles, point.angles )
}


vector function GetAnglesFromPoint( Point point, vector angles )
{
	return AnglesCompose( angles, point.angles )
}


array<vector> function GetFlightPathPoints( FlightPath flightPath, vector origin, vector forward, vector right )
{
	array<vector> orgs = []
	for ( int i = 0; i < flightPath.points.len(); i++ )
	{
		AttachPoint point = flightPath.points[i]
		vector foundOrigin = GetOriginFromAttachPoint( point, origin, forward, right )

		orgs.append( foundOrigin )
	}

	return orgs
}

#if SERVER
void function InitCallinData( CallinData drop )
{
	drop.npcSpawnFuncs = [ CreateSoldier, CreateSoldier, CreateSoldier, CreateSoldier, CreateSoldier, CreateSoldier ]
}

vector function GetAnalysisNodePos( FlightPath flightPath, int node )
{
	vector origin = NavMeshNode_GetNodePos( node )

	if ( flightPath.model in level.superCallinOffset )
	{
		origin.z += expect float( level.superCallinOffset[ flightPath.model ] )
	}

	return origin
}
#endif // SERVER

bool function IsLegalFlightPath( FlightPath flightPath, vector origin, vector forward, vector right, bool draw = false )
{
	array<vector> orgs = GetFlightPathPoints( flightPath, origin, forward, right )

	vector endPos = orgs[ orgs.len()-1 ]

	DoTraceCoordCheck( false )

	for ( int i = 1; i < orgs.len(); i++ )
	{
		TraceResults result = TraceHull( orgs[i-1], orgs[i], flightPath.mins, flightPath.maxs, null, flightPath.traceMask, TRACE_COLLISION_GROUP_NONE )
		if ( result.fraction < 1 )
		{
			if ( result.hitSky )
			{
				//DebugDrawLine( orgs[i-1], orgs[i], 0, 255, 0, true, ANALYSIS_PREVIEW_TIME )
				continue
			}

			if ( Distance( result.endPos, endPos ) > 16 )
			{
				//if ( draw )
				//	DebugDrawLine( orgs[i-1], orgs[i], 255, 0, 0, true, ANALYSIS_PREVIEW_TIME )

				DoTraceCoordCheck( true )
				return false
			}
		}

		//if ( draw )
		//	DebugDrawLine( orgs[i-1], orgs[i], 0, 255, 0, true, ANALYSIS_PREVIEW_TIME )
	}

	//DebugDrawLine( result.endPos, result.endPos + RandomVec( 50.0 ), 255, 255, 0, true, 0.2 )
	DoTraceCoordCheck( true )
	return true
}

bool function IsLegalFlightPath_OverTime( FlightPath flightPath, vector origin, vector forward, vector right, bool draw = false )
{
	array<vector> orgs = GetFlightPathPoints( flightPath, origin, forward, right )

	vector endPos = orgs[ orgs.len()-1 ]

	DoTraceCoordCheck( false )

	for ( int i = 1; i < orgs.len(); i++ )
	{
		TraceResults result = TraceHull( orgs[i-1], orgs[i], flightPath.mins, flightPath.maxs, null, flightPath.traceMask, TRACE_COLLISION_GROUP_NONE )
		if ( result.fraction < 1 )
		{
			if ( result.hitSky )
			{
				if ( draw )
					DebugDrawLine( orgs[i-1], orgs[i], 0, 255, 0, true, ANALYSIS_PREVIEW_TIME )
				continue
			}

			if ( Distance( result.endPos, endPos ) > 16 )
			{
				if ( draw )
					DebugDrawLine( orgs[i-1], orgs[i], 255, 0, 0, true, ANALYSIS_PREVIEW_TIME )

				DoTraceCoordCheck( true )
				return false
			}
		}

		if ( draw )
			DebugDrawLine( orgs[i-1], orgs[i], 0, 255, 0, true, ANALYSIS_PREVIEW_TIME )

		WaitFrame()
	}

	//DebugDrawLine( result.endPos, result.endPos + RandomVec( 50.0 ), 255, 255, 0, true, 0.2 )
	DoTraceCoordCheck( true )
	return true
}

#if SERVER
int function NodeAnalysis( FlightPath flightPath, int index, vector offset )
{
	array<bool> Array = []
	Array.resize( ANALYSIS_STEPS )

	vector origin = NavMeshNode_GetNodePos( index )
	origin = origin + offset

	TryAnalysisAtOrigin( flightPath, Array, origin )

	int dataIndex = GetAnalysisDataIndex( flightPath )
	int count = 0

	for ( int p = 0; p < Array.len(); p++ )
	{
		if ( !Array[ p ] )
		{
			//printt( index + " " + p )
			continue
		}

		NavMeshNode_SetBooleanData( index, dataIndex + p, true )
		count++
		//printt( index + " *" + p + "*" )
	}

	return count
}

int function NodeAnalysisPreview( FlightPath flightPath, int index, vector offset )
{
	array<bool> Array = []
	Array.resize( ANALYSIS_STEPS )

	vector origin = NavMeshNode_GetNodePos( index )
	origin = origin + offset

	TryAnalysisAtOriginPreview( flightPath, Array, origin )
	int dataIndex = GetAnalysisDataIndex( flightPath )
	int count = 0

	for ( int p = 0; p < Array.len(); p++ )
	{
		if ( !Array[ p ] )
		{
			printt( ( p + dataIndex ) + ": False" )
			continue
		}

		printt( ( p + dataIndex ) + ": True" )
		float yaw = p * ANALYSIS_YAW_STEP
		vector angles = <0,yaw,0>
		vector forward = AnglesToForward( angles )
		//DebugDrawLine( origin, origin + forward * 80, 255, 100, 0, true, 5.0 )
		count++
	}

	return count
}

void function TryAnalysisAtOriginPreview( FlightPath flightPath, array<bool> Array, vector origin )
{
	if ( FLIGHT_PATH_DEBUG )
		DebugDrawAxis( origin )
	TryAnalysisAtOrigin( flightPath, Array, origin )
}

SpawnPointFP function GetNearestSpawnPointFromFunc( FlightPath flightPath, vector origin, int count, var functionref( int, int, float, float ) getFunc, float variable )
{
	//DebugDrawLine( origin, origin + <0,0,100>, 255, 0, 255, true, 2.0 )
	int node = NavMeshNode_GetNearestNodeToPos( origin )
	if ( node == -1 )
	{
		//DebugDrawLine( origin, origin + <0,0,100>, 255, 0, 0, true, 5.0 )
		origin = OriginToGround( origin )
		node = NavMeshNode_GetNearestNodeToPos( origin )

		if ( node == -1 )
		{
			//DebugDrawLine( origin, origin + <0,0,100>, 255, 0, 0, true, 5.0 )
			return InvalidSpawnPoint()
		}
	}

	//DebugDrawLine( origin, NavMeshNode_GetNodePos( node, flightPath.hull ), 0, 255, 0, true, 5.0 )

	int dataIndex = GetAnalysisDataIndex( flightPath )

	if ( NodeAvailable( node ) )
	{
		var foundSpawnYaw = getFunc( node, dataIndex, variable, ANALYSIS_YAW_STEP )
		if ( foundSpawnYaw != null )
		{
			expect float( foundSpawnYaw )
			return CreateSpawnPoint( flightPath, node, foundSpawnYaw )
		}
	}

	/*
	// We don't support GetNeighborNodes with NavMesh 8/2015
	array neighborNodes = GetNeighborNodes( node, count, flightPath.hull )

	for ( int i = 0; i < neighborNodes.len(); i++ )
	{
		int neighborNode = expect int( neighborNodes[i] )
		if ( !NodeAvailable( neighborNode ) )
			continue
		//DebugDrawLine( NavMeshNode_GetNodePos( neighborNode, HULL_HUMAN ), origin, 255, 255, 0, true, 2.0 )

		var foundSpawnYaw = getFunc( neighborNode, dataIndex, variable, 0 )
		if ( foundSpawnYaw != null )
		{
			expect float( foundSpawnYaw )
			return CreateSpawnPoint( flightPath, neighborNode, foundSpawnYaw )
		}
	}
	*/

	return InvalidSpawnPoint()
}

SpawnPointFP function GetAnalysisSpawn_ClosestYaw( FlightPath flightPath, vector origin, float yaw, int nearestNodes = 10 )
{
	Assert( GetAINScriptVersion() == AIN_REV, "AIN out of date" )

	yaw = FixYaw( yaw )

	return GetNearestSpawnPointFromFunc( flightPath, origin, nearestNodes, GetSpawnPoint_ClosestYaw, yaw )
}

SpawnPointFP function GetAnalysisSpawn_Nearest( FlightPath flightPath, vector origin, int count )
{
	if ( GetAINScriptVersion() != AIN_REV )
		return InvalidSpawnPoint()

	return GetNearestSpawnPointFromFunc( flightPath, origin, count, GetSpawnPoint_Random, 0 )
}
#endif // SERVER

float function FixYaw( float yaw )
{
	yaw %= 360
	if ( yaw < 0 )
		yaw += 360
	return yaw
}

#if SERVER
SpawnPointFP function InvalidSpawnPoint()
{
	SpawnPointFP spawnPoint
	return spawnPoint
}

SpawnPointFP function CreateSpawnPoint( FlightPath flightPath, int node, float spawnYaw )
{
	SpawnPointFP spawnPoint
	vector origin = NavMeshNode_GetNodePos( node )
	spawnPoint.angles = <0,spawnYaw,0>
	spawnPoint.node = node
	spawnPoint.valid = true

	if ( flightPath.model in level.superCallinOffset )
	{
		origin.z += expect float( level.superCallinOffset[ flightPath.model ] )
	}

	spawnPoint.origin = origin
	return spawnPoint
}

SpawnPointFP function CreateSpawnPointManual( vector origin, vector angles, int node )
{
	SpawnPointFP spawnPoint
	spawnPoint.origin = origin
	spawnPoint.angles = angles
	spawnPoint.node = node
	spawnPoint.valid = true
	return spawnPoint
}

var function GetSpawnPoint_ClosestYaw( int nodeIndex, int dataIndex, float desiredYaw, float lowestYawDifference )
{
	float yaw
	var closestYaw
	float dif

	for ( int i = 0; i < ANALYSIS_STEPS; i++ )
	{
		//vector org = NavMeshNode_GetNodePos( nodeIndex, 0 )
		if ( !NavMeshNode_GetBooleanData( nodeIndex, i + dataIndex ) )
		{
			//DebugDrawLine( org, org + <0,0,100>, 255, 150, 0, true, 5.0 )
			continue
		}

		yaw = i * ANALYSIS_YAW_STEP
		dif = YawDifference( desiredYaw, yaw )
		if ( dif > lowestYawDifference )
		{
			//DebugDrawLine( org, org + <0,0,100>, 0, 100, 255, true, 5.0 )
			continue
		}


		//DebugDrawLine( org, org + <0,0,100>, 0, 255, 0, true, 5.0 )
		lowestYawDifference = dif

		closestYaw = yaw
	}

	if ( closestYaw != null )
	{
		Assert( closestYaw >= 0 && closestYaw <= 360 )
	}

	return closestYaw
}

var function GetSpawnPoint_Random( int nodeIndex, int dataIndex, float _1, float _2 )
{
	float yaw
	array<float> legalYaws = []

	for ( int i = 0; i < ANALYSIS_STEPS; i++ )
	{
		if ( !NavMeshNode_GetBooleanData( nodeIndex, i + dataIndex ) )
			continue

		yaw = i * ANALYSIS_YAW_STEP
		legalYaws.append( yaw )
	}

	if ( !legalYaws.len() )
		return null

	return legalYaws.getrandom()
}

SpawnPointFP function FindNearestDropPosWithYawAndFallback( FlightPath flightPath, CallinData drop )
{
	// try in front of us
	return GetAnalysisSpawn_ClosestYaw( flightPath, drop.origin, drop.yaw, 30 )
}

SpawnPointFP function FindNearestDropPositionWithYaw( FlightPath flightPath, CallinData drop )
{
	vector angles = <0,drop.yaw,0>
	vector forward = AnglesToForward( angles )

	// try in front of us
	return GetAnalysisSpawn_ClosestYaw( flightPath, drop.origin, drop.yaw, 10 )
}

SpawnPointFP function FindNearestDropPosition( FlightPath flightPath, CallinData drop )
{
	//vector angles = <0,drop.yaw,0>
	//vector forward = AnglesToForward( angles )

	// try in front of us
	return GetAnalysisSpawn_Nearest( flightPath, drop.origin, 5 )
}

/*
function FindSpawnpointAtDistance( flightPath, CallinData drop )
{
	local node, dist, origin
	local pumpOrigin = drop.origin
	local found = []

	if ( drop.yaw )
	{
		vector forward = AnglesToForward( <0,drop.yaw,0> )
		pumpOrigin += forward * drop.dist
		drop.dist = 800
	}

	local maxDist = 0
	local mostDistant = null

	local spawnPoints = GetSpawnPoints( flightPath )

	foreach ( node, yaws in spawnPoints )
	{
		if ( !yaws.len() )
			continue

		origin = NavMeshNode_GetNodePos( node, flightPath.hull )
		dist = Distance( origin, pumpOrigin )

		if ( dist > maxDist )
		{
			maxDist = dist
		}

		if ( dist >= drop.dist )
		{
			local spawn = CreateSpawnPoint( flightPath, node, yaws[0] )
			spawn.dist <- dist // add this for sorting
			found.append( spawn )
		}
	}


	if ( !found.len() )
	{
		maxDist *= 0.9
		foreach ( node, yaws in spawnPoints )
		{
			if ( !yaws.len() )
				continue

			origin = NavMeshNode_GetNodePos( node, flightPath.hull )
			dist = Distance( origin, pumpOrigin )

			if ( dist > maxDist )
			{
				local spawn = CreateSpawnPoint( flightPath, node, yaws[0] )
				spawn.dist <- dist // add this for sorting
				found.append( spawn )
			}
		}

		if ( !found.len() )
			return
	}

	found.sort( CallinCompare )
	local result = found[0]

	local vec = drop.origin - result.origin
	vector angles = VectorToAngles( vec )

	local Table = {}
	Table.origin <- result.origin
	Table.yaw <- angles.y

	local betterResult = FindNearestDropPositionWithYaw( flightPath, Table )

	if ( betterResult )
	{
		return betterResult
	}

	return result
}
*/

function CallinCompare( a, b )
{
	if ( a.dist < b.dist )
		return -1
	if ( a.dist > b.dist )
		return 1
	return 0
}

bool function NodeInHotDropFov( int nearestNode, FlightPath flightPath, int dataIndex, vector startOrigin, vector forward )
{
	if ( !NodeHasFlightPath( dataIndex, nearestNode ) )
		return false

	vector nearestNodeOrigin = NavMeshNode_GetNodePos( nearestNode )

	// do a flat dot
	nearestNodeOrigin.z = startOrigin.z

	vector nearestVec = nearestNodeOrigin - startOrigin
	nearestVec.Norm()
	float nearestDot = DotProduct( forward, nearestVec )

	//if ( nearestDot >= 0.95 )
	//{
	//	local start = GetPlayerArray()[0].GetOrigin()
	//	DebugDrawLine( start, start + forward * 1500, 255, 255, 0, true, 5.0 )
	//	DebugDrawLine( start, start + nearestVec * 1500, 155, 255, 50, true, 5.0 )
	//}
	//printt( "dot " + nearestDot )
	return nearestDot >= 0.95
}

int function GetClosestYawIndexFromYaw( float desiredYaw )
{
	float lowestYawDifference = 360
	float yaw, dif
	int yawIndex
	bool foundYaw
	for ( int i = 0; i < ANALYSIS_STEPS; i++ )
	{
		yaw = i * ANALYSIS_YAW_STEP
		dif = YawDifference( desiredYaw, yaw )
		if ( dif > lowestYawDifference )
			continue

		lowestYawDifference = dif
		yawIndex = i
		foundYaw = true
	}

	Assert( foundYaw )

	return yawIndex
}

SpawnPointFP function FindSpawnpointFromYawOnly( FlightPath flightPath, CallinData drop )
{
	// find the yaw index we will be searching through
	int yawIndex = GetClosestYawIndexFromYaw( drop.yaw )
	float resultYaw = yawIndex * ANALYSIS_YAW_STEP // the yaw we'll actually be when we use the node

	int iterator = flightPath.iterator
	int dataIndex = GetAnalysisDataIndex( flightPath )

	int nodeCount = NavMeshNode_GetNodeCount()
	Assert( nodeCount > 0, "No nodes in level. Does this level have a nav mesh?" )

	int nodeIndex
	int nodeOffset = RandomInt( nodeCount )

	for ( int i = 0; i < nodeCount; i++ )
	{
		// start on a randone node and go forwards until we get a legal node
		nodeIndex = i + nodeOffset
		nodeIndex %= nodeCount
		vector origin = NavMeshNode_GetNodePos( nodeIndex )

		if ( !NavMeshNode_GetBooleanData( nodeIndex, yawIndex + dataIndex ) )
			continue

		if ( !NodeAvailable( nodeIndex ) )
			continue

		return CreateSpawnPoint( flightPath, nodeIndex, resultYaw )
	}

	return InvalidSpawnPoint()
}

bool function NodeAvailable( int nodeIndex )
{
	if ( !( nodeIndex in level.spawnPointsInUse ) )
		return true

	return Time() > level.spawnPointsInUse[ nodeIndex ]
}

SpawnPointFP function TryFromOrigin_FallbackToNearest( FlightPath flightPath, CallinData drop )
{
	float range = drop.dist
	Assert( range )
	float yaw = drop.yaw
	vector origin = drop.origin

	yaw = FixYaw( yaw )

	// try at origin
	SpawnPointFP result = GetAnalysisSpawn_ClosestYaw( flightPath, origin, yaw, 30 )
	if ( result.valid )
		return result

	vector angles = <0,yaw,0>
	vector forward = AnglesToForward( angles )
	vector right = AnglesToRight( angles )

	// try to the right
	result = GetAnalysisSpawn_ClosestYaw( flightPath, origin + right * range, yaw, 30 )
	if ( result.valid )
		return result

	// left
	result = GetAnalysisSpawn_ClosestYaw( flightPath, origin + right * -range, yaw, 30 )
	if ( result.valid )
		return result

	// try in back
	result = GetAnalysisSpawn_ClosestYaw( flightPath, origin + forward * -range, yaw, 30 )
	if ( result.valid )
		return result

	// try in front
	result = GetAnalysisSpawn_ClosestYaw( flightPath, origin + forward * range, yaw, 30 )
	if ( result.valid )
		return result

	return GetAnalysisSpawn_Nearest( flightPath, origin, 5 )
}

void function SetCallinStyle( CallinData drop, int style )
{
	drop.style = style
	drop.styleSet = true
}

void function SetCallinYaw( CallinData drop, float yaw )
{
	drop.yaw = yaw
	drop.yawSet = true
}

void function SetCallinOwnerEyePos( CallinData drop, vector ownerEyePos )
{
	drop.ownerEyePos = ownerEyePos
	drop.ownerEyePosSet = true
}

SpawnPointFP function GetSpawnPointForStyle( FlightPath flightPath, CallinData drop )
{
	if ( GetAINScriptVersion() != AIN_REV )
		return InvalidSpawnPoint()

	PerfStart( PerfIndexServer.GetSpawnPointForStyle )

	int style = drop.style
	if ( !drop.styleSet )
	{
		if ( !drop.yawSet )
		{
			style = eDropStyle.NEAREST
		}
		else
		{
			style = eDropStyle.NEAREST_YAW
		}
	}

	SpawnPointFP spawnPoint

	switch ( style )
	{
		case eDropStyle.NEAREST_YAW:
			spawnPoint = FindNearestDropPositionWithYaw( flightPath, drop )
			break

		case eDropStyle.NEAREST:
			spawnPoint = FindNearestDropPosition( flightPath, drop )
			break

		case eDropStyle.FLYER_PICKUP:
		case eDropStyle.ZIPLINE_NPC:
			spawnPoint = TryFromOrigin_FallbackToNearest( flightPath, drop )
			break

		case eDropStyle.RANDOM_FROM_YAW:
			spawnPoint = FindSpawnpointFromYawOnly( flightPath, drop ) // owner, 1800 )
			break

		case eDropStyle.FORCED:
			spawnPoint = CreateSpawnPointManual( drop.origin, <0,drop.yaw,0>, NavMeshNode_GetNearestNodeToPos( drop.origin ) )
			break

		case eDropStyle.NEAREST_YAW_FALLBACK:
			spawnPoint = FindNearestDropPosWithYawAndFallback( flightPath, drop )
			break

		//case eDropStyle.FROM_SET_DISTANCE:
		//	spawnPoint = FindSpawnpointAtDistance( flightPath, CallinData drop )
		//
		//	break

		default:
			Assert(0, "Unknown style " + style )
			break
	}

	PerfEnd( PerfIndexServer.GetSpawnPointForStyle )

	if ( !spawnPoint.valid )
		return InvalidSpawnPoint()

	//DebugDrawLine( spawnPoint.origin, drop.origin, 255, 0, 255, true, 15.0 )
	//printt( "Reserved " + spawnPoint.node )
	// reserve the spawn point

	//Assert( NodeAvailable( spawnPoint.node ) )
	level.spawnPointsInUse[ spawnPoint.node ] <- Time() + SPAWNPOINT_USE_TIME

	if ( AnalysisHasPrepSpawnpointFunc( flightPath ) )
	{
		var newOrg = RunAnalysisPrepFunc( flightPath, spawnPoint.origin, spawnPoint.angles.y )
		if ( newOrg != null )
			spawnPoint.origin = expect vector( newOrg )
		// bring this assert back
		//spawnPoint.origin = flightPath.analysisPrepSpawnpointFunc( spawnPoint.origin, spawnPoint.angles.y )
		//Assert( spawnPoint.origin, "Spawnpoint failed prep!" )
	}

	return spawnPoint
}

//Function tests to see if a given flight path with a given CallinData returns a valid dropship spawn point.
//Note: Avoid calling this function in general game play. Instead, use a wrapper function such as DropshipCanZiplineDropAtSpawnPoint to test a flight path to a spawn
//and then store the spawn for later use.
bool function TestSpawnPointForStyle( FlightPath flightPath, CallinData drop )
{
	Assert( !GamePlayingOrSuddenDeath(), "TestSpawnPointsForStyle should only be called OnEntitiesLoaded and not during general gameplay." )

	if ( GetAINScriptVersion() != AIN_REV )
		return false

	PerfStart( PerfIndexServer.GetSpawnPointForStyle )

	int style = drop.style
	if ( !drop.styleSet )
	{
		if ( !drop.yawSet )
		{
			style = eDropStyle.NEAREST
		}
		else
		{
			style = eDropStyle.NEAREST_YAW
		}
	}

	SpawnPointFP spawnPoint

	switch ( style )
	{
		case eDropStyle.NEAREST_YAW:
			spawnPoint = FindNearestDropPositionWithYaw( flightPath, drop )
			break

		case eDropStyle.NEAREST:
			spawnPoint = FindNearestDropPosition( flightPath, drop )
			break

		case eDropStyle.FLYER_PICKUP:
		case eDropStyle.ZIPLINE_NPC:
			spawnPoint = TryFromOrigin_FallbackToNearest( flightPath, drop )
			break

		case eDropStyle.RANDOM_FROM_YAW:
			spawnPoint = FindSpawnpointFromYawOnly( flightPath, drop ) // owner, 1800 )
			break

		case eDropStyle.FORCED:
			spawnPoint = CreateSpawnPointManual( drop.origin, <0,drop.yaw,0>, NavMeshNode_GetNearestNodeToPos( drop.origin ) )
			break

		case eDropStyle.NEAREST_YAW_FALLBACK:
			spawnPoint = FindNearestDropPosWithYawAndFallback( flightPath, drop )
			break

//		case eDropStyle.FROM_SET_DISTANCE:
//			spawnPoint = FindSpawnpointAtDistance( flightPath, CallinData drop )
//
//			break

		default:
			Assert(0, "Unknown style " + style )
			break
	}

	PerfEnd( PerfIndexServer.GetSpawnPointForStyle )

	if ( !spawnPoint.valid )
		return false

	return true
}

Point function GetWarpinPosition( asset model, string animation, vector origin, vector angles )
{
	Point start

	if ( HasAnalysisForModel( model, animation ) )
	{
		FlightPath flightPath = GetAnalysisForModel( model, animation )

		Assert( flightPath.points.len(), "No points in flightPath" )
		AttachPoint point = flightPath.points[0]
		vector forward = AnglesToForward( angles )
		vector right = AnglesToRight( angles )

		start.origin = GetOriginFromAttachPoint( point, origin, forward, right )
		start.angles = GetAnglesFromAttachPoint( point, angles )
		return start
	}

	entity dummyDropship = CreatePropDynamic( model, origin, angles )
	dummyDropship.Hide()
	dummyDropship.SetOrigin( origin )
    dummyDropship.SetAngles( angles )
	Attachment attachResult = dummyDropship.Anim_GetAttachmentAtTime( animation, "ORIGIN", 0 )
	start.origin = attachResult.position
    start.angles = attachResult.angle
	dummyDropship.Destroy()

	return start
}

bool function NodeHasFlightPath( int dataIndex, int nodeIndex )
{
	for ( int p = 0; p < ANALYSIS_STEPS; p++ )
	{
		if ( NavMeshNode_GetBooleanData( nodeIndex, p + dataIndex ) )
			return true
	}

	return false
}

int function GetFlightPathCount( int dataIndex, int nodeIndex )
{
	int count = 0
	for ( int p = 0; p < ANALYSIS_STEPS; p++ )
	{
		if ( NavMeshNode_GetBooleanData( nodeIndex, p + dataIndex ) )
			count++
	}

	return count
}

bool function FlightPathHasNodeAndMatchesAINData( FlightPath flightPath )
{
	int dataIndex = GetAnalysisDataIndex( flightPath )
	vector offset = GetAnalysisOffset( flightPath )

	int hits = 0
	bool foundPass
	for ( int i = 0; i < NavMeshNode_GetNodeCount(); i++ )
	{
		for ( int p = 0; p < ANALYSIS_STEPS; p++ )
		{
			if ( !NavMeshNode_GetBooleanData( i, p + dataIndex ) )
				continue

			float yaw = p * ANALYSIS_YAW_STEP
			// should always succeed if the node data was writen as true, represents node data mismatch
			if ( !PassedAnalysisFunc( flightPath, NavMeshNode_GetNodePos( i ) + offset, yaw ) )
				return false

			foundPass = true
		}
	}

	return foundPass
}
#endif // SERVER

const bool DEBUG_DROP_POINTS = false
const bool DEBUG_DROP_POINTS_LINES = false
const DEBUG_DRAW_TIME = 0.02


bool function VerifyAirdropPoint( vector baseOrigin, float yaw, bool isCarePackage = false, entity realmEnt = null)
{
	const MAX_DIST_TO_GROUND_SQR = 16*16
	const DOOR_UP_OFFSET = 64
	const LEDGE_DOWN_OFFSET = 96
	const EDGE_TRACE_HEIGHT = 48
	const vector UP_VECTOR = <0, 0, 1>

	int door_space_distance = isCarePackage ? 64 : 128
	int edge_trace_dist = isCarePackage ? 64 : 96
	int maxSurfaceAngle = isCarePackage ? 55 : 20

	int failCode = 0

	entity edgeGroundEnt
	float edgeDistDiff

	vector startOrigin = baseOrigin + <0,0,10000>
	vector endOrigin = baseOrigin + <0,0,-128>
	vector forward = AnglesToForward( < 0, yaw, 0 > )
	vector up = <0,0,1>

    #if SERVER
    if(IsPointOutOfBounds(baseOrigin))
        return false
    #endif
    
	//bigger than model to compensate for large effect and the fact that we want to be able to walk around it
	vector maxs = !isCarePackage ? AIRDROP_MAXS : AIRDROP_MAXS * 0.65
	vector mins = !isCarePackage ? AIRDROP_MINS : AIRDROP_MINS * 0.65

	if ( IsNearAirdropBadPlace( baseOrigin, realmEnt ) )
		failCode = failCode | 0x0040

	TraceResults trace = TraceHull( startOrigin, endOrigin, mins, maxs, file.airdropTraceIgnoreEntArray, (TRACE_MASK_PLAYERSOLID | TRACE_MASK_TITANSOLID | CONTENTS_NOAIRDROP), TRACE_COLLISION_GROUP_NONE, UP_VECTOR, realmEnt )
	float dot          = DotProduct( up, trace.surfaceNormal )
	// surface angle is to great
	if ( dot != 0 && DotToAngle( dot ) > maxSurfaceAngle )
	{
		failCode = failCode | 0x0001
		if ( DEBUG_DROP_POINTS_LINES )
		{
			vector right = CrossProduct( AnglesToForward( <0,yaw,0> ), trace.surfaceNormal )
			DebugDrawLine( trace.endPos, trace.endPos + right * 64, 0, 255, 0, true, DEBUG_DRAW_TIME )
			DebugDrawLine( trace.endPos, trace.endPos + trace.surfaceNormal * 64, 0, 0, 255, true, DEBUG_DRAW_TIME )
			DebugDrawArrow( trace.endPos, baseOrigin, 2, 255, 255, 255, true, DEBUG_DRAW_TIME)
		}
	}

	// Lets not land on moving stuff or anything that might be dynamic
	entity groundEnt = trace.hitEnt
	if ( IsValid( groundEnt ) && !groundEnt.IsWorld() )
		failCode = failCode | 0x0002

	if ( trace.startSolid )
		failCode = failCode | 0x0200

	// did I get close enough to the ground?
	float distToNodeSqr = DistanceSqr( trace.endPos, baseOrigin )
	float distToNode = Distance( trace.endPos, baseOrigin )
	if ( distToNodeSqr > MAX_DIST_TO_GROUND_SQR )
		failCode = failCode | 0x0004


	// to check if we are on a ridge. makes a tringle and all traces have to hit solid or we are probably on a ridge.
	vector traceOrigin = trace.endPos
	array<vector> ridgeTraceVectorArray = [ <1,0,0>, <-0.5,0.86,0>, <-0.5,-0.86,0> ]
	foreach ( traceVector in ridgeTraceVectorArray )
	{
		vector ridgeOrigin = traceOrigin + <0,0,16> + traceVector * 18
		vector ridgeTraceOrigin = baseOrigin + <0,0,-12> + traceVector * 18

		TraceResults ridgeTrace = TraceLine( ridgeOrigin, ridgeTraceOrigin, null, ( TRACE_MASK_PLAYERSOLID | TRACE_MASK_TITANSOLID | CONTENTS_NOAIRDROP ), TRACE_COLLISION_GROUP_NONE )
		float fraction = ridgeTrace.fraction
		if ( fraction == 1 )
		{
			failCode = failCode | 0x0080
			if ( DEBUG_DROP_POINTS_LINES )
			{
				DebugDrawArrow( ridgeOrigin, ridgeTrace.endPos, 4, 0, 128, 128, true, DEBUG_DRAW_TIME )
			}
			break
		}
	}


	// to check if we are on a ledge.
	array<vector> edgeTraceVectorArray = [ <1,0,0>, <0.5,0.86,0>, <-0.5,0.86,0>, <-1,0,0>, <-0.5,-0.86,0>, <0.5,-0.86,0> ]
	foreach ( traceVector in edgeTraceVectorArray )
	{
		vector edgeOrigin = baseOrigin + <0,0,EDGE_TRACE_HEIGHT> + traceVector * edge_trace_dist
		vector edgeTraceOrigin = baseOrigin + <0,0,-EDGE_TRACE_HEIGHT> + traceVector * edge_trace_dist

		TraceResults sightTrace = TraceLine( baseOrigin + <0,0,EDGE_TRACE_HEIGHT>, edgeOrigin, null, ( TRACE_MASK_PLAYERSOLID | TRACE_MASK_TITANSOLID | CONTENTS_NOAIRDROP ), TRACE_COLLISION_GROUP_NONE )
		if ( sightTrace.fraction < 1 )
		{
			if ( DEBUG_DROP_POINTS_LINES )
			{
				DebugDrawArrow( baseOrigin + <0,0,EDGE_TRACE_HEIGHT>, sightTrace.endPos, 4, 0, 255, 0, true, DEBUG_DRAW_TIME )
			}
			continue    // trace hit ground so we would be starting the next trace from below the ground, so just skip it instead.
		}

		TraceResults edgeTrace = TraceLine( edgeOrigin, edgeTraceOrigin, null, ( TRACE_MASK_PLAYERSOLID | TRACE_MASK_TITANSOLID | CONTENTS_NOAIRDROP ), TRACE_COLLISION_GROUP_NONE )
		float fraction = edgeTrace.fraction
		if ( fraction == 1 )
		{
			failCode = failCode | 0x0020
			if ( DEBUG_DROP_POINTS_LINES )
			{
				DebugDrawArrow( edgeOrigin, edgeTraceOrigin, 4, 255, 0, 0, true, DEBUG_DRAW_TIME )
			}
			break
		}
	}


	// to check if the doors are accessible
	vector playerMins = <-16,-16,0>//GetBoundsMin( HULL_HUMAN )
	vector playerMaxs = <16,16,72>//GetBoundsMax( HULL_HUMAN )
	vector doorOrigin = baseOrigin + <0,0,DOOR_UP_OFFSET>

	vector base = <0,yaw,0>
	float yawOffset = 360.0/3.0

	array<vector> anglesToTest = [ base , AnglesCompose( base, <0,yawOffset,0> ), AnglesCompose( base, <0,-yawOffset,0> ) ]
	if ( isCarePackage )
		anglesToTest = []

	foreach ( angles in anglesToTest )
	{
		forward = AnglesToForward( angles )
		array<vector> openingTraceVectorArray = [ forward, VectorRotate( forward, <0,30,0> ), VectorRotate( forward, <0,-30,0> ) ]
		bool failed = false
		foreach ( traceVector in openingTraceVectorArray )
		{
			vector doorEndOrigin = doorOrigin + traceVector * door_space_distance
			vector ledgeOrigin = doorEndOrigin + <0,0,-LEDGE_DOWN_OFFSET>

			// check that the area infront of the door is clear
			float fraction = TraceHullSimple( doorOrigin, doorEndOrigin, playerMins, playerMaxs, null )
			if ( fraction != 1 )
			{
				failCode = failCode | 0x0008
				failed = true

				if ( DEBUG_DROP_POINTS_LINES )
					DebugDrawArrow( doorOrigin, doorEndOrigin, 4, 255,0,0, true, DEBUG_DRAW_TIME )
				break
			}

			// check that the we didn't drop it on a ledge with the door facing out
			fraction = TraceHullSimple( doorEndOrigin, ledgeOrigin, playerMins, playerMaxs, null )
			if ( fraction == 1 )
			{
				failCode = failCode | 0x0010
				failed = true

				if ( DEBUG_DROP_POINTS_LINES )
				{
					DebugDrawArrow( doorOrigin, doorEndOrigin, 4, 255,0,0, true, DEBUG_DRAW_TIME )
					DebugDrawArrow( doorEndOrigin, ledgeOrigin, 4, 255,0,255, true, DEBUG_DRAW_TIME )
				}
				break
			}
		}

		if ( failed )
			break
	}


	if ( DEBUG_DROP_POINTS )
	{
		if ( DEBUG_DROP_POINTS_LINES && failCode & 0x0005 )
		{
			DebugDrawCylinder( trace.endPos, < -90, 0, 0 >, maxs.x, maxs.z, 250, 50, 0, false, DEBUG_DRAW_TIME )
			DebugDrawCylinder( baseOrigin, < -90, 0, 0 >, maxs.x, maxs.z, 70, 70, 70, false, DEBUG_DRAW_TIME )
		}

		if ( failCode )
			printt( "dropPoint check faild at origin:", baseOrigin, "yaw:", yaw )
		if ( failCode & 0x0001 )
			printt( "\t- Surface angle to steep. Slope angle:", DotToAngle( dot ))
		if ( failCode & 0x0002 )
			printt( "\t- Didn't land on the worldspawn entity. Ground Ent:", groundEnt)
		if ( failCode & 0x0004 )
			printt( "\t- Didn't reach the ground. Dist from ground:", sqrt( distToNodeSqr ), distToNode)
		if ( failCode & 0x0008 )
			printt( "\t- Door area was not clear." )
		if ( failCode & 0x0010 )
			printt( "\t- Door opened towards a ledge." )
		if ( failCode & 0x0020 )
			printt( "\t- Part of the Pod was sticking out over an ledge." )
		if ( failCode & 0x0040 )
			printt( "\t- To close to an Airdrop Bad Place." )
		if ( failCode & 0x0080 )
			printt( "\t- Part might have been on a narrow ridge or low wall etc." )
		if ( failCode & 0x0100 )
			printt( "\t- Point was touching out of bound trigger." )
		if ( failCode & 0x0200 )
			printt( "\t- Trace started in solid." )
	}

	if ( failCode )
		return false

	// passed all tests, should be find for calling in a drop
	return true
}


void function AddAirdropTraceIgnoreEnt( entity ent )
{
	file.airdropTraceIgnoreEntArray.append( ent )
	AddEntityDestroyedCallback( ent, RemoveAirdropTraceIgnoreEntOnDestroy )
}


void function RemoveAirdropTraceIgnoreEntOnDestroy( entity ent )
{
	file.airdropTraceIgnoreEntArray.fastremovebyvalue( ent )
}

array<entity> function GetAirDropTraceIgnoreEntArray()
{
	return file.airdropTraceIgnoreEntArray
}


#if SERVER

Point function GetClosestEndZonePoint( vector baseOrigin )
{
	FlightPath flightPath = GetAnalysisForModel( CARE_PACKAGE_AIRDROP_MODEL, CARE_PACKAGE_IDLE )

	int dataIndex = GetAnalysisDataIndex( flightPath )

	return GetClosestDrop_Internal( baseOrigin, dataIndex )
}

Point function GetClosestAirdropPoint( vector baseOrigin )
{
	FlightPath flightPath = GetAnalysisForModel( DROPPOD_MODEL, AIRDROP_BASE_ANIM )

	int dataIndex = GetAnalysisDataIndex( flightPath )

	return GetClosestDrop_Internal( baseOrigin, dataIndex )
}

Point function GetClosestDrop_Internal( vector baseOrigin, int dataIndex )
{
	Point closestNodePoint
	int node = NavMeshNode_GetBestNodeForPos( baseOrigin, dataIndex, ANALYSIS_STEPS )
	if( node < 0 )
	{
		//if ( !IsTestMap() )
			//Warning( "AIN file does not contain any valid airdrop point, please rebuild the AIN file." )
		closestNodePoint.origin = baseOrigin
		return closestNodePoint
	}

	array<int> validSlots = NavmeshNode_GetValidDataSlots( node, dataIndex, ANALYSIS_STEPS )
	Assert( validSlots.len(), "NavMeshNode_GetBestNodeForPos(...) returned an node index that didn't have any valid slots" )

	float yaw = validSlots.getrandom() * ANALYSIS_YAW_STEP

	closestNodePoint.origin = NavMeshNode_GetNodePos( node )
	closestNodePoint.angles = < 0, yaw, 0 >

	if ( DEBUG_DROP_POINTS || DEBUG_DROP_POINTS_LINES )
	{
		vector origin = closestNodePoint.origin
		vector forward = AnglesToForward( closestNodePoint.angles )
		vector doorOrigin = origin + <0,0,32>
		vector doorEndOrigin = doorOrigin + forward * 128
		vector ledgeOrigin = doorEndOrigin + <0,0,-72>

		printt( node, origin, closestNodePoint.angles )
		DebugDrawCylinder( origin, < -90, 0, 0 >, 64, 256, 250, 250, 0, false, DEBUG_DRAW_TIME )
		DebugDrawArrow( doorOrigin, doorEndOrigin, 4, 255,0,0, true, DEBUG_DRAW_TIME )
		DebugDrawArrow( doorEndOrigin, ledgeOrigin, 4, 255,0,255, true, DEBUG_DRAW_TIME )
	}

	return closestNodePoint
}

Point function FindRandomAirdropDropPoint( float baseAngle, vector center, float radius, array<vector> previousAirdrops )
{
	int numTries 			= 0
	float minDistance 		= min( radius, 10000.0 )
	float angleDeviation 	= 10.0
	int timesToTry 			= 20
	float minScale 			= 0.5
	vector maxs 			= AIRDROP_MAXS
	vector mins 			= AIRDROP_MINS

	Point airdropPoint

	while ( true )
	{
		if ( numTries >= timesToTry && minDistance > 0 )
		{
			minDistance -= 100
			if ( minScale > 0.0 )
				minScale -= 0.1
			numTries = 0
			timesToTry += 20
		}

		bool fail = false
		vector startPos = GetRandomCenter( center, radius * minScale, radius, 0, 360 )
        
		foreach ( point in previousAirdrops )
		{
			if ( Distance2D( startPos, point ) < minDistance )
			{
				fail = true
				break
			}
		}
        
		TraceResults trace = TraceHull( <startPos.x, startPos.y, 10000>, <startPos.x, startPos.y, 512>, mins, maxs, null, TRACE_MASK_TITANSOLID, TRACE_COLLISION_GROUP_NONE )
		if ( trace.fraction == 1 )
			fail = true	// didn't find any ground

		if ( fail )
		{
			numTries++
			WaitFrame()
			continue
		}

		vector groundPos = trace.endPos
		airdropPoint = GetClosestAirdropPoint( groundPos )
        
		float distToCenter = Distance2D( airdropPoint.origin, center )
		if ( distToCenter > radius && !IsTestMap() )
		{
			numTries++
			WaitFrame()
			continue
		}

		return airdropPoint
    }
	unreachable
}

void function TransmitAirdropBadPlaceLocations( entity player )
{
	foreach( airdropBadPlace in file.airdropBadPlaceArray )
		Remote_CallFunction_NonReplay( player, "ServerCallback_CreateAirdropBadPlace", airdropBadPlace.id, airdropBadPlace.origin, airdropBadPlace.radius, airdropBadPlace.ownerEnt )
}

void function CreateNonExpiringAirdropBadPlace( vector origin, int radius, entity ownerEnt = null )
{
	AirdropBadPlace airdropBadPlace
	airdropBadPlace.id = file.airdropBadPlaceCount++
	airdropBadPlace.origin = origin
	airdropBadPlace.radius = radius
	airdropBadPlace.ownerEnt = ownerEnt

	file.airdropBadPlaceArray.append( airdropBadPlace )

	array<entity> players = GetPlayerArray()
	foreach ( player in players )
	{
		Remote_CallFunction_NonReplay( player, "ServerCallback_CreateAirdropBadPlace", airdropBadPlace.id, origin, radius, ownerEnt )
	}
}

void function CreateAirdropBadPlace( entity ownerEnt, vector origin, int radius, float duration = -1 )
{
	AirdropBadPlace airdropBadPlace
	airdropBadPlace.id = file.airdropBadPlaceCount++
	airdropBadPlace.origin = origin
	airdropBadPlace.radius = radius
	airdropBadPlace.ownerEnt = ownerEnt

	file.airdropBadPlaceArray.append( airdropBadPlace )

	array<entity> players = GetPlayerArray()
	foreach ( player in players )
	{
		Remote_CallFunction_NonReplay( player, "ServerCallback_CreateAirdropBadPlace", airdropBadPlace.id, origin, radius, ownerEnt )
	}

	thread RemoveAirdropBadPlaceOnOwnerDeathOrTimeout( ownerEnt, airdropBadPlace.id, duration )
}

void function RemoveAirdropBadPlaceOnOwnerDeathOrTimeout( entity ownerEnt, int id, float duration )
{
	OnThreadEnd(
		function() : ( id )
		{
			DestroyAirdropBadPlace( id )
			array<entity> players = GetPlayerArray()
			foreach ( player in players )
			{
				Remote_CallFunction_NonReplay( player, "ServerCallback_DestroyAirdropBadPlace", id )
			}
		}
	)

	if ( IsValid( ownerEnt ) )
		EndSignal( ownerEnt, "OnDestroy" )

		if ( duration <= 0 )
	{
		Assert( IsValid( ownerEnt ), "Trying to create an infinite airdrop bad place with no owner ent." )
			WaitForever()
	}

	wait duration
}

Point function GetClosestRespawnDropoff( vector baseOrigin )
{
	// "Point" type contains both origin and angles.
	string anim = "dropship_classic_mp_flyin"
	FlightPath flightPath = GetAnalysisForModel( DROPSHIP_MODEL, anim )
	Point closestNodePoint

	int dataIndex = GetAnalysisDataIndex( flightPath )

	int node = NavMeshNode_GetBestNodeForPos( baseOrigin, dataIndex, ANALYSIS_STEPS )

	if( node < 0 )
	{
		if ( !IsTestMap() )
			Warning( "AIN file does not contain any valid respawn dropoff point, please rebuild the AIN file." )
		closestNodePoint.origin = baseOrigin
		return closestNodePoint
	}

	array<int> validSlots = NavmeshNode_GetValidDataSlots( node, dataIndex, ANALYSIS_STEPS )
	Assert( validSlots.len(), "NavMeshNode_GetBestNodeForPos(...) returned an node index that didn't have any valid slots" )

	float yaw = validSlots.getrandom() * ANALYSIS_YAW_STEP

	closestNodePoint.origin = NavMeshNode_GetNodePos( node )
	closestNodePoint.angles = < 0, yaw, 0 >

	// if it hit something, just move it up hopefully it will be clear
	if ( !AnaylsisFuncLegalFlightPath( flightPath, closestNodePoint.origin, yaw ) )
	{
		closestNodePoint.origin += <0,0,1000>
	}

	return closestNodePoint
}
#endif //SERVER

#if SERVER || CLIENT
bool function IsNearAirdropBadPlace( vector origin, entity realmEnt = null )
{
	// This will not be reliable if the client connects mid match - Roger
	foreach( airdropBadPlace in file.airdropBadPlaceArray  )
	{
		if ( IsValid( airdropBadPlace.ownerEnt ) && IsValid( realmEnt ) )
		{
			if ( !airdropBadPlace.ownerEnt.DoesShareRealms( realmEnt ) )
				continue
		}

		float distSrq = DistanceSqr( origin, airdropBadPlace.origin )
		int radiusSqr = airdropBadPlace.radius * airdropBadPlace.radius
		if ( distSrq < radiusSqr )
			return true
	}
	return false
}

void function DestroyAirdropBadPlace( int id )
{
	foreach( index, airdropBadPlace in file.airdropBadPlaceArray )
	{
		if ( airdropBadPlace.id == id )
		{
			file.airdropBadPlaceArray.fastremove( index )
			return
		}
	}
}
#endif //SERVER || CLIENT

#if CLIENT
void function ServerCallback_CreateAirdropBadPlace( int id, vector origin, int radius, entity ownerEnt )
{
	foreach( badPlace in file.airdropBadPlaceArray )
	{
		if ( badPlace.id == id )
			return // already added
	}

	printt( "Adding airdrop badplace this client", GetLocalClientPlayer() )

	AirdropBadPlace airdropBadPlace
	airdropBadPlace.id = id
	airdropBadPlace.origin = origin
	airdropBadPlace.radius = radius
	airdropBadPlace.ownerEnt = ownerEnt

	file.airdropBadPlaceArray.append( airdropBadPlace )
}

void function ServerCallback_DestroyAirdropBadPlace( int id )
{
	DestroyAirdropBadPlace( id )
}
#endif //CLIENT

#if SERVER && DEVELOPER
void function AirdropTraceTest( entity player )
{
	vector startPosition = player.EyePosition() + <0,0,8>
	vector endPosition = startPosition + 1024 * player.GetViewVector()
	TraceResults result = TraceLine( startPosition, endPosition, player, ( TRACE_MASK_PLAYERSOLID | TRACE_MASK_TITANSOLID | CONTENTS_NOAIRDROP ), TRACE_COLLISION_GROUP_PLAYER )
	DebugDrawLine( startPosition, result.endPos, 0, 255, 0, false, 5.0 )
	if ( result.fraction < 1 )
	{
		DebugDrawLine( result.endPos, endPosition, 255, 0, 0, false, 5.0 )
	}
}
#endif
