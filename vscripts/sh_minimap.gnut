untyped

global function MinimapShared_Init
global function GetMinimapMaterial

const MINIMAP_MINION_SCALE      = 0.035
const MINIMAP_MINION_SCALE_COOP = 0.021

//global const MFD_MINIMAP_FRIENDLY_MATERIAL = $"vgui/HUD/minimap_mfd_friendly"
//global const MFD_MINIMAP_PENDING_MARK_FRIENDLY_MATERIAL = $"vgui/HUD/minimap_mfd_pre_friendly"
//global const MFD_MINIMAP_ENEMY_MATERIAL = $"vgui/HUD/minimap_mfd_enemy"

#if SERVER
	global function InitMinimapSettings
	global function UpdatePlayerMinimapMaterials
	global function Minimap_RingPulseForPlayer
	global function Minimap_RingPulseForTeam
#endif

struct
{
	array<asset> minimapRuis
	bool allowRegisterMinimapRuis
} file


global enum eMinimapObject_info_hardpoint
{
	DEFAULT,
	HARDPOINT_A,
	HARDPOINT_B,
	HARDPOINT_C,
	HARDPOINT_D,
	HARDPOINT_E,
	COUNT
}


global enum eMinimapObject_prop_script
{
	DEFAULT,
	AT_DROPZONE_A,
	AT_DROPZONE_B,
	AT_DROPZONE_C,
	SPAWNZONE_MIL,
	SPAWNZONE_IMC,
	FW_CAMP_A,
	FW_CAMP_B,
	FW_CAMP_C,
	FW_BUILDSITE,
	FW_BUILDSITE_TURRET,
	FW_BUILDSITE_SHIELDED,
	LTS_SITE_A,
	LTS_SITE_B,
	AT_BANK,
	FD_HARVESTER,
	FD_LOADOUT_CHEST,
	FD_BATTERY_EXCHANGE,
	FD_MORTAR_POSITION,
	OBJECTIVE_AREA,
	BOOST_STORE,
	ARC_TRAP,
	TROPHY_SYSTEM,
	DIRTY_BOMB,
	DEPLOYABLE_MEDIC,
	PHASE_GATE,
	VAULT_PANEL,
	VAULT_PANEL_OPEN,
	VAULT_KEY,
	SURVEY_BEACON,
	CRYPTO_DRONE,
	HOVERTANK,
	HOVERTANK_DESTINATION,
	RESPAWN_CHAMBER,
	RESPAWN_DNA,
	TRAIN,
	SND_A,
	SND_B,
	BOMB,
	COUNT
}

global enum eMinimapObject_npc
{
	DEFAULT,
	AI_TDM_AI,
	AI_PVEOBJECTIVE,
	FD_TURRET,
	COUNT
}

global enum eMinimapObject_npc_titan
{
	DEFAULT,
	AT_BOUNTY_BOSS,
	COUNT
}

void function MinimapShared_Init()
{
	level.minimapMaterials <- {}
	level.minimapMaterialsIndexes <- []
	level.allowRegisterMinimapMaterials <- true
	file.allowRegisterMinimapRuis = true

	RegisterMinimapMaterial( "minimap_default", $"vgui/hud/minimap_default" )

	//RegisterMinimapMaterial( "hardpoint_neutral", $"vgui/hud/hardpoint_neutral" )
	//RegisterMinimapMaterial( "hardpoint_friendly", $"vgui/hud/hardpoint_friendly" )
	//RegisterMinimapMaterial( "hardpoint_enemy", $"vgui/hud/hardpoint_enemy" )

	//RegisterMinimapMaterial( "objective_a", $"vgui/HUD/minimap_objective_a_neutral" )
	//RegisterMinimapMaterial( "objective_a_friendly", $"vgui/HUD/minimap_objective_a_friendly" )
	//RegisterMinimapMaterial( "objective_a_enemy", $"vgui/HUD/minimap_objective_a_enemy" )

	//RegisterMinimapMaterial( "objective_b", $"vgui/HUD/minimap_objective_b_neutral" )
	//RegisterMinimapMaterial( "objective_b_friendly", $"vgui/HUD/minimap_objective_b_friendly" )
	//RegisterMinimapMaterial( "objective_b_enemy", $"vgui/HUD/minimap_objective_b_enemy" )

	//RegisterMinimapMaterial( "refuel_pump", $"vgui/HUD/minimap_objective_a_neutral" )
	//RegisterMinimapMaterial( "refuel_gush_friendly", $"vgui/HUD/minimap_objective_a_friendly" )
	//RegisterMinimapMaterial( "refuel_gush_enemy", $"vgui/HUD/minimap_objective_a_enemy" )

	//RegisterMinimapMaterial( "im_controlpanel_neutral", $"vgui/hud/threathud_control_neutral" )
	//RegisterMinimapMaterial( "im_controlpanel_friendly", $"vgui/hud/threathud_control_friendly" )
	//RegisterMinimapMaterial( "im_controlpanel_enemy", $"vgui/hud/threathud_control_enemy" )

	//RegisterMinimapMaterial( "turret_neutral", $"vgui/hud/threathud_turret_neutral" )
	//RegisterMinimapMaterial( "turret_friendly", $"vgui/hud/threathud_turret_friendly" )
	//RegisterMinimapMaterial( "turret_enemy", $"vgui/hud/threathud_turret_enemy" )

	//RegisterMinimapMaterial( "LZ_neutral", $"vgui/HUD/minimap_objective_a_neutral" )
	//RegisterMinimapMaterial( "LZ_friendly", $"vgui/HUD/minimap_lz_friendly" )
	//RegisterMinimapMaterial( "LZ_enemy", $"vgui/HUD/minimap_lz_enemy" )

	//RegisterMinimapMaterial( "dropship_neutral", $"vgui/HUD/minimap_objective_a_neutral" )
	//RegisterMinimapMaterial( "dropship_friendly", $"vgui/HUD/threathud_bomber_friendly" )
	//RegisterMinimapMaterial( "dropship_enemy", $"vgui/HUD/threathud_bomber_enemy" )

	//RegisterMinimapMaterial( "VIP_neutral", $"vgui/hud/minimap_objective_a_neutral" )
	//RegisterMinimapMaterial( "VIP_friendly", $"vgui/HUD/minimap_vip_friendly" )
	//RegisterMinimapMaterial( "VIP_enemy", $"vgui/HUD/minimap_vip_enemy" )

	//RegisterMinimapMaterial( "goal_neutral", $"vgui/hud/minimap_objective_a_neutral" )
	//RegisterMinimapMaterial( "goal_friendly", $"vgui/HUD/minimap_goal_friendly" )
	//RegisterMinimapMaterial( "goal_enemy", $"vgui/HUD/minimap_goal_enemy" )

	//RegisterMinimapMaterial( "hardpoint_neutral_a", $"vgui/HUD/capture_point_minimap_neutral_a" )
	//RegisterMinimapMaterial( "hardpoint_friendly_a", $"vgui/HUD/capture_point_minimap_blue_a" )
	//RegisterMinimapMaterial( "hardpoint_enemy_a", $"vgui/HUD/capture_point_minimap_orange_a" )

	//RegisterMinimapMaterial( "hardpoint_neutral_b", $"vgui/HUD/capture_point_minimap_neutral_b" )
	//RegisterMinimapMaterial( "hardpoint_friendly_b", $"vgui/HUD/capture_point_minimap_blue_b" )
	//RegisterMinimapMaterial( "hardpoint_enemy_b", $"vgui/HUD/capture_point_minimap_orange_b" )

	//RegisterMinimapMaterial( "hardpoint_neutral_c", $"vgui/HUD/capture_point_minimap_neutral_c" )
	//RegisterMinimapMaterial( "hardpoint_friendly_c", $"vgui/HUD/capture_point_minimap_blue_c" )
	//RegisterMinimapMaterial( "hardpoint_enemy_c", $"vgui/HUD/capture_point_minimap_orange_c" )

	//RegisterMinimapMaterial( "hardpoint_neutral_d", $"vgui/HUD/capture_point_minimap_neutral_d" )
	//RegisterMinimapMaterial( "hardpoint_friendly_d", $"vgui/HUD/capture_point_minimap_blue_d" )
	//RegisterMinimapMaterial( "hardpoint_enemy_d", $"vgui/HUD/capture_point_minimap_orange_d" )

	//RegisterMinimapMaterial( "hardpoint_neutral_e", $"vgui/HUD/capture_point_minimap_neutral_e" )
	//RegisterMinimapMaterial( "hardpoint_friendly_e", $"vgui/HUD/capture_point_minimap_blue_e" )
	//RegisterMinimapMaterial( "hardpoint_enemy_e", $"vgui/HUD/capture_point_minimap_orange_e" )

	//#if SERVER
	//#if R1_VGUI_MINIMAP
		//Minimap_PrecacheMaterial( $"vgui/HUD/firingPing" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/threathud_friendly_soldier" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/threathud_enemy_soldier" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/threathud_friendly_titan" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/threathud_party_titan" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/threathud_enemy_titan" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/threathud_friendly_runner" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/threathud_party_runner" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/threathud_enemy_runner" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/threathud_attack" )

		//Gamemode specific minimap icons. Long term need better way of doing this.
		//Minimap_PrecacheMaterial( MFD_MINIMAP_PENDING_MARK_FRIENDLY_MATERIAL )
		//Minimap_PrecacheMaterial( MFD_MINIMAP_FRIENDLY_MATERIAL )
		//Minimap_PrecacheMaterial( MFD_MINIMAP_ENEMY_MATERIAL )

		// coop PreCaches
		//Minimap_PrecacheMaterial( $"vgui/HUD/titanFiringPing" )	// used in coop to mark the general area where enemies will spawn.
		//Minimap_PrecacheMaterial( $"vgui/HUD/coop/coop_harvester" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/coop/minimap_coop_nuke_titan" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/coop/minimap_coop_emp_titan" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/coop/minimap_coop_mortar_titan" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/coop/minimap_coop_titan" )
		//Minimap_PrecacheMaterial( $"vgui/hud/coop/coop_ammo_locker_icon" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/cloak_drone_minimap_orange" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/sniper_minimap_orange" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/coop/minimap_coop_turret" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/coop/minimap_coop_p1" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/coop/minimap_coop_p2" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/coop/minimap_coop_p3" )
		//Minimap_PrecacheMaterial( $"vgui/HUD/coop/minimap_coop_p4" )

		//level.minimapEntityNames <- {}
	//#endif
	//#endif

	level.allowRegisterMinimapMaterials = false
	file.allowRegisterMinimapRuis = false
}

void function RegisterMinimapRuiAsset( asset ruiAsset )
{
	Assert( file.allowRegisterMinimapRuis )

	file.minimapRuis[file.minimapRuis.len()] = ruiAsset
}

void function RegisterMinimapMaterial( string materialRef, asset material )
{
	Assert( !( materialRef in level.minimapMaterials ) )
	Assert( level.allowRegisterMinimapMaterials )

	level.minimapMaterials[ materialRef ] <- material

	//#if SERVER
	//#if R1_VGUI_MINIMAP
	//	Minimap_PrecacheMaterial( material )
	//#endif
	//#endif
}

asset function GetMinimapMaterial( string materialRef )
{
	return expect asset( level.minimapMaterials[ materialRef ] )
}

const MINIMAP_TITAN_SCALE = 0.3
const MINIMAP_PILOT_SCALE = 0.15
//coop = x * 0.572
const MINIMAP_TITAN_SCALE_COOP 		= 0.13
const MINIMAP_PILOT_SCALE_COOP		= 0.13

void function UpdatePlayerMinimapMaterials( entity player )
{
	float titanscale = MINIMAP_TITAN_SCALE
	float pilotscale = MINIMAP_PILOT_SCALE
	//asset friendlyTitanMaterial = $"vgui/HUD/threathud_friendly_titan"
	//asset friendlyPilotMaterial = $"vgui/HUD/threathud_friendly_runner"
	//asset partyTitanMaterial = $"vgui/HUD/threathud_party_titan"
	//asset partyPilotMaterial = $"vgui/HUD/threathud_party_runner"
	//asset enemyTitanMaterial = $"vgui/HUD/threathud_enemy_titan"

	player.Minimap_SetClampToEdge( true )
	player.Minimap_SetAlignUpright( false )
	if ( player.IsTitan() )
	{
		//#if R1_VGUI_MINIMAP
		//	player.Minimap_SetFriendlyMaterial( friendlyTitanMaterial )
		//	player.Minimap_SetPartyMemberMaterial( partyTitanMaterial )
		//	// PROTO_RADAR start
		//	if ( GetCurrentPlaylistVarInt( "proto_radar_enabled", 0 ) == 0 )
		//	// PROTO_RADAR end
		//		player.Minimap_SetEnemyMaterial( enemyTitanMaterial )
		//#endif

		player.Minimap_SetObjectScale( titanscale )
		player.Minimap_SetZOrder( MINIMAP_Z_PLAYER )
	}
	else
	{
		//#if R1_VGUI_MINIMAP
		//	player.Minimap_SetFriendlyMaterial( friendlyPilotMaterial )
		//	player.Minimap_SetPartyMemberMaterial( partyPilotMaterial )
		//	// PROTO_RADAR start
		//	if ( GetCurrentPlaylistVarInt( "proto_radar_enabled", 0 ) == 0 )
		//	// PROTO_RADAR end
		//		player.Minimap_SetEnemyMaterial( $"vgui/HUD/threathud_enemy_runner" )
		//#endif

		player.Minimap_SetObjectScale( pilotscale )
		player.Minimap_SetZOrder( MINIMAP_Z_PLAYER )
	}

	//#if R1_VGUI_MINIMAP
	//	player.Minimap_SetAttackMaterial( $"vgui/HUD/threathud_attack" )
	//#endif
}

#if SERVER
/*function GetSoldierMinimapSettings( npc )
{
	local minionscale = MINIMAP_MINION_SCALE
	return { friendlyMaterial =$"vgui/HUD/threathud_friendly_soldier", enemyMaterial = $"vgui/HUD/threathud_enemy_soldier", scale = minionscale }
}*/

/*function GetTitanMinimapSettings( npc )
{
	local titanscale
	local enemyMaterial

	titanscale = MINIMAP_TITAN_SCALE
	enemyMaterial = $"vgui/HUD/threathud_enemy_titan"

	return { friendlyMaterial = $"vgui/HUD/threathud_friendly_titan", enemyMaterial = enemyMaterial, scale = titanscale }
}*/

void function InitMinimapSettings( entity npc )
{
	if ( npc.IsTitan() )
	{
		//npc.Minimap_SetCustomState( eMinimapObject.TITAN )

		npc.Minimap_SetClampToEdge( false )
	}
	else if ( IsTurret( npc ) )
	{
		//if ( npc.GetClassName() == "npc_turret_mega" )
		//	npc.Minimap_SetCustomState( eMinimapObject.MEGA_TURRET )
		//else if ( npc.GetClassName() == "npc_turret_sentry" )
		//	npc.Minimap_SetCustomState( eMinimapObject.SENTRY_TURRET )

		npc.Minimap_SetClampToEdge( false )
	}
	else
	{
		//npc.Minimap_SetCustomState( eMinimapObject.NPC )

		npc.Minimap_SetClampToEdge( false )
	}

	npc.Minimap_SetZOrder( MINIMAP_Z_NPC )
}

void function Minimap_RingPulseForPlayer( entity player, vector origin, float radius, float duration, int pulseCount, vector color, bool reverse = false )
{
	Remote_CallFunction_NonReplay( player, "ServerCallback_RingPulseMinimap", origin, radius, duration, pulseCount, color, reverse )
}

void function Minimap_RingPulseForTeam( int team, vector origin, float radius, float duration, int pulseCount, vector color, bool reverse = false )
{
	array<entity> players = GetPlayerArrayOfTeam( team )
	{
		foreach ( player in players )
		{
			Minimap_RingPulseForPlayer( player, origin, radius, duration, pulseCount, color, reverse )
		}
	}
}
#endif // SERVER
